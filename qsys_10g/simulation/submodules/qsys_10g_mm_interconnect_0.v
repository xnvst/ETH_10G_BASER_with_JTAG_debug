// qsys_10g_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 205 at 2014.10.27.20:38:01

`timescale 1 ps / 1 ps
module qsys_10g_mm_interconnect_0 (
		input  wire        clk_clk_clk,                                                   //                                                 clk_clk.clk
		input  wire        eth_10g_design_example_0_mm_reset_reset_bridge_in_reset_reset, // eth_10g_design_example_0_mm_reset_reset_bridge_in_reset.reset
		input  wire        mm_bridge_reset_reset_bridge_in_reset_reset,                   //                   mm_bridge_reset_reset_bridge_in_reset.reset
		input  wire [23:0] mm_bridge_m0_address,                                          //                                            mm_bridge_m0.address
		output wire        mm_bridge_m0_waitrequest,                                      //                                                        .waitrequest
		input  wire [3:0]  mm_bridge_m0_burstcount,                                       //                                                        .burstcount
		input  wire [3:0]  mm_bridge_m0_byteenable,                                       //                                                        .byteenable
		input  wire        mm_bridge_m0_read,                                             //                                                        .read
		output wire [31:0] mm_bridge_m0_readdata,                                         //                                                        .readdata
		output wire        mm_bridge_m0_readdatavalid,                                    //                                                        .readdatavalid
		input  wire        mm_bridge_m0_write,                                            //                                                        .write
		input  wire [31:0] mm_bridge_m0_writedata,                                        //                                                        .writedata
		input  wire        mm_bridge_m0_debugaccess,                                      //                                                        .debugaccess
		output wire [18:0] eth_10g_design_example_0_mm_pipeline_bridge_address,           //             eth_10g_design_example_0_mm_pipeline_bridge.address
		output wire        eth_10g_design_example_0_mm_pipeline_bridge_write,             //                                                        .write
		output wire        eth_10g_design_example_0_mm_pipeline_bridge_read,              //                                                        .read
		input  wire [31:0] eth_10g_design_example_0_mm_pipeline_bridge_readdata,          //                                                        .readdata
		output wire [31:0] eth_10g_design_example_0_mm_pipeline_bridge_writedata,         //                                                        .writedata
		input  wire        eth_10g_design_example_0_mm_pipeline_bridge_waitrequest        //                                                        .waitrequest
	);

	wire         mm_bridge_m0_translator_avalon_universal_master_0_waitrequest;                   // mm_bridge_m0_agent:av_waitrequest -> mm_bridge_m0_translator:uav_waitrequest
	wire   [5:0] mm_bridge_m0_translator_avalon_universal_master_0_burstcount;                    // mm_bridge_m0_translator:uav_burstcount -> mm_bridge_m0_agent:av_burstcount
	wire  [31:0] mm_bridge_m0_translator_avalon_universal_master_0_writedata;                     // mm_bridge_m0_translator:uav_writedata -> mm_bridge_m0_agent:av_writedata
	wire  [23:0] mm_bridge_m0_translator_avalon_universal_master_0_address;                       // mm_bridge_m0_translator:uav_address -> mm_bridge_m0_agent:av_address
	wire         mm_bridge_m0_translator_avalon_universal_master_0_lock;                          // mm_bridge_m0_translator:uav_lock -> mm_bridge_m0_agent:av_lock
	wire         mm_bridge_m0_translator_avalon_universal_master_0_write;                         // mm_bridge_m0_translator:uav_write -> mm_bridge_m0_agent:av_write
	wire         mm_bridge_m0_translator_avalon_universal_master_0_read;                          // mm_bridge_m0_translator:uav_read -> mm_bridge_m0_agent:av_read
	wire  [31:0] mm_bridge_m0_translator_avalon_universal_master_0_readdata;                      // mm_bridge_m0_agent:av_readdata -> mm_bridge_m0_translator:uav_readdata
	wire         mm_bridge_m0_translator_avalon_universal_master_0_debugaccess;                   // mm_bridge_m0_translator:uav_debugaccess -> mm_bridge_m0_agent:av_debugaccess
	wire   [3:0] mm_bridge_m0_translator_avalon_universal_master_0_byteenable;                    // mm_bridge_m0_translator:uav_byteenable -> mm_bridge_m0_agent:av_byteenable
	wire         mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid;                 // mm_bridge_m0_agent:av_readdatavalid -> mm_bridge_m0_translator:uav_readdatavalid
	wire         rsp_mux_src_endofpacket;                                                         // rsp_mux:src_endofpacket -> mm_bridge_m0_agent:rp_endofpacket
	wire         rsp_mux_src_valid;                                                               // rsp_mux:src_valid -> mm_bridge_m0_agent:rp_valid
	wire         rsp_mux_src_startofpacket;                                                       // rsp_mux:src_startofpacket -> mm_bridge_m0_agent:rp_startofpacket
	wire  [96:0] rsp_mux_src_data;                                                                // rsp_mux:src_data -> mm_bridge_m0_agent:rp_data
	wire   [0:0] rsp_mux_src_channel;                                                             // rsp_mux:src_channel -> mm_bridge_m0_agent:rp_channel
	wire         rsp_mux_src_ready;                                                               // mm_bridge_m0_agent:rp_ready -> rsp_mux:src_ready
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_waitrequest;                // eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_waitrequest -> eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_waitrequest
	wire   [2:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_burstcount;                 // eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_burstcount -> eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_burstcount
	wire  [31:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_writedata;                  // eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_writedata -> eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_writedata
	wire  [23:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_address;                    // eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_address -> eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_address
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_write;                      // eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_write -> eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_write
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_lock;                       // eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_lock -> eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_lock
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_read;                       // eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_read -> eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_read
	wire  [31:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_readdata;                   // eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_readdata -> eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_readdata
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_readdatavalid;              // eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_readdatavalid -> eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_readdatavalid
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_debugaccess;                // eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_debugaccess -> eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_debugaccess
	wire   [3:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_byteenable;                 // eth_10g_design_example_0_mm_pipeline_bridge_agent:m0_byteenable -> eth_10g_design_example_0_mm_pipeline_bridge_translator:uav_byteenable
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_endofpacket;         // eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_source_endofpacket -> eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:in_endofpacket
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_valid;               // eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_source_valid -> eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:in_valid
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_startofpacket;       // eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_source_startofpacket -> eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:in_startofpacket
	wire  [97:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_data;                // eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_source_data -> eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:in_data
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_ready;               // eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:in_ready -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_source_ready
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_endofpacket;      // eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:out_endofpacket -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_sink_endofpacket
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_valid;            // eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:out_valid -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_sink_valid
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_startofpacket;    // eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:out_startofpacket -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_sink_startofpacket
	wire  [97:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_data;             // eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:out_data -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_sink_data
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_ready;            // eth_10g_design_example_0_mm_pipeline_bridge_agent:rf_sink_ready -> eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo:out_ready
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_valid;          // eth_10g_design_example_0_mm_pipeline_bridge_agent:rdata_fifo_src_valid -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rdata_fifo_sink_valid
	wire  [33:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_data;           // eth_10g_design_example_0_mm_pipeline_bridge_agent:rdata_fifo_src_data -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rdata_fifo_sink_data
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_ready;          // eth_10g_design_example_0_mm_pipeline_bridge_agent:rdata_fifo_sink_ready -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rdata_fifo_src_ready
	wire         mm_bridge_m0_agent_cp_endofpacket;                                               // mm_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         mm_bridge_m0_agent_cp_valid;                                                     // mm_bridge_m0_agent:cp_valid -> router:sink_valid
	wire         mm_bridge_m0_agent_cp_startofpacket;                                             // mm_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [96:0] mm_bridge_m0_agent_cp_data;                                                      // mm_bridge_m0_agent:cp_data -> router:sink_data
	wire         mm_bridge_m0_agent_cp_ready;                                                     // router:sink_ready -> mm_bridge_m0_agent:cp_ready
	wire         router_src_endofpacket;                                                          // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         router_src_valid;                                                                // router:src_valid -> cmd_demux:sink_valid
	wire         router_src_startofpacket;                                                        // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [96:0] router_src_data;                                                                 // router:src_data -> cmd_demux:sink_data
	wire   [0:0] router_src_channel;                                                              // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_ready;                                                                // cmd_demux:sink_ready -> router:src_ready
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_endofpacket;                // eth_10g_design_example_0_mm_pipeline_bridge_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_valid;                      // eth_10g_design_example_0_mm_pipeline_bridge_agent:rp_valid -> router_001:sink_valid
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_startofpacket;              // eth_10g_design_example_0_mm_pipeline_bridge_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [96:0] eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_data;                       // eth_10g_design_example_0_mm_pipeline_bridge_agent:rp_data -> router_001:sink_data
	wire         eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_ready;                      // router_001:sink_ready -> eth_10g_design_example_0_mm_pipeline_bridge_agent:rp_ready
	wire         router_001_src_endofpacket;                                                      // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_001_src_valid;                                                            // router_001:src_valid -> rsp_demux:sink_valid
	wire         router_001_src_startofpacket;                                                    // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [96:0] router_001_src_data;                                                             // router_001:src_data -> rsp_demux:sink_data
	wire   [0:0] router_001_src_channel;                                                          // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_ready;                                                            // rsp_demux:sink_ready -> router_001:src_ready
	wire         cmd_mux_src_endofpacket;                                                         // cmd_mux:src_endofpacket -> eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:sink0_endofpacket
	wire         cmd_mux_src_valid;                                                               // cmd_mux:src_valid -> eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:sink0_valid
	wire         cmd_mux_src_startofpacket;                                                       // cmd_mux:src_startofpacket -> eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:sink0_startofpacket
	wire  [96:0] cmd_mux_src_data;                                                                // cmd_mux:src_data -> eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:sink0_data
	wire   [0:0] cmd_mux_src_channel;                                                             // cmd_mux:src_channel -> eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:sink0_channel
	wire         cmd_mux_src_ready;                                                               // eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire         eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_endofpacket;   // eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:source0_endofpacket -> eth_10g_design_example_0_mm_pipeline_bridge_agent:cp_endofpacket
	wire         eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_valid;         // eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:source0_valid -> eth_10g_design_example_0_mm_pipeline_bridge_agent:cp_valid
	wire         eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_startofpacket; // eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:source0_startofpacket -> eth_10g_design_example_0_mm_pipeline_bridge_agent:cp_startofpacket
	wire  [96:0] eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_data;          // eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:source0_data -> eth_10g_design_example_0_mm_pipeline_bridge_agent:cp_data
	wire         eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_ready;         // eth_10g_design_example_0_mm_pipeline_bridge_agent:cp_ready -> eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:source0_ready
	wire   [0:0] eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_channel;       // eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter:source0_channel -> eth_10g_design_example_0_mm_pipeline_bridge_agent:cp_channel
	wire         cmd_demux_src0_endofpacket;                                                      // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                                            // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire         cmd_demux_src0_startofpacket;                                                    // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [96:0] cmd_demux_src0_data;                                                             // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire   [0:0] cmd_demux_src0_channel;                                                          // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_ready;                                                            // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire         rsp_demux_src0_endofpacket;                                                      // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                            // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire         rsp_demux_src0_startofpacket;                                                    // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [96:0] rsp_demux_src0_data;                                                             // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire   [0:0] rsp_demux_src0_channel;                                                          // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_ready;                                                            // rsp_mux:sink0_ready -> rsp_demux:src0_ready

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (24),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (24),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_m0_translator (
		.clk                      (clk_clk_clk),                                                     //                       clk.clk
		.reset                    (mm_bridge_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address              (mm_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                            //               (terminated)
		.av_lock                  (1'b0),                                                            //               (terminated)
		.uav_clken                (),                                                                //               (terminated)
		.av_clken                 (1'b1),                                                            //               (terminated)
		.uav_response             (2'b00),                                                           //               (terminated)
		.av_response              (),                                                                //               (terminated)
		.uav_writeresponserequest (),                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                 //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (24),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_10g_design_example_0_mm_pipeline_bridge_translator (
		.clk                      (clk_clk_clk),                                                        //                      clk.clk
		.reset                    (mm_bridge_reset_reset_bridge_in_reset_reset),                        //                    reset.reset
		.uav_address              (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_read),          //                         .read
		.uav_write                (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_write),         //                         .write
		.uav_waitrequest          (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (eth_10g_design_example_0_mm_pipeline_bridge_address),                //      avalon_anti_slave_0.address
		.av_write                 (eth_10g_design_example_0_mm_pipeline_bridge_write),                  //                         .write
		.av_read                  (eth_10g_design_example_0_mm_pipeline_bridge_read),                   //                         .read
		.av_readdata              (eth_10g_design_example_0_mm_pipeline_bridge_readdata),               //                         .readdata
		.av_writedata             (eth_10g_design_example_0_mm_pipeline_bridge_writedata),              //                         .writedata
		.av_waitrequest           (eth_10g_design_example_0_mm_pipeline_bridge_waitrequest),            //                         .waitrequest
		.av_begintransfer         (),                                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                                   //              (terminated)
		.av_burstcount            (),                                                                   //              (terminated)
		.av_byteenable            (),                                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                                               //              (terminated)
		.av_writebyteenable       (),                                                                   //              (terminated)
		.av_lock                  (),                                                                   //              (terminated)
		.av_chipselect            (),                                                                   //              (terminated)
		.av_clken                 (),                                                                   //              (terminated)
		.uav_clken                (1'b0),                                                               //              (terminated)
		.av_debugaccess           (),                                                                   //              (terminated)
		.av_outputenable          (),                                                                   //              (terminated)
		.uav_response             (),                                                                   //              (terminated)
		.av_response              (2'b00),                                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                                   //              (terminated)
		.av_writeresponserequest  (),                                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_BEGIN_BURST           (80),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (66),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_TRANS_LOCK            (64),
		.PKT_TRANS_EXCLUSIVE       (65),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (83),
		.PKT_THREAD_ID_H           (84),
		.PKT_THREAD_ID_L           (84),
		.PKT_CACHE_H               (91),
		.PKT_CACHE_L               (88),
		.PKT_DATA_SIDEBAND_H       (79),
		.PKT_DATA_SIDEBAND_L       (79),
		.PKT_QOS_H                 (81),
		.PKT_QOS_L                 (81),
		.PKT_ADDR_SIDEBAND_H       (78),
		.PKT_ADDR_SIDEBAND_L       (78),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_ORI_BURST_SIZE_H      (96),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_m0_agent (
		.clk                     (clk_clk_clk),                                                     //       clk.clk
		.reset                   (mm_bridge_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address              (mm_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (mm_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (mm_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (mm_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (mm_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (mm_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (mm_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (mm_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (mm_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (mm_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (mm_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (mm_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (mm_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (mm_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (mm_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid                (rsp_mux_src_valid),                                               //        rp.valid
		.rp_data                 (rsp_mux_src_data),                                                //          .data
		.rp_channel              (rsp_mux_src_channel),                                             //          .channel
		.rp_startofpacket        (rsp_mux_src_startofpacket),                                       //          .startofpacket
		.rp_endofpacket          (rsp_mux_src_endofpacket),                                         //          .endofpacket
		.rp_ready                (rsp_mux_src_ready),                                               //          .ready
		.av_response             (),                                                                // (terminated)
		.av_writeresponserequest (1'b0),                                                            // (terminated)
		.av_writeresponsevalid   ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (80),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_POSTED          (61),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.PKT_TRANS_LOCK            (64),
		.PKT_SRC_ID_H              (82),
		.PKT_SRC_ID_L              (82),
		.PKT_DEST_ID_H             (83),
		.PKT_DEST_ID_L             (83),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (66),
		.PKT_PROTECTION_H          (87),
		.PKT_PROTECTION_L          (85),
		.PKT_RESPONSE_STATUS_H     (93),
		.PKT_RESPONSE_STATUS_L     (92),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_ORI_BURST_SIZE_L      (94),
		.PKT_ORI_BURST_SIZE_H      (96),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (97),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) eth_10g_design_example_0_mm_pipeline_bridge_agent (
		.clk                     (clk_clk_clk),                                                                     //             clk.clk
		.reset                   (mm_bridge_reset_reset_bridge_in_reset_reset),                                     //       clk_reset.reset
		.m0_address              (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_address),                    //              m0.address
		.m0_burstcount           (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_lock),                       //                .lock
		.m0_readdata             (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_read),                       //                .read
		.m0_waitrequest          (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_writedata),                  //                .writedata
		.m0_write                (eth_10g_design_example_0_mm_pipeline_bridge_agent_m0_write),                      //                .write
		.rp_endofpacket          (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_ready),                      //                .ready
		.rp_valid                (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_valid),                      //                .valid
		.rp_data                 (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_data),                       //                .data
		.rp_startofpacket        (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (eth_10g_design_example_0_mm_pipeline_bridge_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (98),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                                  //       clk.clk
		.reset             (mm_bridge_reset_reset_bridge_in_reset_reset),                                  // clk_reset.reset
		.in_data           (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_data),             //        in.data
		.in_valid          (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_valid),            //          .valid
		.in_ready          (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (eth_10g_design_example_0_mm_pipeline_bridge_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (eth_10g_design_example_0_mm_pipeline_bridge_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                        // (terminated)
		.csr_read          (1'b0),                                                                         // (terminated)
		.csr_write         (1'b0),                                                                         // (terminated)
		.csr_readdata      (),                                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                         // (terminated)
		.almost_full_data  (),                                                                             // (terminated)
		.almost_empty_data (),                                                                             // (terminated)
		.in_empty          (1'b0),                                                                         // (terminated)
		.out_empty         (),                                                                             // (terminated)
		.in_error          (1'b0),                                                                         // (terminated)
		.out_error         (),                                                                             // (terminated)
		.in_channel        (1'b0),                                                                         // (terminated)
		.out_channel       ()                                                                              // (terminated)
	);

	qsys_10g_mm_interconnect_0_router router (
		.sink_ready         (mm_bridge_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                            //       src.ready
		.src_valid          (router_src_valid),                            //          .valid
		.src_data           (router_src_data),                             //          .data
		.src_channel        (router_src_channel),                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                       //          .endofpacket
	);

	qsys_10g_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_ready),         //      sink.ready
		.sink_valid         (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_valid),         //          .valid
		.sink_data          (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_data),          //          .data
		.sink_startofpacket (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (eth_10g_design_example_0_mm_pipeline_bridge_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                                        //       clk.clk
		.reset              (mm_bridge_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.src_ready          (router_001_src_ready),                                               //       src.ready
		.src_valid          (router_001_src_valid),                                               //          .valid
		.src_data           (router_001_src_data),                                                //          .data
		.src_channel        (router_001_src_channel),                                             //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                       //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                          //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (59),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (80),
		.PKT_BYTE_CNT_H            (71),
		.PKT_BYTE_CNT_L            (66),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (75),
		.PKT_BURST_SIZE_L          (73),
		.PKT_BURST_TYPE_H          (77),
		.PKT_BURST_TYPE_L          (76),
		.PKT_BURSTWRAP_H           (72),
		.PKT_BURSTWRAP_L           (72),
		.PKT_TRANS_COMPRESSED_READ (60),
		.PKT_TRANS_WRITE           (62),
		.PKT_TRANS_READ            (63),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (97),
		.ST_CHANNEL_W              (1),
		.OUT_BYTE_CNT_H            (66),
		.OUT_BURSTWRAP_H           (72),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter (
		.clk                   (clk_clk_clk),                                                                     //       cr0.clk
		.reset                 (mm_bridge_reset_reset_bridge_in_reset_reset),                                     // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                               //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                                //          .data
		.sink0_channel         (cmd_mux_src_channel),                                                             //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                                         //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                               //          .ready
		.source0_valid         (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_data),          //          .data
		.source0_channel       (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (eth_10g_design_example_0_mm_pipeline_bridge_burst_adapter_source0_ready)          //          .ready
	);

	qsys_10g_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                            //      sink.ready
		.sink_channel       (router_src_channel),                          //          .channel
		.sink_data          (router_src_data),                             //          .data
		.sink_startofpacket (router_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_src_valid),                            //          .valid
		.src0_ready         (cmd_demux_src0_ready),                        //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                        //          .valid
		.src0_data          (cmd_demux_src0_data),                         //          .data
		.src0_channel       (cmd_demux_src0_channel),                      //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                   //          .endofpacket
	);

	qsys_10g_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_src_valid),                           //          .valid
		.src_data            (cmd_mux_src_data),                            //          .data
		.src_channel         (cmd_mux_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                      //          .channel
		.sink0_data          (cmd_demux_src0_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                   //          .endofpacket
	);

	qsys_10g_mm_interconnect_0_cmd_demux rsp_demux (
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                        //      sink.ready
		.sink_channel       (router_001_src_channel),                      //          .channel
		.sink_data          (router_001_src_data),                         //          .data
		.sink_startofpacket (router_001_src_startofpacket),                //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                  //          .endofpacket
		.sink_valid         (router_001_src_valid),                        //          .valid
		.src0_ready         (rsp_demux_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_src0_data),                         //          .data
		.src0_channel       (rsp_demux_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                   //          .endofpacket
	);

	qsys_10g_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                                 //       clk.clk
		.reset               (mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                           //       src.ready
		.src_valid           (rsp_mux_src_valid),                           //          .valid
		.src_data            (rsp_mux_src_data),                            //          .data
		.src_channel         (rsp_mux_src_channel),                         //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                        //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                        //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                      //          .channel
		.sink0_data          (rsp_demux_src0_data),                         //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                   //          .endofpacket
	);

endmodule
