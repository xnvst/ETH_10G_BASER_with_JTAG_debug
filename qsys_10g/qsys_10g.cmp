	component qsys_10g is
		port (
			clk_clk                         : in  std_logic                     := 'X';             -- clk
			reset_reset_n                   : in  std_logic                     := 'X';             -- reset_n
			tx_clk_clk                      : in  std_logic                     := 'X';             -- clk
			tx_reset_reset_n                : in  std_logic                     := 'X';             -- reset_n
			ref_clk_clk                     : in  std_logic                     := 'X';             -- clk
			ref_reset_reset_n               : in  std_logic                     := 'X';             -- reset_n
			avalon_st_rxstatus_valid        : out std_logic;                                        -- valid
			avalon_st_rxstatus_data         : out std_logic_vector(39 downto 0);                    -- data
			avalon_st_rxstatus_error        : out std_logic_vector(6 downto 0);                     -- error
			link_fault_status_xgmii_rx_data : out std_logic_vector(1 downto 0);                     -- data
			rx_serial_data_export           : in  std_logic                     := 'X';             -- export
			tx_serial_data_export           : out std_logic_vector(0 downto 0);                     -- export
			rx_ready_export                 : out std_logic;                                        -- export
			tx_ready_export                 : out std_logic;                                        -- export
			tx_sc_fifo_in_data              : in  std_logic_vector(63 downto 0) := (others => 'X'); -- data
			tx_sc_fifo_in_valid             : in  std_logic                     := 'X';             -- valid
			tx_sc_fifo_in_ready             : out std_logic;                                        -- ready
			tx_sc_fifo_in_startofpacket     : in  std_logic                     := 'X';             -- startofpacket
			tx_sc_fifo_in_endofpacket       : in  std_logic                     := 'X';             -- endofpacket
			tx_sc_fifo_in_empty             : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- empty
			tx_sc_fifo_in_error             : in  std_logic                     := 'X';             -- error
			rx_sc_fifo_out_data             : out std_logic_vector(63 downto 0);                    -- data
			rx_sc_fifo_out_valid            : out std_logic;                                        -- valid
			rx_sc_fifo_out_ready            : in  std_logic                     := 'X';             -- ready
			rx_sc_fifo_out_startofpacket    : out std_logic;                                        -- startofpacket
			rx_sc_fifo_out_endofpacket      : out std_logic;                                        -- endofpacket
			rx_sc_fifo_out_empty            : out std_logic_vector(2 downto 0);                     -- empty
			rx_sc_fifo_out_error            : out std_logic_vector(5 downto 0);                     -- error
			mdio_mdc                        : out std_logic;                                        -- mdc
			mdio_mdio_in                    : in  std_logic                     := 'X';             -- mdio_in
			mdio_mdio_out                   : out std_logic;                                        -- mdio_out
			mdio_mdio_oen                   : out std_logic;                                        -- mdio_oen
			avalon_st_txstatus_data         : out std_logic_vector(39 downto 0);                    -- data
			avalon_st_txstatus_valid        : out std_logic;                                        -- valid
			avalon_st_txstatus_error        : out std_logic_vector(6 downto 0);                     -- error
			xgmii_rx_clk_clk                : out std_logic;                                        -- clk
			mm_bridge_s0_waitrequest        : out std_logic;                                        -- waitrequest
			mm_bridge_s0_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			mm_bridge_s0_readdatavalid      : out std_logic;                                        -- readdatavalid
			mm_bridge_s0_burstcount         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- burstcount
			mm_bridge_s0_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			mm_bridge_s0_address            : in  std_logic_vector(23 downto 0) := (others => 'X'); -- address
			mm_bridge_s0_write              : in  std_logic                     := 'X';             -- write
			mm_bridge_s0_read               : in  std_logic                     := 'X';             -- read
			mm_bridge_s0_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			mm_bridge_s0_debugaccess        : in  std_logic                     := 'X'              -- debugaccess
		);
	end component qsys_10g;

