// qsys_10g_eth_10g_design_example_0_eth_10g_mac.v

// This file was auto-generated from altera_eth_10g_mac_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 205 at 2014.10.27.20:38:52

`timescale 1 ps / 1 ps
module qsys_10g_eth_10g_design_example_0_eth_10g_mac (
		input  wire        csr_clk_clk,                     //                    csr_clk.clk
		input  wire        csr_reset_reset_n,               //                  csr_reset.reset_n
		input  wire [12:0] csr_address,                     //                        csr.address
		output wire        csr_waitrequest,                 //                           .waitrequest
		input  wire        csr_read,                        //                           .read
		output wire [31:0] csr_readdata,                    //                           .readdata
		input  wire        csr_write,                       //                           .write
		input  wire [31:0] csr_writedata,                   //                           .writedata
		input  wire        tx_clk_clk,                      //                     tx_clk.clk
		input  wire        tx_reset_reset_n,                //                   tx_reset.reset_n
		input  wire        avalon_st_tx_startofpacket,      //               avalon_st_tx.startofpacket
		input  wire        avalon_st_tx_valid,              //                           .valid
		input  wire [63:0] avalon_st_tx_data,               //                           .data
		input  wire [2:0]  avalon_st_tx_empty,              //                           .empty
		output wire        avalon_st_tx_ready,              //                           .ready
		input  wire [0:0]  avalon_st_tx_error,              //                           .error
		input  wire        avalon_st_tx_endofpacket,        //                           .endofpacket
		input  wire [1:0]  avalon_st_pause_data,            //            avalon_st_pause.data
		output wire [71:0] xgmii_tx_data,                   //                   xgmii_tx.data
		output wire [39:0] avalon_st_txstatus_data,         //         avalon_st_txstatus.data
		output wire        avalon_st_txstatus_valid,        //                           .valid
		output wire [6:0]  avalon_st_txstatus_error,        //                           .error
		input  wire        rx_clk_clk,                      //                     rx_clk.clk
		input  wire        rx_reset_reset_n,                //                   rx_reset.reset_n
		input  wire [71:0] xgmii_rx_data,                   //                   xgmii_rx.data
		output wire        avalon_st_rx_startofpacket,      //               avalon_st_rx.startofpacket
		output wire        avalon_st_rx_endofpacket,        //                           .endofpacket
		output wire        avalon_st_rx_valid,              //                           .valid
		input  wire        avalon_st_rx_ready,              //                           .ready
		output wire [63:0] avalon_st_rx_data,               //                           .data
		output wire [2:0]  avalon_st_rx_empty,              //                           .empty
		output wire [5:0]  avalon_st_rx_error,              //                           .error
		output wire        avalon_st_rxstatus_valid,        //         avalon_st_rxstatus.valid
		output wire [39:0] avalon_st_rxstatus_data,         //                           .data
		output wire [6:0]  avalon_st_rxstatus_error,        //                           .error
		output wire [1:0]  link_fault_status_xgmii_rx_data  // link_fault_status_xgmii_rx.data
	);

	wire         tx_eth_packet_underflow_control_avalon_streaming_source_endofpacket;       // tx_eth_packet_underflow_control:data_src_eop -> tx_eth_pad_inserter:data_sink_eop
	wire         tx_eth_packet_underflow_control_avalon_streaming_source_valid;             // tx_eth_packet_underflow_control:data_src_valid -> tx_eth_pad_inserter:data_sink_valid
	wire         tx_eth_packet_underflow_control_avalon_streaming_source_startofpacket;     // tx_eth_packet_underflow_control:data_src_sop -> tx_eth_pad_inserter:data_sink_sop
	wire   [1:0] tx_eth_packet_underflow_control_avalon_streaming_source_error;             // tx_eth_packet_underflow_control:data_src_error -> tx_eth_pad_inserter:data_sink_error
	wire   [2:0] tx_eth_packet_underflow_control_avalon_streaming_source_empty;             // tx_eth_packet_underflow_control:data_src_empty -> tx_eth_pad_inserter:data_sink_empty
	wire  [63:0] tx_eth_packet_underflow_control_avalon_streaming_source_data;              // tx_eth_packet_underflow_control:data_src_data -> tx_eth_pad_inserter:data_sink_data
	wire         tx_eth_packet_underflow_control_avalon_streaming_source_ready;             // tx_eth_pad_inserter:data_sink_ready -> tx_eth_packet_underflow_control:data_src_ready
	wire         tx_eth_pause_beat_conversion_pause_beat_src_valid;                         // tx_eth_pause_beat_conversion:pause_beat_src_valid -> tx_eth_pkt_backpressure_control:pausebeats_sink_valid
	wire  [31:0] tx_eth_pause_beat_conversion_pause_beat_src_data;                          // tx_eth_pause_beat_conversion:pause_beat_src_data -> tx_eth_pkt_backpressure_control:pausebeats_sink_data
	wire         tx_eth_pad_inserter_avalon_st_source_data_endofpacket;                     // tx_eth_pad_inserter:data_src_eop -> tx_eth_pkt_backpressure_control:data_sink_eop
	wire         tx_eth_pad_inserter_avalon_st_source_data_valid;                           // tx_eth_pad_inserter:data_src_valid -> tx_eth_pkt_backpressure_control:data_sink_valid
	wire         tx_eth_pad_inserter_avalon_st_source_data_startofpacket;                   // tx_eth_pad_inserter:data_src_sop -> tx_eth_pkt_backpressure_control:data_sink_sop
	wire   [1:0] tx_eth_pad_inserter_avalon_st_source_data_error;                           // tx_eth_pad_inserter:data_src_error -> tx_eth_pkt_backpressure_control:data_sink_error
	wire   [2:0] tx_eth_pad_inserter_avalon_st_source_data_empty;                           // tx_eth_pad_inserter:data_src_empty -> tx_eth_pkt_backpressure_control:data_sink_empty
	wire  [63:0] tx_eth_pad_inserter_avalon_st_source_data_data;                            // tx_eth_pad_inserter:data_src_data -> tx_eth_pkt_backpressure_control:data_sink_data
	wire         tx_eth_pad_inserter_avalon_st_source_data_ready;                           // tx_eth_pkt_backpressure_control:data_sink_ready -> tx_eth_pad_inserter:data_src_ready
	wire         tx_eth_pause_ctrl_gen_pause_packet_endofpacket;                            // tx_eth_pause_ctrl_gen:pause_source_eop -> tx_st_pause_ctrl_error_adapter:in_endofpacket
	wire         tx_eth_pause_ctrl_gen_pause_packet_valid;                                  // tx_eth_pause_ctrl_gen:pause_source_valid -> tx_st_pause_ctrl_error_adapter:in_valid
	wire         tx_eth_pause_ctrl_gen_pause_packet_startofpacket;                          // tx_eth_pause_ctrl_gen:pause_source_sop -> tx_st_pause_ctrl_error_adapter:in_startofpacket
	wire   [0:0] tx_eth_pause_ctrl_gen_pause_packet_error;                                  // tx_eth_pause_ctrl_gen:pause_source_error -> tx_st_pause_ctrl_error_adapter:in_error
	wire   [2:0] tx_eth_pause_ctrl_gen_pause_packet_empty;                                  // tx_eth_pause_ctrl_gen:pause_source_empty -> tx_st_pause_ctrl_error_adapter:in_empty
	wire  [63:0] tx_eth_pause_ctrl_gen_pause_packet_data;                                   // tx_eth_pause_ctrl_gen:pause_source_data -> tx_st_pause_ctrl_error_adapter:in_data
	wire         tx_eth_pause_ctrl_gen_pause_packet_ready;                                  // tx_st_pause_ctrl_error_adapter:in_ready -> tx_eth_pause_ctrl_gen:pause_source_ready
	wire         tx_eth_pkt_backpressure_control_avalon_st_source_data_endofpacket;         // tx_eth_pkt_backpressure_control:data_src_eop -> tx_st_mux_flow_control_user_frame:in0_endofpacket
	wire         tx_eth_pkt_backpressure_control_avalon_st_source_data_valid;               // tx_eth_pkt_backpressure_control:data_src_valid -> tx_st_mux_flow_control_user_frame:in0_valid
	wire         tx_eth_pkt_backpressure_control_avalon_st_source_data_startofpacket;       // tx_eth_pkt_backpressure_control:data_src_sop -> tx_st_mux_flow_control_user_frame:in0_startofpacket
	wire   [1:0] tx_eth_pkt_backpressure_control_avalon_st_source_data_error;               // tx_eth_pkt_backpressure_control:data_src_error -> tx_st_mux_flow_control_user_frame:in0_error
	wire   [2:0] tx_eth_pkt_backpressure_control_avalon_st_source_data_empty;               // tx_eth_pkt_backpressure_control:data_src_empty -> tx_st_mux_flow_control_user_frame:in0_empty
	wire  [63:0] tx_eth_pkt_backpressure_control_avalon_st_source_data_data;                // tx_eth_pkt_backpressure_control:data_src_data -> tx_st_mux_flow_control_user_frame:in0_data
	wire         tx_eth_pkt_backpressure_control_avalon_st_source_data_ready;               // tx_st_mux_flow_control_user_frame:in0_ready -> tx_eth_pkt_backpressure_control:data_src_ready
	wire         tx_st_pause_ctrl_error_adapter_out_endofpacket;                            // tx_st_pause_ctrl_error_adapter:out_endofpacket -> tx_st_mux_flow_control_user_frame:in1_endofpacket
	wire         tx_st_pause_ctrl_error_adapter_out_valid;                                  // tx_st_pause_ctrl_error_adapter:out_valid -> tx_st_mux_flow_control_user_frame:in1_valid
	wire         tx_st_pause_ctrl_error_adapter_out_startofpacket;                          // tx_st_pause_ctrl_error_adapter:out_startofpacket -> tx_st_mux_flow_control_user_frame:in1_startofpacket
	wire   [1:0] tx_st_pause_ctrl_error_adapter_out_error;                                  // tx_st_pause_ctrl_error_adapter:out_error -> tx_st_mux_flow_control_user_frame:in1_error
	wire   [2:0] tx_st_pause_ctrl_error_adapter_out_empty;                                  // tx_st_pause_ctrl_error_adapter:out_empty -> tx_st_mux_flow_control_user_frame:in1_empty
	wire  [63:0] tx_st_pause_ctrl_error_adapter_out_data;                                   // tx_st_pause_ctrl_error_adapter:out_data -> tx_st_mux_flow_control_user_frame:in1_data
	wire         tx_st_pause_ctrl_error_adapter_out_ready;                                  // tx_st_mux_flow_control_user_frame:in1_ready -> tx_st_pause_ctrl_error_adapter:out_ready
	wire         tx_st_mux_flow_control_user_frame_out_endofpacket;                         // tx_st_mux_flow_control_user_frame:out_endofpacket -> tx_eth_address_inserter:data_sink_eop
	wire         tx_st_mux_flow_control_user_frame_out_valid;                               // tx_st_mux_flow_control_user_frame:out_valid -> tx_eth_address_inserter:data_sink_valid
	wire         tx_st_mux_flow_control_user_frame_out_startofpacket;                       // tx_st_mux_flow_control_user_frame:out_startofpacket -> tx_eth_address_inserter:data_sink_sop
	wire   [1:0] tx_st_mux_flow_control_user_frame_out_error;                               // tx_st_mux_flow_control_user_frame:out_error -> tx_eth_address_inserter:data_sink_error
	wire   [2:0] tx_st_mux_flow_control_user_frame_out_empty;                               // tx_st_mux_flow_control_user_frame:out_empty -> tx_eth_address_inserter:data_sink_empty
	wire  [63:0] tx_st_mux_flow_control_user_frame_out_data;                                // tx_st_mux_flow_control_user_frame:out_data -> tx_eth_address_inserter:data_sink_data
	wire         tx_st_mux_flow_control_user_frame_out_channel;                             // tx_st_mux_flow_control_user_frame:out_channel -> tx_eth_address_inserter:data_sink_channel
	wire         tx_st_mux_flow_control_user_frame_out_ready;                               // tx_eth_address_inserter:data_sink_ready -> tx_st_mux_flow_control_user_frame:out_ready
	wire         tx_eth_address_inserter_avalon_streaming_source_endofpacket;               // tx_eth_address_inserter:data_src_eop -> tx_eth_crc_inserter:data_sink_eop
	wire         tx_eth_address_inserter_avalon_streaming_source_valid;                     // tx_eth_address_inserter:data_src_valid -> tx_eth_crc_inserter:data_sink_valid
	wire         tx_eth_address_inserter_avalon_streaming_source_startofpacket;             // tx_eth_address_inserter:data_src_sop -> tx_eth_crc_inserter:data_sink_sop
	wire   [1:0] tx_eth_address_inserter_avalon_streaming_source_error;                     // tx_eth_address_inserter:data_src_error -> tx_eth_crc_inserter:data_sink_error
	wire   [2:0] tx_eth_address_inserter_avalon_streaming_source_empty;                     // tx_eth_address_inserter:data_src_empty -> tx_eth_crc_inserter:data_sink_empty
	wire  [63:0] tx_eth_address_inserter_avalon_streaming_source_data;                      // tx_eth_address_inserter:data_src_data -> tx_eth_crc_inserter:data_sink_data
	wire         tx_eth_address_inserter_avalon_streaming_source_channel;                   // tx_eth_address_inserter:data_src_channel -> tx_eth_crc_inserter:data_sink_channel
	wire         tx_eth_address_inserter_avalon_streaming_source_ready;                     // tx_eth_crc_inserter:data_sink_ready -> tx_eth_address_inserter:data_src_ready
	wire         tx_eth_crc_inserter_avalon_streaming_source_endofpacket;                   // tx_eth_crc_inserter:data_src_eop -> tx_st_pipeline_stage_rs:in_endofpacket
	wire         tx_eth_crc_inserter_avalon_streaming_source_valid;                         // tx_eth_crc_inserter:data_src_valid -> tx_st_pipeline_stage_rs:in_valid
	wire         tx_eth_crc_inserter_avalon_streaming_source_startofpacket;                 // tx_eth_crc_inserter:data_src_sop -> tx_st_pipeline_stage_rs:in_startofpacket
	wire   [2:0] tx_eth_crc_inserter_avalon_streaming_source_error;                         // tx_eth_crc_inserter:data_src_error -> tx_st_pipeline_stage_rs:in_error
	wire   [2:0] tx_eth_crc_inserter_avalon_streaming_source_empty;                         // tx_eth_crc_inserter:data_src_empty -> tx_st_pipeline_stage_rs:in_empty
	wire  [63:0] tx_eth_crc_inserter_avalon_streaming_source_data;                          // tx_eth_crc_inserter:data_src_data -> tx_st_pipeline_stage_rs:in_data
	wire         tx_eth_crc_inserter_avalon_streaming_source_ready;                         // tx_st_pipeline_stage_rs:in_ready -> tx_eth_crc_inserter:data_src_ready
	wire         tx_st_pipeline_stage_rs_source0_endofpacket;                               // tx_st_pipeline_stage_rs:out_endofpacket -> tx_st_splitter_1:in0_endofpacket
	wire         tx_st_pipeline_stage_rs_source0_valid;                                     // tx_st_pipeline_stage_rs:out_valid -> tx_st_splitter_1:in0_valid
	wire         tx_st_pipeline_stage_rs_source0_startofpacket;                             // tx_st_pipeline_stage_rs:out_startofpacket -> tx_st_splitter_1:in0_startofpacket
	wire   [2:0] tx_st_pipeline_stage_rs_source0_error;                                     // tx_st_pipeline_stage_rs:out_error -> tx_st_splitter_1:in0_error
	wire  [63:0] tx_st_pipeline_stage_rs_source0_data;                                      // tx_st_pipeline_stage_rs:out_data -> tx_st_splitter_1:in0_data
	wire   [2:0] tx_st_pipeline_stage_rs_source0_empty;                                     // tx_st_pipeline_stage_rs:out_empty -> tx_st_splitter_1:in0_empty
	wire         tx_st_pipeline_stage_rs_source0_ready;                                     // tx_st_splitter_1:in0_ready -> tx_st_pipeline_stage_rs:out_ready
	wire         tx_st_splitter_1_out0_endofpacket;                                         // tx_st_splitter_1:out0_endofpacket -> tx_st_timing_adapter_frame_decoder:in_endofpacket
	wire         tx_st_splitter_1_out0_valid;                                               // tx_st_splitter_1:out0_valid -> tx_st_timing_adapter_frame_decoder:in_valid
	wire         tx_st_splitter_1_out0_startofpacket;                                       // tx_st_splitter_1:out0_startofpacket -> tx_st_timing_adapter_frame_decoder:in_startofpacket
	wire   [2:0] tx_st_splitter_1_out0_error;                                               // tx_st_splitter_1:out0_error -> tx_st_timing_adapter_frame_decoder:in_error
	wire  [63:0] tx_st_splitter_1_out0_data;                                                // tx_st_splitter_1:out0_data -> tx_st_timing_adapter_frame_decoder:in_data
	wire   [2:0] tx_st_splitter_1_out0_empty;                                               // tx_st_splitter_1:out0_empty -> tx_st_timing_adapter_frame_decoder:in_empty
	wire         tx_st_splitter_1_out0_ready;                                               // tx_st_timing_adapter_frame_decoder:in_ready -> tx_st_splitter_1:out0_ready
	wire         tx_st_splitter_1_out1_endofpacket;                                         // tx_st_splitter_1:out1_endofpacket -> tx_eth_packet_formatter:data_sink_eop
	wire         tx_st_splitter_1_out1_valid;                                               // tx_st_splitter_1:out1_valid -> tx_eth_packet_formatter:data_sink_valid
	wire         tx_st_splitter_1_out1_startofpacket;                                       // tx_st_splitter_1:out1_startofpacket -> tx_eth_packet_formatter:data_sink_sop
	wire   [2:0] tx_st_splitter_1_out1_error;                                               // tx_st_splitter_1:out1_error -> tx_eth_packet_formatter:data_sink_error
	wire  [63:0] tx_st_splitter_1_out1_data;                                                // tx_st_splitter_1:out1_data -> tx_eth_packet_formatter:data_sink_data
	wire   [2:0] tx_st_splitter_1_out1_empty;                                               // tx_st_splitter_1:out1_empty -> tx_eth_packet_formatter:data_sink_empty
	wire         tx_st_splitter_1_out1_ready;                                               // tx_eth_packet_formatter:data_sink_ready -> tx_st_splitter_1:out1_ready
	wire         tx_st_timing_adapter_frame_decoder_out_endofpacket;                        // tx_st_timing_adapter_frame_decoder:out_endofpacket -> tx_eth_frame_decoder:data_sink_eop
	wire         tx_st_timing_adapter_frame_decoder_out_valid;                              // tx_st_timing_adapter_frame_decoder:out_valid -> tx_eth_frame_decoder:data_sink_valid
	wire         tx_st_timing_adapter_frame_decoder_out_startofpacket;                      // tx_st_timing_adapter_frame_decoder:out_startofpacket -> tx_eth_frame_decoder:data_sink_sop
	wire   [2:0] tx_st_timing_adapter_frame_decoder_out_error;                              // tx_st_timing_adapter_frame_decoder:out_error -> tx_eth_frame_decoder:data_sink_error
	wire   [2:0] tx_st_timing_adapter_frame_decoder_out_empty;                              // tx_st_timing_adapter_frame_decoder:out_empty -> tx_eth_frame_decoder:data_sink_empty
	wire  [63:0] tx_st_timing_adapter_frame_decoder_out_data;                               // tx_st_timing_adapter_frame_decoder:out_data -> tx_eth_frame_decoder:data_sink_data
	wire         tx_eth_frame_decoder_avalon_st_rxstatus_src_valid;                         // tx_eth_frame_decoder:rxstatus_src_valid -> tx_st_error_adapter_stat:in_valid
	wire   [5:0] tx_eth_frame_decoder_avalon_st_rxstatus_src_error;                         // tx_eth_frame_decoder:rxstatus_src_error -> tx_st_error_adapter_stat:in_error
	wire  [39:0] tx_eth_frame_decoder_avalon_st_rxstatus_src_data;                          // tx_eth_frame_decoder:rxstatus_src_data -> tx_st_error_adapter_stat:in_data
	wire         tx_st_error_adapter_stat_out_valid;                                        // tx_st_error_adapter_stat:out_valid -> tx_st_timing_adapter_splitter_status_in:in_valid
	wire   [6:0] tx_st_error_adapter_stat_out_error;                                        // tx_st_error_adapter_stat:out_error -> tx_st_timing_adapter_splitter_status_in:in_error
	wire  [39:0] tx_st_error_adapter_stat_out_data;                                         // tx_st_error_adapter_stat:out_data -> tx_st_timing_adapter_splitter_status_in:in_data
	wire         tx_st_timing_adapter_splitter_status_in_out_valid;                         // tx_st_timing_adapter_splitter_status_in:out_valid -> tx_st_status_splitter:in0_valid
	wire   [6:0] tx_st_timing_adapter_splitter_status_in_out_error;                         // tx_st_timing_adapter_splitter_status_in:out_error -> tx_st_status_splitter:in0_error
	wire  [39:0] tx_st_timing_adapter_splitter_status_in_out_data;                          // tx_st_timing_adapter_splitter_status_in:out_data -> tx_st_status_splitter:in0_data
	wire         tx_st_timing_adapter_splitter_status_in_out_ready;                         // tx_st_status_splitter:in0_ready -> tx_st_timing_adapter_splitter_status_in:out_ready
	wire         tx_st_status_splitter_out0_valid;                                          // tx_st_status_splitter:out0_valid -> tx_st_timing_adapter_splitter_status_statistics:in_valid
	wire   [6:0] tx_st_status_splitter_out0_error;                                          // tx_st_status_splitter:out0_error -> tx_st_timing_adapter_splitter_status_statistics:in_error
	wire  [39:0] tx_st_status_splitter_out0_data;                                           // tx_st_status_splitter:out0_data -> tx_st_timing_adapter_splitter_status_statistics:in_data
	wire         tx_st_status_splitter_out0_ready;                                          // tx_st_timing_adapter_splitter_status_statistics:in_ready -> tx_st_status_splitter:out0_ready
	wire         tx_st_timing_adapter_splitter_status_statistics_out_valid;                 // tx_st_timing_adapter_splitter_status_statistics:out_valid -> tx_st_status_output_delay_to_statistic:in0_valid
	wire   [6:0] tx_st_timing_adapter_splitter_status_statistics_out_error;                 // tx_st_timing_adapter_splitter_status_statistics:out_error -> tx_st_status_output_delay_to_statistic:in0_error
	wire  [39:0] tx_st_timing_adapter_splitter_status_statistics_out_data;                  // tx_st_timing_adapter_splitter_status_statistics:out_data -> tx_st_status_output_delay_to_statistic:in0_data
	wire         tx_st_status_output_delay_to_statistic_out_valid;                          // tx_st_status_output_delay_to_statistic:out0_valid -> tx_eth_statistics_collector:stat_sink_valid
	wire   [6:0] tx_st_status_output_delay_to_statistic_out_error;                          // tx_st_status_output_delay_to_statistic:out0_error -> tx_eth_statistics_collector:stat_sink_error
	wire  [39:0] tx_st_status_output_delay_to_statistic_out_data;                           // tx_st_status_output_delay_to_statistic:out0_data -> tx_eth_statistics_collector:stat_sink_data
	wire         tx_st_status_splitter_out1_valid;                                          // tx_st_status_splitter:out1_valid -> tx_st_timing_adapter_splitter_status_output:in_valid
	wire   [6:0] tx_st_status_splitter_out1_error;                                          // tx_st_status_splitter:out1_error -> tx_st_timing_adapter_splitter_status_output:in_error
	wire  [39:0] tx_st_status_splitter_out1_data;                                           // tx_st_status_splitter:out1_data -> tx_st_timing_adapter_splitter_status_output:in_data
	wire         tx_st_status_splitter_out1_ready;                                          // tx_st_timing_adapter_splitter_status_output:in_ready -> tx_st_status_splitter:out1_ready
	wire         tx_eth_packet_formatter_data_src_endofpacket;                              // tx_eth_packet_formatter:data_src_eop -> tx_eth_xgmii_termination:data_sink_eop
	wire         tx_eth_packet_formatter_data_src_valid;                                    // tx_eth_packet_formatter:data_src_valid -> tx_eth_xgmii_termination:data_sink_valid
	wire         tx_eth_packet_formatter_data_src_startofpacket;                            // tx_eth_packet_formatter:data_src_sop -> tx_eth_xgmii_termination:data_sink_sop
	wire   [2:0] tx_eth_packet_formatter_data_src_empty;                                    // tx_eth_packet_formatter:data_src_empty -> tx_eth_xgmii_termination:data_sink_empty
	wire  [71:0] tx_eth_packet_formatter_data_src_data;                                     // tx_eth_packet_formatter:data_src_data -> tx_eth_xgmii_termination:data_sink_data
	wire         tx_eth_packet_formatter_data_src_ready;                                    // tx_eth_xgmii_termination:data_sink_ready -> tx_eth_packet_formatter:data_src_ready
	wire  [71:0] tx_eth_xgmii_termination_avalon_streaming_source_data;                     // tx_eth_xgmii_termination:xgmii_src_data -> tx_st_timing_adapter_splitter_in:in_data
	wire         tx_st_timing_adapter_splitter_in_out_valid;                                // tx_st_timing_adapter_splitter_in:out_valid -> tx_st_splitter_xgmii:in0_valid
	wire  [71:0] tx_st_timing_adapter_splitter_in_out_data;                                 // tx_st_timing_adapter_splitter_in:out_data -> tx_st_splitter_xgmii:in0_data
	wire         tx_st_timing_adapter_splitter_in_out_ready;                                // tx_st_splitter_xgmii:in0_ready -> tx_st_timing_adapter_splitter_in:out_ready
	wire         tx_st_splitter_xgmii_out0_valid;                                           // tx_st_splitter_xgmii:out0_valid -> tx_st_timing_adapter_splitter_out_0:in_valid
	wire  [71:0] tx_st_splitter_xgmii_out0_data;                                            // tx_st_splitter_xgmii:out0_data -> tx_st_timing_adapter_splitter_out_0:in_data
	wire         tx_st_splitter_xgmii_out0_ready;                                           // tx_st_timing_adapter_splitter_out_0:in_ready -> tx_st_splitter_xgmii:out0_ready
	wire  [71:0] tx_st_timing_adapter_splitter_out_0_out_data;                              // tx_st_timing_adapter_splitter_out_0:out_data -> tx_eth_link_fault_generation:mii_sink_data
	wire         rx_st_timing_adapter_interface_conversion_out_valid;                       // rx_st_timing_adapter_interface_conversion:out_valid -> rx_st_splitter_xgmii:in0_valid
	wire  [71:0] rx_st_timing_adapter_interface_conversion_out_data;                        // rx_st_timing_adapter_interface_conversion:out_data -> rx_st_splitter_xgmii:in0_data
	wire         rx_st_timing_adapter_interface_conversion_out_ready;                       // rx_st_splitter_xgmii:in0_ready -> rx_st_timing_adapter_interface_conversion:out_ready
	wire         rx_st_splitter_xgmii_out0_valid;                                           // rx_st_splitter_xgmii:out0_valid -> rx_st_timing_adapter_lane_decoder:in_valid
	wire  [71:0] rx_st_splitter_xgmii_out0_data;                                            // rx_st_splitter_xgmii:out0_data -> rx_st_timing_adapter_lane_decoder:in_data
	wire         rx_st_splitter_xgmii_out0_ready;                                           // rx_st_timing_adapter_lane_decoder:in_ready -> rx_st_splitter_xgmii:out0_ready
	wire  [71:0] rx_st_timing_adapter_lane_decoder_out_data;                                // rx_st_timing_adapter_lane_decoder:out_data -> rx_eth_lane_decoder:xgmii_sink_data
	wire         rx_st_splitter_xgmii_out1_valid;                                           // rx_st_splitter_xgmii:out1_valid -> rx_st_timing_adapter_link_fault_detection:in_valid
	wire  [71:0] rx_st_splitter_xgmii_out1_data;                                            // rx_st_splitter_xgmii:out1_data -> rx_st_timing_adapter_link_fault_detection:in_data
	wire         rx_st_splitter_xgmii_out1_ready;                                           // rx_st_timing_adapter_link_fault_detection:in_ready -> rx_st_splitter_xgmii:out1_ready
	wire  [71:0] rx_st_timing_adapter_link_fault_detection_out_data;                        // rx_st_timing_adapter_link_fault_detection:out_data -> rx_eth_link_fault_detection:mii_sink_data
	wire         rx_eth_pkt_backpressure_control_avalon_st_source_data_endofpacket;         // rx_eth_pkt_backpressure_control:data_src_eop -> rx_st_timing_adapter_frame_status_in:in_endofpacket
	wire         rx_eth_pkt_backpressure_control_avalon_st_source_data_valid;               // rx_eth_pkt_backpressure_control:data_src_valid -> rx_st_timing_adapter_frame_status_in:in_valid
	wire         rx_eth_pkt_backpressure_control_avalon_st_source_data_startofpacket;       // rx_eth_pkt_backpressure_control:data_src_sop -> rx_st_timing_adapter_frame_status_in:in_startofpacket
	wire   [0:0] rx_eth_pkt_backpressure_control_avalon_st_source_data_error;               // rx_eth_pkt_backpressure_control:data_src_error -> rx_st_timing_adapter_frame_status_in:in_error
	wire   [2:0] rx_eth_pkt_backpressure_control_avalon_st_source_data_empty;               // rx_eth_pkt_backpressure_control:data_src_empty -> rx_st_timing_adapter_frame_status_in:in_empty
	wire  [63:0] rx_eth_pkt_backpressure_control_avalon_st_source_data_data;                // rx_eth_pkt_backpressure_control:data_src_data -> rx_st_timing_adapter_frame_status_in:in_data
	wire         rx_st_timing_adapter_frame_status_in_out_endofpacket;                      // rx_st_timing_adapter_frame_status_in:out_endofpacket -> rx_st_frame_status_splitter:in0_endofpacket
	wire         rx_st_timing_adapter_frame_status_in_out_valid;                            // rx_st_timing_adapter_frame_status_in:out_valid -> rx_st_frame_status_splitter:in0_valid
	wire         rx_st_timing_adapter_frame_status_in_out_startofpacket;                    // rx_st_timing_adapter_frame_status_in:out_startofpacket -> rx_st_frame_status_splitter:in0_startofpacket
	wire         rx_st_timing_adapter_frame_status_in_out_error;                            // rx_st_timing_adapter_frame_status_in:out_error -> rx_st_frame_status_splitter:in0_error
	wire   [2:0] rx_st_timing_adapter_frame_status_in_out_empty;                            // rx_st_timing_adapter_frame_status_in:out_empty -> rx_st_frame_status_splitter:in0_empty
	wire  [63:0] rx_st_timing_adapter_frame_status_in_out_data;                             // rx_st_timing_adapter_frame_status_in:out_data -> rx_st_frame_status_splitter:in0_data
	wire         rx_st_timing_adapter_frame_status_in_out_ready;                            // rx_st_frame_status_splitter:in0_ready -> rx_st_timing_adapter_frame_status_in:out_ready
	wire         rx_st_frame_status_splitter_out0_endofpacket;                              // rx_st_frame_status_splitter:out0_endofpacket -> rx_timing_adapter_frame_status_out_frame_decoder:in_endofpacket
	wire         rx_st_frame_status_splitter_out0_valid;                                    // rx_st_frame_status_splitter:out0_valid -> rx_timing_adapter_frame_status_out_frame_decoder:in_valid
	wire         rx_st_frame_status_splitter_out0_startofpacket;                            // rx_st_frame_status_splitter:out0_startofpacket -> rx_timing_adapter_frame_status_out_frame_decoder:in_startofpacket
	wire         rx_st_frame_status_splitter_out0_error;                                    // rx_st_frame_status_splitter:out0_error -> rx_timing_adapter_frame_status_out_frame_decoder:in_error
	wire  [63:0] rx_st_frame_status_splitter_out0_data;                                     // rx_st_frame_status_splitter:out0_data -> rx_timing_adapter_frame_status_out_frame_decoder:in_data
	wire   [2:0] rx_st_frame_status_splitter_out0_empty;                                    // rx_st_frame_status_splitter:out0_empty -> rx_timing_adapter_frame_status_out_frame_decoder:in_empty
	wire         rx_st_frame_status_splitter_out0_ready;                                    // rx_timing_adapter_frame_status_out_frame_decoder:in_ready -> rx_st_frame_status_splitter:out0_ready
	wire         rx_timing_adapter_frame_status_out_frame_decoder_out_endofpacket;          // rx_timing_adapter_frame_status_out_frame_decoder:out_endofpacket -> rx_eth_frame_decoder:data_sink_eop
	wire         rx_timing_adapter_frame_status_out_frame_decoder_out_valid;                // rx_timing_adapter_frame_status_out_frame_decoder:out_valid -> rx_eth_frame_decoder:data_sink_valid
	wire         rx_timing_adapter_frame_status_out_frame_decoder_out_startofpacket;        // rx_timing_adapter_frame_status_out_frame_decoder:out_startofpacket -> rx_eth_frame_decoder:data_sink_sop
	wire         rx_timing_adapter_frame_status_out_frame_decoder_out_error;                // rx_timing_adapter_frame_status_out_frame_decoder:out_error -> rx_eth_frame_decoder:data_sink_error
	wire   [2:0] rx_timing_adapter_frame_status_out_frame_decoder_out_empty;                // rx_timing_adapter_frame_status_out_frame_decoder:out_empty -> rx_eth_frame_decoder:data_sink_empty
	wire  [63:0] rx_timing_adapter_frame_status_out_frame_decoder_out_data;                 // rx_timing_adapter_frame_status_out_frame_decoder:out_data -> rx_eth_frame_decoder:data_sink_data
	wire         rx_eth_frame_decoder_avalon_st_data_src_endofpacket;                       // rx_eth_frame_decoder:data_src_eop -> rx_eth_frame_status_merger:frame_decoder_data_sink_eop
	wire         rx_eth_frame_decoder_avalon_st_data_src_valid;                             // rx_eth_frame_decoder:data_src_valid -> rx_eth_frame_status_merger:frame_decoder_data_sink_valid
	wire         rx_eth_frame_decoder_avalon_st_data_src_startofpacket;                     // rx_eth_frame_decoder:data_src_sop -> rx_eth_frame_status_merger:frame_decoder_data_sink_sop
	wire   [3:0] rx_eth_frame_decoder_avalon_st_data_src_error;                             // rx_eth_frame_decoder:data_src_error -> rx_eth_frame_status_merger:frame_decoder_data_sink_error
	wire   [2:0] rx_eth_frame_decoder_avalon_st_data_src_empty;                             // rx_eth_frame_decoder:data_src_empty -> rx_eth_frame_status_merger:frame_decoder_data_sink_empty
	wire  [63:0] rx_eth_frame_decoder_avalon_st_data_src_data;                              // rx_eth_frame_decoder:data_src_data -> rx_eth_frame_status_merger:frame_decoder_data_sink_data
	wire         rx_eth_frame_decoder_avalon_st_pauselen_src_valid;                         // rx_eth_frame_decoder:pauselen_src_valid -> rx_eth_frame_status_merger:pauselen_sink_valid
	wire  [15:0] rx_eth_frame_decoder_avalon_st_pauselen_src_data;                          // rx_eth_frame_decoder:pauselen_src_data -> rx_eth_frame_status_merger:pauselen_sink_data
	wire         rx_st_frame_status_splitter_out1_endofpacket;                              // rx_st_frame_status_splitter:out1_endofpacket -> rx_timing_adapter_frame_status_out_crc_checker:in_endofpacket
	wire         rx_st_frame_status_splitter_out1_valid;                                    // rx_st_frame_status_splitter:out1_valid -> rx_timing_adapter_frame_status_out_crc_checker:in_valid
	wire         rx_st_frame_status_splitter_out1_startofpacket;                            // rx_st_frame_status_splitter:out1_startofpacket -> rx_timing_adapter_frame_status_out_crc_checker:in_startofpacket
	wire         rx_st_frame_status_splitter_out1_error;                                    // rx_st_frame_status_splitter:out1_error -> rx_timing_adapter_frame_status_out_crc_checker:in_error
	wire  [63:0] rx_st_frame_status_splitter_out1_data;                                     // rx_st_frame_status_splitter:out1_data -> rx_timing_adapter_frame_status_out_crc_checker:in_data
	wire   [2:0] rx_st_frame_status_splitter_out1_empty;                                    // rx_st_frame_status_splitter:out1_empty -> rx_timing_adapter_frame_status_out_crc_checker:in_empty
	wire         rx_st_frame_status_splitter_out1_ready;                                    // rx_timing_adapter_frame_status_out_crc_checker:in_ready -> rx_st_frame_status_splitter:out1_ready
	wire         rx_timing_adapter_frame_status_out_crc_checker_out_endofpacket;            // rx_timing_adapter_frame_status_out_crc_checker:out_endofpacket -> rx_eth_crc_checker:data_sink_eop
	wire         rx_timing_adapter_frame_status_out_crc_checker_out_valid;                  // rx_timing_adapter_frame_status_out_crc_checker:out_valid -> rx_eth_crc_checker:data_sink_valid
	wire         rx_timing_adapter_frame_status_out_crc_checker_out_startofpacket;          // rx_timing_adapter_frame_status_out_crc_checker:out_startofpacket -> rx_eth_crc_checker:data_sink_sop
	wire         rx_timing_adapter_frame_status_out_crc_checker_out_error;                  // rx_timing_adapter_frame_status_out_crc_checker:out_error -> rx_eth_crc_checker:data_sink_error
	wire   [2:0] rx_timing_adapter_frame_status_out_crc_checker_out_empty;                  // rx_timing_adapter_frame_status_out_crc_checker:out_empty -> rx_eth_crc_checker:data_sink_empty
	wire  [63:0] rx_timing_adapter_frame_status_out_crc_checker_out_data;                   // rx_timing_adapter_frame_status_out_crc_checker:out_data -> rx_eth_crc_checker:data_sink_data
	wire         rx_eth_frame_status_merger_data_src_endofpacket;                           // rx_eth_frame_status_merger:data_src_eop -> rx_eth_crc_pad_rem:data_sink_eop
	wire         rx_eth_frame_status_merger_data_src_valid;                                 // rx_eth_frame_status_merger:data_src_valid -> rx_eth_crc_pad_rem:data_sink_valid
	wire         rx_eth_frame_status_merger_data_src_startofpacket;                         // rx_eth_frame_status_merger:data_src_sop -> rx_eth_crc_pad_rem:data_sink_sop
	wire   [4:0] rx_eth_frame_status_merger_data_src_error;                                 // rx_eth_frame_status_merger:data_src_error -> rx_eth_crc_pad_rem:data_sink_error
	wire   [2:0] rx_eth_frame_status_merger_data_src_empty;                                 // rx_eth_frame_status_merger:data_src_empty -> rx_eth_crc_pad_rem:data_sink_empty
	wire  [63:0] rx_eth_frame_status_merger_data_src_data;                                  // rx_eth_frame_status_merger:data_src_data -> rx_eth_crc_pad_rem:data_sink_data
	wire         rx_eth_frame_decoder_avalon_st_pktinfo_src_valid;                          // rx_eth_frame_decoder:pktinfo_src_valid -> rx_eth_crc_pad_rem:status_sink_valid
	wire  [22:0] rx_eth_frame_decoder_avalon_st_pktinfo_src_data;                           // rx_eth_frame_decoder:pktinfo_src_data -> rx_eth_crc_pad_rem:status_sink_data
	wire         rx_eth_crc_pad_rem_avalon_streaming_source_data_endofpacket;               // rx_eth_crc_pad_rem:data_source_eop -> rx_eth_packet_overflow_control:data_sink_eop
	wire         rx_eth_crc_pad_rem_avalon_streaming_source_data_valid;                     // rx_eth_crc_pad_rem:data_source_valid -> rx_eth_packet_overflow_control:data_sink_valid
	wire         rx_eth_crc_pad_rem_avalon_streaming_source_data_startofpacket;             // rx_eth_crc_pad_rem:data_source_sop -> rx_eth_packet_overflow_control:data_sink_sop
	wire   [4:0] rx_eth_crc_pad_rem_avalon_streaming_source_data_error;                     // rx_eth_crc_pad_rem:data_source_error -> rx_eth_packet_overflow_control:data_sink_error
	wire   [2:0] rx_eth_crc_pad_rem_avalon_streaming_source_data_empty;                     // rx_eth_crc_pad_rem:data_source_empty -> rx_eth_packet_overflow_control:data_sink_empty
	wire  [63:0] rx_eth_crc_pad_rem_avalon_streaming_source_data_data;                      // rx_eth_crc_pad_rem:data_source_data -> rx_eth_packet_overflow_control:data_sink_data
	wire         rx_eth_crc_checker_avalon_streaming_source_endofpacket;                    // rx_eth_crc_checker:data_src_eop -> rx_eth_frame_status_merger:crc_checker_data_sink_eop
	wire         rx_eth_crc_checker_avalon_streaming_source_valid;                          // rx_eth_crc_checker:data_src_valid -> rx_eth_frame_status_merger:crc_checker_data_sink_valid
	wire         rx_eth_crc_checker_avalon_streaming_source_startofpacket;                  // rx_eth_crc_checker:data_src_sop -> rx_eth_frame_status_merger:crc_checker_data_sink_sop
	wire   [1:0] rx_eth_crc_checker_avalon_streaming_source_error;                          // rx_eth_crc_checker:data_src_error -> rx_eth_frame_status_merger:crc_checker_data_sink_error
	wire   [2:0] rx_eth_crc_checker_avalon_streaming_source_empty;                          // rx_eth_crc_checker:data_src_empty -> rx_eth_frame_status_merger:crc_checker_data_sink_empty
	wire  [63:0] rx_eth_crc_checker_avalon_streaming_source_data;                           // rx_eth_crc_checker:data_src_data -> rx_eth_frame_status_merger:crc_checker_data_sink_data
	wire         rx_eth_frame_decoder_avalon_st_rxstatus_src_valid;                         // rx_eth_frame_decoder:rxstatus_src_valid -> rx_eth_frame_status_merger:rxstatus_sink_valid
	wire   [3:0] rx_eth_frame_decoder_avalon_st_rxstatus_src_error;                         // rx_eth_frame_decoder:rxstatus_src_error -> rx_eth_frame_status_merger:rxstatus_sink_error
	wire  [39:0] rx_eth_frame_decoder_avalon_st_rxstatus_src_data;                          // rx_eth_frame_decoder:rxstatus_src_data -> rx_eth_frame_status_merger:rxstatus_sink_data
	wire         rx_eth_frame_status_merger_rxstatus_src_valid;                             // rx_eth_frame_status_merger:rxstatus_src_valid -> rx_st_error_adapter_stat:in_valid
	wire   [4:0] rx_eth_frame_status_merger_rxstatus_src_error;                             // rx_eth_frame_status_merger:rxstatus_src_error -> rx_st_error_adapter_stat:in_error
	wire  [39:0] rx_eth_frame_status_merger_rxstatus_src_data;                              // rx_eth_frame_status_merger:rxstatus_src_data -> rx_st_error_adapter_stat:in_data
	wire         rx_st_error_adapter_stat_out_valid;                                        // rx_st_error_adapter_stat:out_valid -> rx_st_timing_adapter_splitter_status_in:in_valid
	wire   [6:0] rx_st_error_adapter_stat_out_error;                                        // rx_st_error_adapter_stat:out_error -> rx_st_timing_adapter_splitter_status_in:in_error
	wire  [39:0] rx_st_error_adapter_stat_out_data;                                         // rx_st_error_adapter_stat:out_data -> rx_st_timing_adapter_splitter_status_in:in_data
	wire         rx_st_timing_adapter_splitter_status_in_out_valid;                         // rx_st_timing_adapter_splitter_status_in:out_valid -> rx_st_status_splitter:in0_valid
	wire   [6:0] rx_st_timing_adapter_splitter_status_in_out_error;                         // rx_st_timing_adapter_splitter_status_in:out_error -> rx_st_status_splitter:in0_error
	wire  [39:0] rx_st_timing_adapter_splitter_status_in_out_data;                          // rx_st_timing_adapter_splitter_status_in:out_data -> rx_st_status_splitter:in0_data
	wire         rx_st_timing_adapter_splitter_status_in_out_ready;                         // rx_st_status_splitter:in0_ready -> rx_st_timing_adapter_splitter_status_in:out_ready
	wire         rx_st_status_splitter_out0_valid;                                          // rx_st_status_splitter:out0_valid -> rx_st_timing_adapter_splitter_status_statistics:in_valid
	wire   [6:0] rx_st_status_splitter_out0_error;                                          // rx_st_status_splitter:out0_error -> rx_st_timing_adapter_splitter_status_statistics:in_error
	wire  [39:0] rx_st_status_splitter_out0_data;                                           // rx_st_status_splitter:out0_data -> rx_st_timing_adapter_splitter_status_statistics:in_data
	wire         rx_st_status_splitter_out0_ready;                                          // rx_st_timing_adapter_splitter_status_statistics:in_ready -> rx_st_status_splitter:out0_ready
	wire         rx_st_timing_adapter_splitter_status_statistics_out_valid;                 // rx_st_timing_adapter_splitter_status_statistics:out_valid -> rx_st_status_statistics_delay:in0_valid
	wire   [6:0] rx_st_timing_adapter_splitter_status_statistics_out_error;                 // rx_st_timing_adapter_splitter_status_statistics:out_error -> rx_st_status_statistics_delay:in0_error
	wire  [39:0] rx_st_timing_adapter_splitter_status_statistics_out_data;                  // rx_st_timing_adapter_splitter_status_statistics:out_data -> rx_st_status_statistics_delay:in0_data
	wire         rx_st_status_statistics_delay_out_valid;                                   // rx_st_status_statistics_delay:out0_valid -> rx_eth_statistics_collector:stat_sink_valid
	wire   [6:0] rx_st_status_statistics_delay_out_error;                                   // rx_st_status_statistics_delay:out0_error -> rx_eth_statistics_collector:stat_sink_error
	wire  [39:0] rx_st_status_statistics_delay_out_data;                                    // rx_st_status_statistics_delay:out0_data -> rx_eth_statistics_collector:stat_sink_data
	wire         rx_st_status_splitter_out1_valid;                                          // rx_st_status_splitter:out1_valid -> rx_st_timing_adapter_splitter_status_output:in_valid
	wire   [6:0] rx_st_status_splitter_out1_error;                                          // rx_st_status_splitter:out1_error -> rx_st_timing_adapter_splitter_status_output:in_error
	wire  [39:0] rx_st_status_splitter_out1_data;                                           // rx_st_status_splitter:out1_data -> rx_st_timing_adapter_splitter_status_output:in_data
	wire         rx_st_status_splitter_out1_ready;                                          // rx_st_timing_adapter_splitter_status_output:in_ready -> rx_st_status_splitter:out1_ready
	wire         rx_st_timing_adapter_splitter_status_output_out_valid;                     // rx_st_timing_adapter_splitter_status_output:out_valid -> rx_st_status_output_delay:in0_valid
	wire   [6:0] rx_st_timing_adapter_splitter_status_output_out_error;                     // rx_st_timing_adapter_splitter_status_output:out_error -> rx_st_status_output_delay:in0_error
	wire  [39:0] rx_st_timing_adapter_splitter_status_output_out_data;                      // rx_st_timing_adapter_splitter_status_output:out_data -> rx_st_status_output_delay:in0_data
	wire         rx_eth_lane_decoder_avalon_streaming_source_endofpacket;                   // rx_eth_lane_decoder:rxdata_src_eop -> rx_eth_pkt_backpressure_control:data_sink_eop
	wire         rx_eth_lane_decoder_avalon_streaming_source_valid;                         // rx_eth_lane_decoder:rxdata_src_valid -> rx_eth_pkt_backpressure_control:data_sink_valid
	wire         rx_eth_lane_decoder_avalon_streaming_source_startofpacket;                 // rx_eth_lane_decoder:rxdata_src_sop -> rx_eth_pkt_backpressure_control:data_sink_sop
	wire   [0:0] rx_eth_lane_decoder_avalon_streaming_source_error;                         // rx_eth_lane_decoder:rxdata_src_error -> rx_eth_pkt_backpressure_control:data_sink_error
	wire   [2:0] rx_eth_lane_decoder_avalon_streaming_source_empty;                         // rx_eth_lane_decoder:rxdata_src_empty -> rx_eth_pkt_backpressure_control:data_sink_empty
	wire  [63:0] rx_eth_lane_decoder_avalon_streaming_source_data;                          // rx_eth_lane_decoder:rxdata_src_data -> rx_eth_pkt_backpressure_control:data_sink_data
	wire   [1:0] rx_eth_link_fault_detection_link_fault_src_data;                           // rx_eth_link_fault_detection:link_fault_src_data -> txrx_timing_adapter_link_fault_status_rx:in_data
	wire         txrx_timing_adapter_link_fault_status_rx_out_valid;                        // txrx_timing_adapter_link_fault_status_rx:out_valid -> txrx_st_splitter_link_fault_status:in0_valid
	wire   [1:0] txrx_timing_adapter_link_fault_status_rx_out_data;                         // txrx_timing_adapter_link_fault_status_rx:out_data -> txrx_st_splitter_link_fault_status:in0_data
	wire         txrx_timing_adapter_link_fault_status_rx_out_ready;                        // txrx_st_splitter_link_fault_status:in0_ready -> txrx_timing_adapter_link_fault_status_rx:out_ready
	wire         txrx_st_splitter_link_fault_status_out0_valid;                             // txrx_st_splitter_link_fault_status:out0_valid -> txrx_timing_adapter_link_fault_status_export:in_valid
	wire   [1:0] txrx_st_splitter_link_fault_status_out0_data;                              // txrx_st_splitter_link_fault_status:out0_data -> txrx_timing_adapter_link_fault_status_export:in_data
	wire         txrx_st_splitter_link_fault_status_out0_ready;                             // txrx_timing_adapter_link_fault_status_export:in_ready -> txrx_st_splitter_link_fault_status:out0_ready
	wire         txrx_st_splitter_link_fault_status_out1_valid;                             // txrx_st_splitter_link_fault_status:out1_valid -> rxtx_dc_fifo_link_fault_status:in_valid
	wire   [1:0] txrx_st_splitter_link_fault_status_out1_data;                              // txrx_st_splitter_link_fault_status:out1_data -> rxtx_dc_fifo_link_fault_status:in_data
	wire         txrx_st_splitter_link_fault_status_out1_ready;                             // rxtx_dc_fifo_link_fault_status:in_ready -> txrx_st_splitter_link_fault_status:out1_ready
	wire         rxtx_dc_fifo_link_fault_status_out_valid;                                  // rxtx_dc_fifo_link_fault_status:out_valid -> rxtx_timing_adapter_link_fault_status_tx:in_valid
	wire   [1:0] rxtx_dc_fifo_link_fault_status_out_data;                                   // rxtx_dc_fifo_link_fault_status:out_data -> rxtx_timing_adapter_link_fault_status_tx:in_data
	wire         rxtx_dc_fifo_link_fault_status_out_ready;                                  // rxtx_timing_adapter_link_fault_status_tx:in_ready -> rxtx_dc_fifo_link_fault_status:out_ready
	wire   [1:0] rxtx_timing_adapter_link_fault_status_tx_out_data;                         // rxtx_timing_adapter_link_fault_status_tx:out_data -> tx_eth_link_fault_generation:link_fault_sink_data
	wire         rx_eth_frame_status_merger_pauselen_src_valid;                             // rx_eth_frame_status_merger:pauselen_src_valid -> rxtx_timing_adapter_pauselen_rx:in_valid
	wire  [15:0] rx_eth_frame_status_merger_pauselen_src_data;                              // rx_eth_frame_status_merger:pauselen_src_data -> rxtx_timing_adapter_pauselen_rx:in_data
	wire         rxtx_timing_adapter_pauselen_rx_out_valid;                                 // rxtx_timing_adapter_pauselen_rx:out_valid -> rxtx_dc_fifo_pauselen:in_valid
	wire  [15:0] rxtx_timing_adapter_pauselen_rx_out_data;                                  // rxtx_timing_adapter_pauselen_rx:out_data -> rxtx_dc_fifo_pauselen:in_data
	wire         rxtx_timing_adapter_pauselen_rx_out_ready;                                 // rxtx_dc_fifo_pauselen:in_ready -> rxtx_timing_adapter_pauselen_rx:out_ready
	wire         rxtx_dc_fifo_pauselen_out_valid;                                           // rxtx_dc_fifo_pauselen:out_valid -> rxtx_timing_adapter_pauselen_tx:in_valid
	wire  [15:0] rxtx_dc_fifo_pauselen_out_data;                                            // rxtx_dc_fifo_pauselen:out_data -> rxtx_timing_adapter_pauselen_tx:in_data
	wire         rxtx_dc_fifo_pauselen_out_ready;                                           // rxtx_timing_adapter_pauselen_tx:in_ready -> rxtx_dc_fifo_pauselen:out_ready
	wire         rxtx_timing_adapter_pauselen_tx_out_valid;                                 // rxtx_timing_adapter_pauselen_tx:out_valid -> tx_eth_pause_beat_conversion:pause_quanta_sink_valid
	wire  [15:0] rxtx_timing_adapter_pauselen_tx_out_data;                                  // rxtx_timing_adapter_pauselen_tx:out_data -> tx_eth_pause_beat_conversion:pause_quanta_sink_data
	wire         merlin_master_translator_avalon_universal_master_0_waitrequest;            // mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_waitrequest -> merlin_master_translator:uav_waitrequest
	wire   [2:0] merlin_master_translator_avalon_universal_master_0_burstcount;             // merlin_master_translator:uav_burstcount -> mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_burstcount
	wire  [31:0] merlin_master_translator_avalon_universal_master_0_writedata;              // merlin_master_translator:uav_writedata -> mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_writedata
	wire  [14:0] merlin_master_translator_avalon_universal_master_0_address;                // merlin_master_translator:uav_address -> mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_address
	wire         merlin_master_translator_avalon_universal_master_0_lock;                   // merlin_master_translator:uav_lock -> mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_lock
	wire         merlin_master_translator_avalon_universal_master_0_write;                  // merlin_master_translator:uav_write -> mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_write
	wire         merlin_master_translator_avalon_universal_master_0_read;                   // merlin_master_translator:uav_read -> mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_read
	wire  [31:0] merlin_master_translator_avalon_universal_master_0_readdata;               // mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_readdata -> merlin_master_translator:uav_readdata
	wire         merlin_master_translator_avalon_universal_master_0_debugaccess;            // merlin_master_translator:uav_debugaccess -> mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_debugaccess
	wire   [3:0] merlin_master_translator_avalon_universal_master_0_byteenable;             // merlin_master_translator:uav_byteenable -> mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_byteenable
	wire         merlin_master_translator_avalon_universal_master_0_readdatavalid;          // mm_interconnect_0:merlin_master_translator_avalon_universal_master_0_readdatavalid -> merlin_master_translator:uav_readdatavalid
	wire         mm_interconnect_0_tx_bridge_s0_waitrequest;                                // tx_bridge:s0_waitrequest -> mm_interconnect_0:tx_bridge_s0_waitrequest
	wire   [0:0] mm_interconnect_0_tx_bridge_s0_burstcount;                                 // mm_interconnect_0:tx_bridge_s0_burstcount -> tx_bridge:s0_burstcount
	wire  [31:0] mm_interconnect_0_tx_bridge_s0_writedata;                                  // mm_interconnect_0:tx_bridge_s0_writedata -> tx_bridge:s0_writedata
	wire  [13:0] mm_interconnect_0_tx_bridge_s0_address;                                    // mm_interconnect_0:tx_bridge_s0_address -> tx_bridge:s0_address
	wire         mm_interconnect_0_tx_bridge_s0_write;                                      // mm_interconnect_0:tx_bridge_s0_write -> tx_bridge:s0_write
	wire         mm_interconnect_0_tx_bridge_s0_read;                                       // mm_interconnect_0:tx_bridge_s0_read -> tx_bridge:s0_read
	wire  [31:0] mm_interconnect_0_tx_bridge_s0_readdata;                                   // tx_bridge:s0_readdata -> mm_interconnect_0:tx_bridge_s0_readdata
	wire         mm_interconnect_0_tx_bridge_s0_debugaccess;                                // mm_interconnect_0:tx_bridge_s0_debugaccess -> tx_bridge:s0_debugaccess
	wire         mm_interconnect_0_tx_bridge_s0_readdatavalid;                              // tx_bridge:s0_readdatavalid -> mm_interconnect_0:tx_bridge_s0_readdatavalid
	wire   [3:0] mm_interconnect_0_tx_bridge_s0_byteenable;                                 // mm_interconnect_0:tx_bridge_s0_byteenable -> tx_bridge:s0_byteenable
	wire         mm_interconnect_0_rx_bridge_s0_waitrequest;                                // rx_bridge:s0_waitrequest -> mm_interconnect_0:rx_bridge_s0_waitrequest
	wire   [0:0] mm_interconnect_0_rx_bridge_s0_burstcount;                                 // mm_interconnect_0:rx_bridge_s0_burstcount -> rx_bridge:s0_burstcount
	wire  [31:0] mm_interconnect_0_rx_bridge_s0_writedata;                                  // mm_interconnect_0:rx_bridge_s0_writedata -> rx_bridge:s0_writedata
	wire  [13:0] mm_interconnect_0_rx_bridge_s0_address;                                    // mm_interconnect_0:rx_bridge_s0_address -> rx_bridge:s0_address
	wire         mm_interconnect_0_rx_bridge_s0_write;                                      // mm_interconnect_0:rx_bridge_s0_write -> rx_bridge:s0_write
	wire         mm_interconnect_0_rx_bridge_s0_read;                                       // mm_interconnect_0:rx_bridge_s0_read -> rx_bridge:s0_read
	wire  [31:0] mm_interconnect_0_rx_bridge_s0_readdata;                                   // rx_bridge:s0_readdata -> mm_interconnect_0:rx_bridge_s0_readdata
	wire         mm_interconnect_0_rx_bridge_s0_debugaccess;                                // mm_interconnect_0:rx_bridge_s0_debugaccess -> rx_bridge:s0_debugaccess
	wire         mm_interconnect_0_rx_bridge_s0_readdatavalid;                              // rx_bridge:s0_readdatavalid -> mm_interconnect_0:rx_bridge_s0_readdatavalid
	wire   [3:0] mm_interconnect_0_rx_bridge_s0_byteenable;                                 // mm_interconnect_0:rx_bridge_s0_byteenable -> rx_bridge:s0_byteenable
	wire   [0:0] tx_bridge_m0_burstcount;                                                   // tx_bridge:m0_burstcount -> mm_interconnect_1:tx_bridge_m0_burstcount
	wire         tx_bridge_m0_waitrequest;                                                  // mm_interconnect_1:tx_bridge_m0_waitrequest -> tx_bridge:m0_waitrequest
	wire  [13:0] tx_bridge_m0_address;                                                      // tx_bridge:m0_address -> mm_interconnect_1:tx_bridge_m0_address
	wire  [31:0] tx_bridge_m0_writedata;                                                    // tx_bridge:m0_writedata -> mm_interconnect_1:tx_bridge_m0_writedata
	wire         tx_bridge_m0_write;                                                        // tx_bridge:m0_write -> mm_interconnect_1:tx_bridge_m0_write
	wire         tx_bridge_m0_read;                                                         // tx_bridge:m0_read -> mm_interconnect_1:tx_bridge_m0_read
	wire  [31:0] tx_bridge_m0_readdata;                                                     // mm_interconnect_1:tx_bridge_m0_readdata -> tx_bridge:m0_readdata
	wire         tx_bridge_m0_debugaccess;                                                  // tx_bridge:m0_debugaccess -> mm_interconnect_1:tx_bridge_m0_debugaccess
	wire   [3:0] tx_bridge_m0_byteenable;                                                   // tx_bridge:m0_byteenable -> mm_interconnect_1:tx_bridge_m0_byteenable
	wire         tx_bridge_m0_readdatavalid;                                                // mm_interconnect_1:tx_bridge_m0_readdatavalid -> tx_bridge:m0_readdatavalid
	wire  [31:0] mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_writedata;           // mm_interconnect_1:tx_eth_pkt_backpressure_control_csr_writedata -> tx_eth_pkt_backpressure_control:csr_writedata
	wire   [0:0] mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_address;             // mm_interconnect_1:tx_eth_pkt_backpressure_control_csr_address -> tx_eth_pkt_backpressure_control:csr_address
	wire         mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_write;               // mm_interconnect_1:tx_eth_pkt_backpressure_control_csr_write -> tx_eth_pkt_backpressure_control:csr_write
	wire         mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_read;                // mm_interconnect_1:tx_eth_pkt_backpressure_control_csr_read -> tx_eth_pkt_backpressure_control:csr_read
	wire  [31:0] mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_readdata;            // tx_eth_pkt_backpressure_control:csr_readdata -> mm_interconnect_1:tx_eth_pkt_backpressure_control_csr_readdata
	wire  [31:0] mm_interconnect_1_tx_eth_pad_inserter_csr_writedata;                       // mm_interconnect_1:tx_eth_pad_inserter_csr_writedata -> tx_eth_pad_inserter:csr_writedata
	wire   [0:0] mm_interconnect_1_tx_eth_pad_inserter_csr_address;                         // mm_interconnect_1:tx_eth_pad_inserter_csr_address -> tx_eth_pad_inserter:csr_address
	wire         mm_interconnect_1_tx_eth_pad_inserter_csr_write;                           // mm_interconnect_1:tx_eth_pad_inserter_csr_write -> tx_eth_pad_inserter:csr_write
	wire         mm_interconnect_1_tx_eth_pad_inserter_csr_read;                            // mm_interconnect_1:tx_eth_pad_inserter_csr_read -> tx_eth_pad_inserter:csr_read
	wire  [31:0] mm_interconnect_1_tx_eth_pad_inserter_csr_readdata;                        // tx_eth_pad_inserter:csr_readdata -> mm_interconnect_1:tx_eth_pad_inserter_csr_readdata
	wire  [31:0] mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_writedata;                     // mm_interconnect_1:tx_eth_pause_ctrl_gen_csr_writedata -> tx_eth_pause_ctrl_gen:csr_writedata
	wire   [1:0] mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_address;                       // mm_interconnect_1:tx_eth_pause_ctrl_gen_csr_address -> tx_eth_pause_ctrl_gen:csr_address
	wire         mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_write;                         // mm_interconnect_1:tx_eth_pause_ctrl_gen_csr_write -> tx_eth_pause_ctrl_gen:csr_write
	wire         mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_read;                          // mm_interconnect_1:tx_eth_pause_ctrl_gen_csr_read -> tx_eth_pause_ctrl_gen:csr_read
	wire  [31:0] mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_readdata;                      // tx_eth_pause_ctrl_gen:csr_readdata -> mm_interconnect_1:tx_eth_pause_ctrl_gen_csr_readdata
	wire  [31:0] mm_interconnect_1_tx_eth_address_inserter_csr_writedata;                   // mm_interconnect_1:tx_eth_address_inserter_csr_writedata -> tx_eth_address_inserter:csr_writedata
	wire   [1:0] mm_interconnect_1_tx_eth_address_inserter_csr_address;                     // mm_interconnect_1:tx_eth_address_inserter_csr_address -> tx_eth_address_inserter:csr_address
	wire         mm_interconnect_1_tx_eth_address_inserter_csr_write;                       // mm_interconnect_1:tx_eth_address_inserter_csr_write -> tx_eth_address_inserter:csr_write
	wire         mm_interconnect_1_tx_eth_address_inserter_csr_read;                        // mm_interconnect_1:tx_eth_address_inserter_csr_read -> tx_eth_address_inserter:csr_read
	wire  [31:0] mm_interconnect_1_tx_eth_address_inserter_csr_readdata;                    // tx_eth_address_inserter:csr_readdata -> mm_interconnect_1:tx_eth_address_inserter_csr_readdata
	wire   [0:0] mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_address;  // mm_interconnect_1:tx_eth_packet_underflow_control_avalon_slave_0_address -> tx_eth_packet_underflow_control:csr_address
	wire         mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_read;     // mm_interconnect_1:tx_eth_packet_underflow_control_avalon_slave_0_read -> tx_eth_packet_underflow_control:csr_read
	wire  [31:0] mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_readdata; // tx_eth_packet_underflow_control:csr_readdata -> mm_interconnect_1:tx_eth_packet_underflow_control_avalon_slave_0_readdata
	wire  [31:0] mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_writedata;            // mm_interconnect_1:tx_eth_frame_decoder_avalom_mm_csr_writedata -> tx_eth_frame_decoder:csr_writedata
	wire   [4:0] mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_address;              // mm_interconnect_1:tx_eth_frame_decoder_avalom_mm_csr_address -> tx_eth_frame_decoder:csr_address
	wire         mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_write;                // mm_interconnect_1:tx_eth_frame_decoder_avalom_mm_csr_write -> tx_eth_frame_decoder:csr_write
	wire         mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_read;                 // mm_interconnect_1:tx_eth_frame_decoder_avalom_mm_csr_read -> tx_eth_frame_decoder:csr_read
	wire  [31:0] mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_readdata;             // tx_eth_frame_decoder:csr_readdata -> mm_interconnect_1:tx_eth_frame_decoder_avalom_mm_csr_readdata
	wire  [31:0] mm_interconnect_1_tx_eth_statistics_collector_csr_writedata;               // mm_interconnect_1:tx_eth_statistics_collector_csr_writedata -> tx_eth_statistics_collector:csr_writedata
	wire   [5:0] mm_interconnect_1_tx_eth_statistics_collector_csr_address;                 // mm_interconnect_1:tx_eth_statistics_collector_csr_address -> tx_eth_statistics_collector:csr_address
	wire         mm_interconnect_1_tx_eth_statistics_collector_csr_write;                   // mm_interconnect_1:tx_eth_statistics_collector_csr_write -> tx_eth_statistics_collector:csr_write
	wire         mm_interconnect_1_tx_eth_statistics_collector_csr_read;                    // mm_interconnect_1:tx_eth_statistics_collector_csr_read -> tx_eth_statistics_collector:csr_read
	wire  [31:0] mm_interconnect_1_tx_eth_statistics_collector_csr_readdata;                // tx_eth_statistics_collector:csr_readdata -> mm_interconnect_1:tx_eth_statistics_collector_csr_readdata
	wire  [31:0] mm_interconnect_1_tx_eth_crc_inserter_csr_writedata;                       // mm_interconnect_1:tx_eth_crc_inserter_csr_writedata -> tx_eth_crc_inserter:csr_writedata
	wire   [0:0] mm_interconnect_1_tx_eth_crc_inserter_csr_address;                         // mm_interconnect_1:tx_eth_crc_inserter_csr_address -> tx_eth_crc_inserter:csr_address
	wire         mm_interconnect_1_tx_eth_crc_inserter_csr_write;                           // mm_interconnect_1:tx_eth_crc_inserter_csr_write -> tx_eth_crc_inserter:csr_write
	wire         mm_interconnect_1_tx_eth_crc_inserter_csr_read;                            // mm_interconnect_1:tx_eth_crc_inserter_csr_read -> tx_eth_crc_inserter:csr_read
	wire  [31:0] mm_interconnect_1_tx_eth_crc_inserter_csr_readdata;                        // tx_eth_crc_inserter:csr_readdata -> mm_interconnect_1:tx_eth_crc_inserter_csr_readdata
	wire   [0:0] rx_bridge_m0_burstcount;                                                   // rx_bridge:m0_burstcount -> mm_interconnect_2:rx_bridge_m0_burstcount
	wire         rx_bridge_m0_waitrequest;                                                  // mm_interconnect_2:rx_bridge_m0_waitrequest -> rx_bridge:m0_waitrequest
	wire  [13:0] rx_bridge_m0_address;                                                      // rx_bridge:m0_address -> mm_interconnect_2:rx_bridge_m0_address
	wire  [31:0] rx_bridge_m0_writedata;                                                    // rx_bridge:m0_writedata -> mm_interconnect_2:rx_bridge_m0_writedata
	wire         rx_bridge_m0_write;                                                        // rx_bridge:m0_write -> mm_interconnect_2:rx_bridge_m0_write
	wire         rx_bridge_m0_read;                                                         // rx_bridge:m0_read -> mm_interconnect_2:rx_bridge_m0_read
	wire  [31:0] rx_bridge_m0_readdata;                                                     // mm_interconnect_2:rx_bridge_m0_readdata -> rx_bridge:m0_readdata
	wire         rx_bridge_m0_debugaccess;                                                  // rx_bridge:m0_debugaccess -> mm_interconnect_2:rx_bridge_m0_debugaccess
	wire   [3:0] rx_bridge_m0_byteenable;                                                   // rx_bridge:m0_byteenable -> mm_interconnect_2:rx_bridge_m0_byteenable
	wire         rx_bridge_m0_readdatavalid;                                                // mm_interconnect_2:rx_bridge_m0_readdatavalid -> rx_bridge:m0_readdatavalid
	wire  [31:0] mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_writedata;           // mm_interconnect_2:rx_eth_pkt_backpressure_control_csr_writedata -> rx_eth_pkt_backpressure_control:csr_writedata
	wire   [0:0] mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_address;             // mm_interconnect_2:rx_eth_pkt_backpressure_control_csr_address -> rx_eth_pkt_backpressure_control:csr_address
	wire         mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_write;               // mm_interconnect_2:rx_eth_pkt_backpressure_control_csr_write -> rx_eth_pkt_backpressure_control:csr_write
	wire         mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_read;                // mm_interconnect_2:rx_eth_pkt_backpressure_control_csr_read -> rx_eth_pkt_backpressure_control:csr_read
	wire  [31:0] mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_readdata;            // rx_eth_pkt_backpressure_control:csr_readdata -> mm_interconnect_2:rx_eth_pkt_backpressure_control_csr_readdata
	wire  [31:0] mm_interconnect_2_rx_eth_crc_pad_rem_csr_writedata;                        // mm_interconnect_2:rx_eth_crc_pad_rem_csr_writedata -> rx_eth_crc_pad_rem:csr_writedata
	wire   [1:0] mm_interconnect_2_rx_eth_crc_pad_rem_csr_address;                          // mm_interconnect_2:rx_eth_crc_pad_rem_csr_address -> rx_eth_crc_pad_rem:csr_address
	wire         mm_interconnect_2_rx_eth_crc_pad_rem_csr_write;                            // mm_interconnect_2:rx_eth_crc_pad_rem_csr_write -> rx_eth_crc_pad_rem:csr_write
	wire         mm_interconnect_2_rx_eth_crc_pad_rem_csr_read;                             // mm_interconnect_2:rx_eth_crc_pad_rem_csr_read -> rx_eth_crc_pad_rem:csr_read
	wire  [31:0] mm_interconnect_2_rx_eth_crc_pad_rem_csr_readdata;                         // rx_eth_crc_pad_rem:csr_readdata -> mm_interconnect_2:rx_eth_crc_pad_rem_csr_readdata
	wire  [31:0] mm_interconnect_2_rx_eth_crc_checker_csr_writedata;                        // mm_interconnect_2:rx_eth_crc_checker_csr_writedata -> rx_eth_crc_checker:csr_writedata
	wire   [0:0] mm_interconnect_2_rx_eth_crc_checker_csr_address;                          // mm_interconnect_2:rx_eth_crc_checker_csr_address -> rx_eth_crc_checker:csr_address
	wire         mm_interconnect_2_rx_eth_crc_checker_csr_write;                            // mm_interconnect_2:rx_eth_crc_checker_csr_write -> rx_eth_crc_checker:csr_write
	wire         mm_interconnect_2_rx_eth_crc_checker_csr_read;                             // mm_interconnect_2:rx_eth_crc_checker_csr_read -> rx_eth_crc_checker:csr_read
	wire  [31:0] mm_interconnect_2_rx_eth_crc_checker_csr_readdata;                         // rx_eth_crc_checker:csr_readdata -> mm_interconnect_2:rx_eth_crc_checker_csr_readdata
	wire  [31:0] mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_writedata;            // mm_interconnect_2:rx_eth_frame_decoder_avalom_mm_csr_writedata -> rx_eth_frame_decoder:csr_writedata
	wire   [4:0] mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_address;              // mm_interconnect_2:rx_eth_frame_decoder_avalom_mm_csr_address -> rx_eth_frame_decoder:csr_address
	wire         mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_write;                // mm_interconnect_2:rx_eth_frame_decoder_avalom_mm_csr_write -> rx_eth_frame_decoder:csr_write
	wire         mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_read;                 // mm_interconnect_2:rx_eth_frame_decoder_avalom_mm_csr_read -> rx_eth_frame_decoder:csr_read
	wire  [31:0] mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_readdata;             // rx_eth_frame_decoder:csr_readdata -> mm_interconnect_2:rx_eth_frame_decoder_avalom_mm_csr_readdata
	wire   [1:0] mm_interconnect_2_rx_eth_packet_overflow_control_csr_address;              // mm_interconnect_2:rx_eth_packet_overflow_control_csr_address -> rx_eth_packet_overflow_control:csr_address
	wire         mm_interconnect_2_rx_eth_packet_overflow_control_csr_read;                 // mm_interconnect_2:rx_eth_packet_overflow_control_csr_read -> rx_eth_packet_overflow_control:csr_read
	wire  [31:0] mm_interconnect_2_rx_eth_packet_overflow_control_csr_readdata;             // rx_eth_packet_overflow_control:csr_readdata -> mm_interconnect_2:rx_eth_packet_overflow_control_csr_readdata
	wire  [31:0] mm_interconnect_2_rx_eth_statistics_collector_csr_writedata;               // mm_interconnect_2:rx_eth_statistics_collector_csr_writedata -> rx_eth_statistics_collector:csr_writedata
	wire   [5:0] mm_interconnect_2_rx_eth_statistics_collector_csr_address;                 // mm_interconnect_2:rx_eth_statistics_collector_csr_address -> rx_eth_statistics_collector:csr_address
	wire         mm_interconnect_2_rx_eth_statistics_collector_csr_write;                   // mm_interconnect_2:rx_eth_statistics_collector_csr_write -> rx_eth_statistics_collector:csr_write
	wire         mm_interconnect_2_rx_eth_statistics_collector_csr_read;                    // mm_interconnect_2:rx_eth_statistics_collector_csr_read -> rx_eth_statistics_collector:csr_read
	wire  [31:0] mm_interconnect_2_rx_eth_statistics_collector_csr_readdata;                // rx_eth_statistics_collector:csr_readdata -> mm_interconnect_2:rx_eth_statistics_collector_csr_readdata
	wire  [31:0] mm_interconnect_2_rx_eth_lane_decoder_csr_writedata;                       // mm_interconnect_2:rx_eth_lane_decoder_csr_writedata -> rx_eth_lane_decoder:csr_writedata
	wire   [0:0] mm_interconnect_2_rx_eth_lane_decoder_csr_address;                         // mm_interconnect_2:rx_eth_lane_decoder_csr_address -> rx_eth_lane_decoder:csr_address
	wire         mm_interconnect_2_rx_eth_lane_decoder_csr_write;                           // mm_interconnect_2:rx_eth_lane_decoder_csr_write -> rx_eth_lane_decoder:csr_write
	wire         mm_interconnect_2_rx_eth_lane_decoder_csr_read;                            // mm_interconnect_2:rx_eth_lane_decoder_csr_read -> rx_eth_lane_decoder:csr_read
	wire  [31:0] mm_interconnect_2_rx_eth_lane_decoder_csr_readdata;                        // rx_eth_lane_decoder:csr_readdata -> mm_interconnect_2:rx_eth_lane_decoder_csr_readdata
	wire         rst_controller_reset_out_reset;                                            // rst_controller:reset_out -> [merlin_master_translator:reset, mm_interconnect_0:merlin_master_translator_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;                                        // rst_controller_001:reset_out -> [rxtx_dc_fifo_link_fault_status:out_reset_n, rxtx_dc_fifo_pauselen:out_reset_n, rxtx_timing_adapter_link_fault_status_tx:reset_n, rxtx_timing_adapter_pauselen_tx:reset_n, tx_eth_address_inserter:reset, tx_eth_crc_inserter:reset, tx_eth_frame_decoder:reset, tx_eth_link_fault_generation:reset, tx_eth_packet_formatter:reset, tx_eth_packet_underflow_control:reset, tx_eth_pad_inserter:reset, tx_eth_pause_beat_conversion:reset, tx_eth_pause_ctrl_gen:reset, tx_eth_pkt_backpressure_control:reset, tx_eth_xgmii_termination:reset, tx_register_map:tx_10g_reset, tx_st_error_adapter_stat:reset_n, tx_st_mux_flow_control_user_frame:reset_n, tx_st_pause_ctrl_error_adapter:reset_n, tx_st_pipeline_stage_rs:reset, tx_st_splitter_1:reset, tx_st_splitter_xgmii:reset, tx_st_status_output_delay_to_statistic:reset_n, tx_st_status_splitter:reset, tx_st_timing_adapter_frame_decoder:reset_n, tx_st_timing_adapter_splitter_in:reset_n, tx_st_timing_adapter_splitter_out_0:reset_n, tx_st_timing_adapter_splitter_status_in:reset_n, tx_st_timing_adapter_splitter_status_output:reset_n, tx_st_timing_adapter_splitter_status_statistics:reset_n]
	wire         rst_controller_002_reset_out_reset;                                        // rst_controller_002:reset_out -> [rx_eth_crc_checker:reset, rx_eth_crc_pad_rem:reset, rx_eth_frame_decoder:reset, rx_eth_frame_status_merger:reset, rx_eth_lane_decoder:reset, rx_eth_link_fault_detection:reset, rx_eth_packet_overflow_control:reset, rx_eth_pkt_backpressure_control:reset, rx_register_map:rx_10g_reset, rx_st_error_adapter_stat:reset_n, rx_st_frame_status_splitter:reset, rx_st_splitter_xgmii:reset, rx_st_status_output_delay:reset_n, rx_st_status_splitter:reset, rx_st_status_statistics_delay:reset_n, rx_st_timing_adapter_frame_status_in:reset_n, rx_st_timing_adapter_interface_conversion:reset_n, rx_st_timing_adapter_lane_decoder:reset_n, rx_st_timing_adapter_link_fault_detection:reset_n, rx_st_timing_adapter_splitter_status_in:reset_n, rx_st_timing_adapter_splitter_status_output:reset_n, rx_st_timing_adapter_splitter_status_statistics:reset_n, rx_timing_adapter_frame_status_out_crc_checker:reset_n, rx_timing_adapter_frame_status_out_frame_decoder:reset_n, rxtx_dc_fifo_link_fault_status:in_reset_n, rxtx_dc_fifo_pauselen:in_reset_n, rxtx_timing_adapter_pauselen_rx:reset_n, txrx_st_splitter_link_fault_status:reset, txrx_timing_adapter_link_fault_status_export:reset_n, txrx_timing_adapter_link_fault_status_rx:reset_n]
	wire         rst_controller_003_reset_out_reset;                                        // rst_controller_003:reset_out -> [mm_interconnect_0:tx_bridge_reset_reset_bridge_in_reset_reset, mm_interconnect_1:tx_bridge_reset_reset_bridge_in_reset_reset, tx_bridge:reset, tx_eth_address_inserter:csr_reset, tx_eth_crc_inserter:csr_reset, tx_eth_frame_decoder:csr_reset, tx_eth_packet_underflow_control:csr_reset, tx_eth_pad_inserter:csr_reset, tx_eth_pause_ctrl_gen:csr_reset, tx_eth_pkt_backpressure_control:csr_reset, tx_eth_statistics_collector:csr_reset, tx_register_map:csr_reset]
	wire         rst_controller_004_reset_out_reset;                                        // rst_controller_004:reset_out -> [mm_interconnect_0:rx_bridge_reset_reset_bridge_in_reset_reset, mm_interconnect_2:rx_bridge_reset_reset_bridge_in_reset_reset, rx_bridge:reset, rx_eth_crc_checker:csr_reset, rx_eth_crc_pad_rem:csr_reset, rx_eth_frame_decoder:csr_reset, rx_eth_lane_decoder:csr_reset, rx_eth_packet_overflow_control:csr_reset, rx_eth_pkt_backpressure_control:csr_reset, rx_eth_statistics_collector:csr_reset, rx_register_map:csr_reset]

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (13),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (15),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) merlin_master_translator (
		.clk                      (csr_clk_clk),                                                      //                       clk.clk
		.reset                    (rst_controller_reset_out_reset),                                   //                     reset.reset
		.uav_address              (merlin_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (merlin_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (merlin_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (merlin_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (merlin_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (merlin_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (merlin_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (merlin_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (merlin_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (merlin_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (merlin_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (csr_address),                                                      //      avalon_anti_master_0.address
		.av_waitrequest           (csr_waitrequest),                                                  //                          .waitrequest
		.av_read                  (csr_read),                                                         //                          .read
		.av_readdata              (csr_readdata),                                                     //                          .readdata
		.av_write                 (csr_write),                                                        //                          .write
		.av_writedata             (csr_writedata),                                                    //                          .writedata
		.av_burstcount            (1'b1),                                                             //               (terminated)
		.av_byteenable            (4'b1111),                                                          //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                             //               (terminated)
		.av_begintransfer         (1'b0),                                                             //               (terminated)
		.av_chipselect            (1'b0),                                                             //               (terminated)
		.av_readdatavalid         (),                                                                 //               (terminated)
		.av_lock                  (1'b0),                                                             //               (terminated)
		.av_debugaccess           (1'b0),                                                             //               (terminated)
		.uav_clken                (),                                                                 //               (terminated)
		.av_clken                 (1'b1),                                                             //               (terminated)
		.uav_response             (2'b00),                                                            //               (terminated)
		.av_response              (),                                                                 //               (terminated)
		.uav_writeresponserequest (),                                                                 //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                             //               (terminated)
		.av_writeresponserequest  (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid    ()                                                                  //               (terminated)
	);

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (14),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (0),
		.PIPELINE_RESPONSE (0)
	) tx_bridge (
		.clk              (tx_clk_clk),                                   //   clk.clk
		.reset            (rst_controller_003_reset_out_reset),           // reset.reset
		.s0_waitrequest   (mm_interconnect_0_tx_bridge_s0_waitrequest),   //    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_tx_bridge_s0_readdata),      //      .readdata
		.s0_readdatavalid (mm_interconnect_0_tx_bridge_s0_readdatavalid), //      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_tx_bridge_s0_burstcount),    //      .burstcount
		.s0_writedata     (mm_interconnect_0_tx_bridge_s0_writedata),     //      .writedata
		.s0_address       (mm_interconnect_0_tx_bridge_s0_address),       //      .address
		.s0_write         (mm_interconnect_0_tx_bridge_s0_write),         //      .write
		.s0_read          (mm_interconnect_0_tx_bridge_s0_read),          //      .read
		.s0_byteenable    (mm_interconnect_0_tx_bridge_s0_byteenable),    //      .byteenable
		.s0_debugaccess   (mm_interconnect_0_tx_bridge_s0_debugaccess),   //      .debugaccess
		.m0_waitrequest   (tx_bridge_m0_waitrequest),                     //    m0.waitrequest
		.m0_readdata      (tx_bridge_m0_readdata),                        //      .readdata
		.m0_readdatavalid (tx_bridge_m0_readdatavalid),                   //      .readdatavalid
		.m0_burstcount    (tx_bridge_m0_burstcount),                      //      .burstcount
		.m0_writedata     (tx_bridge_m0_writedata),                       //      .writedata
		.m0_address       (tx_bridge_m0_address),                         //      .address
		.m0_write         (tx_bridge_m0_write),                           //      .write
		.m0_read          (tx_bridge_m0_read),                            //      .read
		.m0_byteenable    (tx_bridge_m0_byteenable),                      //      .byteenable
		.m0_debugaccess   (tx_bridge_m0_debugaccess)                      //      .debugaccess
	);

	altera_eth_10g_tx_register_map tx_register_map (
		.csr_clk               (tx_clk_clk),                           //      csr_clk.clk
		.csr_reset             (rst_controller_003_reset_out_reset),   //    csr_reset.reset
		.tx_10g_clk            (tx_clk_clk),                           //   tx_10g_clk.clk
		.tx_10g_reset          (rst_controller_001_reset_out_reset),   // tx_10g_reset.reset
		.tx_1g_clk             (1'b0),                                 //  (terminated)
		.tx_1g_reset           (1'b1),                                 //  (terminated)
		.csr_tsu_write         (1'b0),                                 //  (terminated)
		.csr_tsu_read          (1'b0),                                 //  (terminated)
		.csr_tsu_address       (4'b0000),                              //  (terminated)
		.csr_tsu_writedata     (32'b00000000000000000000000000000000), //  (terminated)
		.csr_tsu_readdata      (),                                     //  (terminated)
		.tsu_period_ns_fns_10g (),                                     //  (terminated)
		.tsu_adjust_ns_fns_10g (),                                     //  (terminated)
		.tsu_period_ns_fns_1g  (),                                     //  (terminated)
		.tsu_adjust_ns_fns_1g  ()                                      //  (terminated)
	);

	altera_eth_packet_underflow_control #(
		.BITSPERSYMBOL  (8),
		.SYMBOLSPERBEAT (8),
		.ERROR_WIDTH    (1)
	) tx_eth_packet_underflow_control (
		.clk             (tx_clk_clk),                                                                //             clock_reset.clk
		.reset           (rst_controller_001_reset_out_reset),                                        //       clock_reset_reset.reset
		.csr_reset       (rst_controller_003_reset_out_reset),                                        //               csr_reset.reset
		.csr_readdata    (mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_readdata), //          avalon_slave_0.readdata
		.csr_read        (mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_read),     //                        .read
		.csr_address     (mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_address),  //                        .address
		.data_sink_sop   (avalon_st_tx_startofpacket),                                                //   avalon_streaming_sink.startofpacket
		.data_sink_valid (avalon_st_tx_valid),                                                        //                        .valid
		.data_sink_data  (avalon_st_tx_data),                                                         //                        .data
		.data_sink_empty (avalon_st_tx_empty),                                                        //                        .empty
		.data_sink_ready (avalon_st_tx_ready),                                                        //                        .ready
		.data_sink_error (avalon_st_tx_error),                                                        //                        .error
		.data_sink_eop   (avalon_st_tx_endofpacket),                                                  //                        .endofpacket
		.data_src_sop    (tx_eth_packet_underflow_control_avalon_streaming_source_startofpacket),     // avalon_streaming_source.startofpacket
		.data_src_eop    (tx_eth_packet_underflow_control_avalon_streaming_source_endofpacket),       //                        .endofpacket
		.data_src_valid  (tx_eth_packet_underflow_control_avalon_streaming_source_valid),             //                        .valid
		.data_src_data   (tx_eth_packet_underflow_control_avalon_streaming_source_data),              //                        .data
		.data_src_empty  (tx_eth_packet_underflow_control_avalon_streaming_source_empty),             //                        .empty
		.data_src_ready  (tx_eth_packet_underflow_control_avalon_streaming_source_ready),             //                        .ready
		.data_src_error  (tx_eth_packet_underflow_control_avalon_streaming_source_error)              //                        .error
	);

	altera_eth_pad_inserter #(
		.SYMBOLSPERBEAT (8),
		.ERROR_WIDTH    (2)
	) tx_eth_pad_inserter (
		.clk             (tx_clk_clk),                                                            //           clock_reset.clk
		.reset           (rst_controller_001_reset_out_reset),                                    //     clock_reset_reset.reset
		.csr_reset       (rst_controller_003_reset_out_reset),                                    //             csr_reset.reset
		.csr_write       (mm_interconnect_1_tx_eth_pad_inserter_csr_write),                       //                   csr.write
		.csr_read        (mm_interconnect_1_tx_eth_pad_inserter_csr_read),                        //                      .read
		.csr_address     (mm_interconnect_1_tx_eth_pad_inserter_csr_address),                     //                      .address
		.csr_writedata   (mm_interconnect_1_tx_eth_pad_inserter_csr_writedata),                   //                      .writedata
		.csr_readdata    (mm_interconnect_1_tx_eth_pad_inserter_csr_readdata),                    //                      .readdata
		.data_src_sop    (tx_eth_pad_inserter_avalon_st_source_data_startofpacket),               // avalon_st_source_data.startofpacket
		.data_src_eop    (tx_eth_pad_inserter_avalon_st_source_data_endofpacket),                 //                      .endofpacket
		.data_src_valid  (tx_eth_pad_inserter_avalon_st_source_data_valid),                       //                      .valid
		.data_src_ready  (tx_eth_pad_inserter_avalon_st_source_data_ready),                       //                      .ready
		.data_src_data   (tx_eth_pad_inserter_avalon_st_source_data_data),                        //                      .data
		.data_src_empty  (tx_eth_pad_inserter_avalon_st_source_data_empty),                       //                      .empty
		.data_src_error  (tx_eth_pad_inserter_avalon_st_source_data_error),                       //                      .error
		.data_sink_sop   (tx_eth_packet_underflow_control_avalon_streaming_source_startofpacket), //   avalon_st_sink_data.startofpacket
		.data_sink_eop   (tx_eth_packet_underflow_control_avalon_streaming_source_endofpacket),   //                      .endofpacket
		.data_sink_valid (tx_eth_packet_underflow_control_avalon_streaming_source_valid),         //                      .valid
		.data_sink_ready (tx_eth_packet_underflow_control_avalon_streaming_source_ready),         //                      .ready
		.data_sink_data  (tx_eth_packet_underflow_control_avalon_streaming_source_data),          //                      .data
		.data_sink_empty (tx_eth_packet_underflow_control_avalon_streaming_source_empty),         //                      .empty
		.data_sink_error (tx_eth_packet_underflow_control_avalon_streaming_source_error)          //                      .error
	);

	altera_eth_pkt_backpressure_control #(
		.BITSPERSYMBOL  (8),
		.SYMBOLSPERBEAT (8),
		.ERROR_WIDTH    (2),
		.USE_READY      (1)
	) tx_eth_pkt_backpressure_control (
		.clk                   (tx_clk_clk),                                                          //           clock_reset.clk
		.reset                 (rst_controller_001_reset_out_reset),                                  //     clock_reset_reset.reset
		.csr_reset             (rst_controller_003_reset_out_reset),                                  //             csr_reset.reset
		.csr_write             (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_write),         //                   csr.write
		.csr_read              (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_read),          //                      .read
		.csr_address           (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_address),       //                      .address
		.csr_writedata         (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_writedata),     //                      .writedata
		.csr_readdata          (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_readdata),      //                      .readdata
		.data_src_sop          (tx_eth_pkt_backpressure_control_avalon_st_source_data_startofpacket), // avalon_st_source_data.startofpacket
		.data_src_eop          (tx_eth_pkt_backpressure_control_avalon_st_source_data_endofpacket),   //                      .endofpacket
		.data_src_valid        (tx_eth_pkt_backpressure_control_avalon_st_source_data_valid),         //                      .valid
		.data_src_ready        (tx_eth_pkt_backpressure_control_avalon_st_source_data_ready),         //                      .ready
		.data_src_data         (tx_eth_pkt_backpressure_control_avalon_st_source_data_data),          //                      .data
		.data_src_empty        (tx_eth_pkt_backpressure_control_avalon_st_source_data_empty),         //                      .empty
		.data_src_error        (tx_eth_pkt_backpressure_control_avalon_st_source_data_error),         //                      .error
		.data_sink_sop         (tx_eth_pad_inserter_avalon_st_source_data_startofpacket),             //   avalon_st_sink_data.startofpacket
		.data_sink_eop         (tx_eth_pad_inserter_avalon_st_source_data_endofpacket),               //                      .endofpacket
		.data_sink_valid       (tx_eth_pad_inserter_avalon_st_source_data_valid),                     //                      .valid
		.data_sink_ready       (tx_eth_pad_inserter_avalon_st_source_data_ready),                     //                      .ready
		.data_sink_data        (tx_eth_pad_inserter_avalon_st_source_data_data),                      //                      .data
		.data_sink_empty       (tx_eth_pad_inserter_avalon_st_source_data_empty),                     //                      .empty
		.data_sink_error       (tx_eth_pad_inserter_avalon_st_source_data_error),                     //                      .error
		.pausebeats_sink_valid (tx_eth_pause_beat_conversion_pause_beat_src_valid),                   //       avalon_st_pause.valid
		.pausebeats_sink_data  (tx_eth_pause_beat_conversion_pause_beat_src_data)                     //                      .data
	);

	altera_eth_pause_beat_conversion tx_eth_pause_beat_conversion (
		.clk                     (tx_clk_clk),                                        //       clock_reset.clk
		.reset                   (rst_controller_001_reset_out_reset),                // clock_reset_reset.reset
		.pause_quanta_sink_valid (rxtx_timing_adapter_pauselen_tx_out_valid),         // pause_quanta_sink.valid
		.pause_quanta_sink_data  (rxtx_timing_adapter_pauselen_tx_out_data),          //                  .data
		.pause_beat_src_valid    (tx_eth_pause_beat_conversion_pause_beat_src_valid), //    pause_beat_src.valid
		.pause_beat_src_data     (tx_eth_pause_beat_conversion_pause_beat_src_data),  //                  .data
		.mode_1g_10gbar          (2'b00)                                              //       (terminated)
	);

	altera_eth_pause_ctrl_gen #(
		.BITSPERSYMBOL  (8),
		.SYMBOLSPERBEAT (8),
		.ERROR_WIDTH    (1)
	) tx_eth_pause_ctrl_gen (
		.clk                  (tx_clk_clk),                                            //       clock_reset.clk
		.reset                (rst_controller_001_reset_out_reset),                    // clock_reset_reset.reset
		.csr_reset            (rst_controller_003_reset_out_reset),                    //         csr_reset.reset
		.csr_address          (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_address),   //               csr.address
		.csr_read             (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_read),      //                  .read
		.csr_readdata         (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_readdata),  //                  .readdata
		.csr_write            (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_write),     //                  .write
		.csr_writedata        (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_writedata), //                  .writedata
		.pause_ctrl_sink_data (avalon_st_pause_data),                                  //     pause_control.data
		.pause_source_sop     (tx_eth_pause_ctrl_gen_pause_packet_startofpacket),      //      pause_packet.startofpacket
		.pause_source_eop     (tx_eth_pause_ctrl_gen_pause_packet_endofpacket),        //                  .endofpacket
		.pause_source_valid   (tx_eth_pause_ctrl_gen_pause_packet_valid),              //                  .valid
		.pause_source_data    (tx_eth_pause_ctrl_gen_pause_packet_data),               //                  .data
		.pause_source_empty   (tx_eth_pause_ctrl_gen_pause_packet_empty),              //                  .empty
		.pause_source_error   (tx_eth_pause_ctrl_gen_pause_packet_error),              //                  .error
		.pause_source_ready   (tx_eth_pause_ctrl_gen_pause_packet_ready)               //                  .ready
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_pause_ctrl_error_adapter tx_st_pause_ctrl_error_adapter (
		.clk               (tx_clk_clk),                                       //   clk.clk
		.reset_n           (~rst_controller_001_reset_out_reset),              // reset.reset_n
		.in_data           (tx_eth_pause_ctrl_gen_pause_packet_data),          //    in.data
		.in_valid          (tx_eth_pause_ctrl_gen_pause_packet_valid),         //      .valid
		.in_ready          (tx_eth_pause_ctrl_gen_pause_packet_ready),         //      .ready
		.in_startofpacket  (tx_eth_pause_ctrl_gen_pause_packet_startofpacket), //      .startofpacket
		.in_endofpacket    (tx_eth_pause_ctrl_gen_pause_packet_endofpacket),   //      .endofpacket
		.in_empty          (tx_eth_pause_ctrl_gen_pause_packet_empty),         //      .empty
		.in_error          (tx_eth_pause_ctrl_gen_pause_packet_error),         //      .error
		.out_data          (tx_st_pause_ctrl_error_adapter_out_data),          //   out.data
		.out_valid         (tx_st_pause_ctrl_error_adapter_out_valid),         //      .valid
		.out_ready         (tx_st_pause_ctrl_error_adapter_out_ready),         //      .ready
		.out_startofpacket (tx_st_pause_ctrl_error_adapter_out_startofpacket), //      .startofpacket
		.out_endofpacket   (tx_st_pause_ctrl_error_adapter_out_endofpacket),   //      .endofpacket
		.out_empty         (tx_st_pause_ctrl_error_adapter_out_empty),         //      .empty
		.out_error         (tx_st_pause_ctrl_error_adapter_out_error)          //      .error
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_mux_flow_control_user_frame tx_st_mux_flow_control_user_frame (
		.clk               (tx_clk_clk),                                                          //   clk.clk
		.reset_n           (~rst_controller_001_reset_out_reset),                                 // reset.reset_n
		.out_data          (tx_st_mux_flow_control_user_frame_out_data),                          //   out.data
		.out_valid         (tx_st_mux_flow_control_user_frame_out_valid),                         //      .valid
		.out_ready         (tx_st_mux_flow_control_user_frame_out_ready),                         //      .ready
		.out_startofpacket (tx_st_mux_flow_control_user_frame_out_startofpacket),                 //      .startofpacket
		.out_endofpacket   (tx_st_mux_flow_control_user_frame_out_endofpacket),                   //      .endofpacket
		.out_empty         (tx_st_mux_flow_control_user_frame_out_empty),                         //      .empty
		.out_error         (tx_st_mux_flow_control_user_frame_out_error),                         //      .error
		.out_channel       (tx_st_mux_flow_control_user_frame_out_channel),                       //      .channel
		.in0_data          (tx_eth_pkt_backpressure_control_avalon_st_source_data_data),          //   in0.data
		.in0_valid         (tx_eth_pkt_backpressure_control_avalon_st_source_data_valid),         //      .valid
		.in0_ready         (tx_eth_pkt_backpressure_control_avalon_st_source_data_ready),         //      .ready
		.in0_startofpacket (tx_eth_pkt_backpressure_control_avalon_st_source_data_startofpacket), //      .startofpacket
		.in0_endofpacket   (tx_eth_pkt_backpressure_control_avalon_st_source_data_endofpacket),   //      .endofpacket
		.in0_empty         (tx_eth_pkt_backpressure_control_avalon_st_source_data_empty),         //      .empty
		.in0_error         (tx_eth_pkt_backpressure_control_avalon_st_source_data_error),         //      .error
		.in1_data          (tx_st_pause_ctrl_error_adapter_out_data),                             //   in1.data
		.in1_valid         (tx_st_pause_ctrl_error_adapter_out_valid),                            //      .valid
		.in1_ready         (tx_st_pause_ctrl_error_adapter_out_ready),                            //      .ready
		.in1_startofpacket (tx_st_pause_ctrl_error_adapter_out_startofpacket),                    //      .startofpacket
		.in1_endofpacket   (tx_st_pause_ctrl_error_adapter_out_endofpacket),                      //      .endofpacket
		.in1_empty         (tx_st_pause_ctrl_error_adapter_out_empty),                            //      .empty
		.in1_error         (tx_st_pause_ctrl_error_adapter_out_error)                             //      .error
	);

	altera_eth_address_inserter #(
		.BITSPERSYMBOL  (8),
		.SYMBOLSPERBEAT (8),
		.ERROR_WIDTH    (2)
	) tx_eth_address_inserter (
		.clk               (tx_clk_clk),                                                    //             clock_reset.clk
		.reset             (rst_controller_001_reset_out_reset),                            //       clock_reset_reset.reset
		.csr_reset         (rst_controller_003_reset_out_reset),                            //               csr_reset.reset
		.csr_write         (mm_interconnect_1_tx_eth_address_inserter_csr_write),           //                     csr.write
		.csr_read          (mm_interconnect_1_tx_eth_address_inserter_csr_read),            //                        .read
		.csr_address       (mm_interconnect_1_tx_eth_address_inserter_csr_address),         //                        .address
		.csr_writedata     (mm_interconnect_1_tx_eth_address_inserter_csr_writedata),       //                        .writedata
		.csr_readdata      (mm_interconnect_1_tx_eth_address_inserter_csr_readdata),        //                        .readdata
		.data_sink_sop     (tx_st_mux_flow_control_user_frame_out_startofpacket),           //   avalon_streaming_sink.startofpacket
		.data_sink_eop     (tx_st_mux_flow_control_user_frame_out_endofpacket),             //                        .endofpacket
		.data_sink_valid   (tx_st_mux_flow_control_user_frame_out_valid),                   //                        .valid
		.data_sink_ready   (tx_st_mux_flow_control_user_frame_out_ready),                   //                        .ready
		.data_sink_data    (tx_st_mux_flow_control_user_frame_out_data),                    //                        .data
		.data_sink_empty   (tx_st_mux_flow_control_user_frame_out_empty),                   //                        .empty
		.data_sink_channel (tx_st_mux_flow_control_user_frame_out_channel),                 //                        .channel
		.data_sink_error   (tx_st_mux_flow_control_user_frame_out_error),                   //                        .error
		.data_src_sop      (tx_eth_address_inserter_avalon_streaming_source_startofpacket), // avalon_streaming_source.startofpacket
		.data_src_eop      (tx_eth_address_inserter_avalon_streaming_source_endofpacket),   //                        .endofpacket
		.data_src_valid    (tx_eth_address_inserter_avalon_streaming_source_valid),         //                        .valid
		.data_src_ready    (tx_eth_address_inserter_avalon_streaming_source_ready),         //                        .ready
		.data_src_data     (tx_eth_address_inserter_avalon_streaming_source_data),          //                        .data
		.data_src_empty    (tx_eth_address_inserter_avalon_streaming_source_empty),         //                        .empty
		.data_src_channel  (tx_eth_address_inserter_avalon_streaming_source_channel),       //                        .channel
		.data_src_error    (tx_eth_address_inserter_avalon_streaming_source_error)          //                        .error
	);

	altera_eth_crc #(
		.BITSPERSYMBOL             (8),
		.SYMBOLSPERBEAT            (8),
		.ERROR_WIDTH               (2),
		.MODE_CHECKER_0_INSERTER_1 (1),
		.USE_CHANNEL               (1)
	) tx_eth_crc_inserter (
		.clk               (tx_clk_clk),                                                    //             clock_reset.clk
		.reset             (rst_controller_001_reset_out_reset),                            //       clock_reset_reset.reset
		.csr_reset         (rst_controller_003_reset_out_reset),                            //               csr_reset.reset
		.csr_write         (mm_interconnect_1_tx_eth_crc_inserter_csr_write),               //                     csr.write
		.csr_read          (mm_interconnect_1_tx_eth_crc_inserter_csr_read),                //                        .read
		.csr_address       (mm_interconnect_1_tx_eth_crc_inserter_csr_address),             //                        .address
		.csr_writedata     (mm_interconnect_1_tx_eth_crc_inserter_csr_writedata),           //                        .writedata
		.csr_readdata      (mm_interconnect_1_tx_eth_crc_inserter_csr_readdata),            //                        .readdata
		.data_sink_sop     (tx_eth_address_inserter_avalon_streaming_source_startofpacket), //   avalon_streaming_sink.startofpacket
		.data_sink_eop     (tx_eth_address_inserter_avalon_streaming_source_endofpacket),   //                        .endofpacket
		.data_sink_valid   (tx_eth_address_inserter_avalon_streaming_source_valid),         //                        .valid
		.data_sink_ready   (tx_eth_address_inserter_avalon_streaming_source_ready),         //                        .ready
		.data_sink_data    (tx_eth_address_inserter_avalon_streaming_source_data),          //                        .data
		.data_sink_empty   (tx_eth_address_inserter_avalon_streaming_source_empty),         //                        .empty
		.data_sink_error   (tx_eth_address_inserter_avalon_streaming_source_error),         //                        .error
		.data_sink_channel (tx_eth_address_inserter_avalon_streaming_source_channel),       //                        .channel
		.data_src_sop      (tx_eth_crc_inserter_avalon_streaming_source_startofpacket),     // avalon_streaming_source.startofpacket
		.data_src_eop      (tx_eth_crc_inserter_avalon_streaming_source_endofpacket),       //                        .endofpacket
		.data_src_valid    (tx_eth_crc_inserter_avalon_streaming_source_valid),             //                        .valid
		.data_src_ready    (tx_eth_crc_inserter_avalon_streaming_source_ready),             //                        .ready
		.data_src_data     (tx_eth_crc_inserter_avalon_streaming_source_data),              //                        .data
		.data_src_empty    (tx_eth_crc_inserter_avalon_streaming_source_empty),             //                        .empty
		.data_src_error    (tx_eth_crc_inserter_avalon_streaming_source_error),             //                        .error
		.data_src_channel  ()                                                               //                        .channel
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (8),
		.BITS_PER_SYMBOL  (8),
		.USE_PACKETS      (1),
		.USE_EMPTY        (1),
		.EMPTY_WIDTH      (3),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (3),
		.PIPELINE_READY   (1)
	) tx_st_pipeline_stage_rs (
		.clk               (tx_clk_clk),                                                //       cr0.clk
		.reset             (rst_controller_001_reset_out_reset),                        // cr0_reset.reset
		.in_ready          (tx_eth_crc_inserter_avalon_streaming_source_ready),         //     sink0.ready
		.in_valid          (tx_eth_crc_inserter_avalon_streaming_source_valid),         //          .valid
		.in_startofpacket  (tx_eth_crc_inserter_avalon_streaming_source_startofpacket), //          .startofpacket
		.in_endofpacket    (tx_eth_crc_inserter_avalon_streaming_source_endofpacket),   //          .endofpacket
		.in_empty          (tx_eth_crc_inserter_avalon_streaming_source_empty),         //          .empty
		.in_error          (tx_eth_crc_inserter_avalon_streaming_source_error),         //          .error
		.in_data           (tx_eth_crc_inserter_avalon_streaming_source_data),          //          .data
		.out_ready         (tx_st_pipeline_stage_rs_source0_ready),                     //   source0.ready
		.out_valid         (tx_st_pipeline_stage_rs_source0_valid),                     //          .valid
		.out_startofpacket (tx_st_pipeline_stage_rs_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (tx_st_pipeline_stage_rs_source0_endofpacket),               //          .endofpacket
		.out_empty         (tx_st_pipeline_stage_rs_source0_empty),                     //          .empty
		.out_error         (tx_st_pipeline_stage_rs_source0_error),                     //          .error
		.out_data          (tx_st_pipeline_stage_rs_source0_data),                      //          .data
		.out_channel       (),                                                          // (terminated)
		.in_channel        (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (1),
		.USE_PACKETS       (1),
		.DATA_WIDTH        (64),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (3),
		.BITS_PER_SYMBOL   (8),
		.EMPTY_WIDTH       (3)
	) tx_st_splitter_1 (
		.clk                 (tx_clk_clk),                                    //   clk.clk
		.reset               (rst_controller_001_reset_out_reset),            // reset.reset
		.in0_ready           (tx_st_pipeline_stage_rs_source0_ready),         //    in.ready
		.in0_valid           (tx_st_pipeline_stage_rs_source0_valid),         //      .valid
		.in0_startofpacket   (tx_st_pipeline_stage_rs_source0_startofpacket), //      .startofpacket
		.in0_endofpacket     (tx_st_pipeline_stage_rs_source0_endofpacket),   //      .endofpacket
		.in0_empty           (tx_st_pipeline_stage_rs_source0_empty),         //      .empty
		.in0_error           (tx_st_pipeline_stage_rs_source0_error),         //      .error
		.in0_data            (tx_st_pipeline_stage_rs_source0_data),          //      .data
		.out0_ready          (tx_st_splitter_1_out0_ready),                   //  out0.ready
		.out0_valid          (tx_st_splitter_1_out0_valid),                   //      .valid
		.out0_startofpacket  (tx_st_splitter_1_out0_startofpacket),           //      .startofpacket
		.out0_endofpacket    (tx_st_splitter_1_out0_endofpacket),             //      .endofpacket
		.out0_empty          (tx_st_splitter_1_out0_empty),                   //      .empty
		.out0_error          (tx_st_splitter_1_out0_error),                   //      .error
		.out0_data           (tx_st_splitter_1_out0_data),                    //      .data
		.out1_ready          (tx_st_splitter_1_out1_ready),                   //  out1.ready
		.out1_valid          (tx_st_splitter_1_out1_valid),                   //      .valid
		.out1_startofpacket  (tx_st_splitter_1_out1_startofpacket),           //      .startofpacket
		.out1_endofpacket    (tx_st_splitter_1_out1_endofpacket),             //      .endofpacket
		.out1_empty          (tx_st_splitter_1_out1_empty),                   //      .empty
		.out1_error          (tx_st_splitter_1_out1_error),                   //      .error
		.out1_data           (tx_st_splitter_1_out1_data),                    //      .data
		.in0_channel         (1'b0),                                          // (terminated)
		.out0_channel        (),                                              // (terminated)
		.out1_channel        (),                                              // (terminated)
		.out2_ready          (1'b1),                                          // (terminated)
		.out2_valid          (),                                              // (terminated)
		.out2_startofpacket  (),                                              // (terminated)
		.out2_endofpacket    (),                                              // (terminated)
		.out2_empty          (),                                              // (terminated)
		.out2_channel        (),                                              // (terminated)
		.out2_error          (),                                              // (terminated)
		.out2_data           (),                                              // (terminated)
		.out3_ready          (1'b1),                                          // (terminated)
		.out3_valid          (),                                              // (terminated)
		.out3_startofpacket  (),                                              // (terminated)
		.out3_endofpacket    (),                                              // (terminated)
		.out3_empty          (),                                              // (terminated)
		.out3_channel        (),                                              // (terminated)
		.out3_error          (),                                              // (terminated)
		.out3_data           (),                                              // (terminated)
		.out4_ready          (1'b1),                                          // (terminated)
		.out4_valid          (),                                              // (terminated)
		.out4_startofpacket  (),                                              // (terminated)
		.out4_endofpacket    (),                                              // (terminated)
		.out4_empty          (),                                              // (terminated)
		.out4_channel        (),                                              // (terminated)
		.out4_error          (),                                              // (terminated)
		.out4_data           (),                                              // (terminated)
		.out5_ready          (1'b1),                                          // (terminated)
		.out5_valid          (),                                              // (terminated)
		.out5_startofpacket  (),                                              // (terminated)
		.out5_endofpacket    (),                                              // (terminated)
		.out5_empty          (),                                              // (terminated)
		.out5_channel        (),                                              // (terminated)
		.out5_error          (),                                              // (terminated)
		.out5_data           (),                                              // (terminated)
		.out6_ready          (1'b1),                                          // (terminated)
		.out6_valid          (),                                              // (terminated)
		.out6_startofpacket  (),                                              // (terminated)
		.out6_endofpacket    (),                                              // (terminated)
		.out6_empty          (),                                              // (terminated)
		.out6_channel        (),                                              // (terminated)
		.out6_error          (),                                              // (terminated)
		.out6_data           (),                                              // (terminated)
		.out7_ready          (1'b1),                                          // (terminated)
		.out7_valid          (),                                              // (terminated)
		.out7_startofpacket  (),                                              // (terminated)
		.out7_endofpacket    (),                                              // (terminated)
		.out7_empty          (),                                              // (terminated)
		.out7_channel        (),                                              // (terminated)
		.out7_error          (),                                              // (terminated)
		.out7_data           (),                                              // (terminated)
		.out8_ready          (1'b1),                                          // (terminated)
		.out8_valid          (),                                              // (terminated)
		.out8_startofpacket  (),                                              // (terminated)
		.out8_endofpacket    (),                                              // (terminated)
		.out8_empty          (),                                              // (terminated)
		.out8_channel        (),                                              // (terminated)
		.out8_error          (),                                              // (terminated)
		.out8_data           (),                                              // (terminated)
		.out9_ready          (1'b1),                                          // (terminated)
		.out9_valid          (),                                              // (terminated)
		.out9_startofpacket  (),                                              // (terminated)
		.out9_endofpacket    (),                                              // (terminated)
		.out9_empty          (),                                              // (terminated)
		.out9_channel        (),                                              // (terminated)
		.out9_error          (),                                              // (terminated)
		.out9_data           (),                                              // (terminated)
		.out10_ready         (1'b1),                                          // (terminated)
		.out10_valid         (),                                              // (terminated)
		.out10_startofpacket (),                                              // (terminated)
		.out10_endofpacket   (),                                              // (terminated)
		.out10_empty         (),                                              // (terminated)
		.out10_channel       (),                                              // (terminated)
		.out10_error         (),                                              // (terminated)
		.out10_data          (),                                              // (terminated)
		.out11_ready         (1'b1),                                          // (terminated)
		.out11_valid         (),                                              // (terminated)
		.out11_startofpacket (),                                              // (terminated)
		.out11_endofpacket   (),                                              // (terminated)
		.out11_empty         (),                                              // (terminated)
		.out11_channel       (),                                              // (terminated)
		.out11_error         (),                                              // (terminated)
		.out11_data          (),                                              // (terminated)
		.out12_ready         (1'b1),                                          // (terminated)
		.out12_valid         (),                                              // (terminated)
		.out12_startofpacket (),                                              // (terminated)
		.out12_endofpacket   (),                                              // (terminated)
		.out12_empty         (),                                              // (terminated)
		.out12_channel       (),                                              // (terminated)
		.out12_error         (),                                              // (terminated)
		.out12_data          (),                                              // (terminated)
		.out13_ready         (1'b1),                                          // (terminated)
		.out13_valid         (),                                              // (terminated)
		.out13_startofpacket (),                                              // (terminated)
		.out13_endofpacket   (),                                              // (terminated)
		.out13_empty         (),                                              // (terminated)
		.out13_channel       (),                                              // (terminated)
		.out13_error         (),                                              // (terminated)
		.out13_data          (),                                              // (terminated)
		.out14_ready         (1'b1),                                          // (terminated)
		.out14_valid         (),                                              // (terminated)
		.out14_startofpacket (),                                              // (terminated)
		.out14_endofpacket   (),                                              // (terminated)
		.out14_empty         (),                                              // (terminated)
		.out14_channel       (),                                              // (terminated)
		.out14_error         (),                                              // (terminated)
		.out14_data          (),                                              // (terminated)
		.out15_ready         (1'b1),                                          // (terminated)
		.out15_valid         (),                                              // (terminated)
		.out15_startofpacket (),                                              // (terminated)
		.out15_endofpacket   (),                                              // (terminated)
		.out15_empty         (),                                              // (terminated)
		.out15_channel       (),                                              // (terminated)
		.out15_error         (),                                              // (terminated)
		.out15_data          ()                                               // (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_frame_decoder tx_st_timing_adapter_frame_decoder (
		.clk               (tx_clk_clk),                                           //   clk.clk
		.reset_n           (~rst_controller_001_reset_out_reset),                  // reset.reset_n
		.in_data           (tx_st_splitter_1_out0_data),                           //    in.data
		.in_valid          (tx_st_splitter_1_out0_valid),                          //      .valid
		.in_ready          (tx_st_splitter_1_out0_ready),                          //      .ready
		.in_startofpacket  (tx_st_splitter_1_out0_startofpacket),                  //      .startofpacket
		.in_endofpacket    (tx_st_splitter_1_out0_endofpacket),                    //      .endofpacket
		.in_empty          (tx_st_splitter_1_out0_empty),                          //      .empty
		.in_error          (tx_st_splitter_1_out0_error),                          //      .error
		.out_data          (tx_st_timing_adapter_frame_decoder_out_data),          //   out.data
		.out_valid         (tx_st_timing_adapter_frame_decoder_out_valid),         //      .valid
		.out_startofpacket (tx_st_timing_adapter_frame_decoder_out_startofpacket), //      .startofpacket
		.out_endofpacket   (tx_st_timing_adapter_frame_decoder_out_endofpacket),   //      .endofpacket
		.out_empty         (tx_st_timing_adapter_frame_decoder_out_empty),         //      .empty
		.out_error         (tx_st_timing_adapter_frame_decoder_out_error)          //      .error
	);

	altera_eth_frame_decoder #(
		.BITSPERSYMBOL    (8),
		.SYMBOLSPERBEAT   (8),
		.ERROR_WIDTH      (3),
		.CONTINUOUS_VALID (0),
		.ENABLE_SUPP_ADDR (0),
		.ENABLE_PFC       (0),
		.PFC_PRIORITY_NUM (8)
	) tx_eth_frame_decoder (
		.clk                        (tx_clk_clk),                                                     //            clock_reset.clk
		.reset                      (rst_controller_001_reset_out_reset),                             //      clock_reset_reset.reset
		.csr_reset                  (rst_controller_003_reset_out_reset),                             //              csr_reset.reset
		.csr_readdata               (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_readdata),  //          avalom_mm_csr.readdata
		.csr_write                  (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_write),     //                       .write
		.csr_read                   (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_read),      //                       .read
		.csr_address                (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_address),   //                       .address
		.csr_writedata              (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_writedata), //                       .writedata
		.data_sink_sop              (tx_st_timing_adapter_frame_decoder_out_startofpacket),           //    avalon_st_data_sink.startofpacket
		.data_sink_eop              (tx_st_timing_adapter_frame_decoder_out_endofpacket),             //                       .endofpacket
		.data_sink_valid            (tx_st_timing_adapter_frame_decoder_out_valid),                   //                       .valid
		.data_sink_data             (tx_st_timing_adapter_frame_decoder_out_data),                    //                       .data
		.data_sink_empty            (tx_st_timing_adapter_frame_decoder_out_empty),                   //                       .empty
		.data_sink_error            (tx_st_timing_adapter_frame_decoder_out_error),                   //                       .error
		.rxstatus_src_valid         (tx_eth_frame_decoder_avalon_st_rxstatus_src_valid),              // avalon_st_rxstatus_src.valid
		.rxstatus_src_data          (tx_eth_frame_decoder_avalon_st_rxstatus_src_data),               //                       .data
		.rxstatus_src_error         (tx_eth_frame_decoder_avalon_st_rxstatus_src_error),              //                       .error
		.data_sink_ready            (),                                                               //            (terminated)
		.data_src_sop               (),                                                               //            (terminated)
		.data_src_eop               (),                                                               //            (terminated)
		.data_src_valid             (),                                                               //            (terminated)
		.data_src_ready             (1'b1),                                                           //            (terminated)
		.data_src_data              (),                                                               //            (terminated)
		.data_src_empty             (),                                                               //            (terminated)
		.data_src_error             (),                                                               //            (terminated)
		.pauselen_src_valid         (),                                                               //            (terminated)
		.pauselen_src_data          (),                                                               //            (terminated)
		.pfc_pause_quanta_src_valid (),                                                               //            (terminated)
		.pfc_pause_quanta_src_data  (),                                                               //            (terminated)
		.pfc_status_src_valid       (),                                                               //            (terminated)
		.pfc_status_src_data        (),                                                               //            (terminated)
		.pktinfo_src_valid          (),                                                               //            (terminated)
		.pktinfo_src_data           ()                                                                //            (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_error_adapter_stat tx_st_error_adapter_stat (
		.clk       (tx_clk_clk),                                        //   clk.clk
		.reset_n   (~rst_controller_001_reset_out_reset),               // reset.reset_n
		.in_data   (tx_eth_frame_decoder_avalon_st_rxstatus_src_data),  //    in.data
		.in_valid  (tx_eth_frame_decoder_avalon_st_rxstatus_src_valid), //      .valid
		.in_error  (tx_eth_frame_decoder_avalon_st_rxstatus_src_error), //      .error
		.out_data  (tx_st_error_adapter_stat_out_data),                 //   out.data
		.out_valid (tx_st_error_adapter_stat_out_valid),                //      .valid
		.out_error (tx_st_error_adapter_stat_out_error)                 //      .error
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_status_in tx_st_timing_adapter_splitter_status_in (
		.clk       (tx_clk_clk),                                        //   clk.clk
		.reset_n   (~rst_controller_001_reset_out_reset),               // reset.reset_n
		.in_data   (tx_st_error_adapter_stat_out_data),                 //    in.data
		.in_valid  (tx_st_error_adapter_stat_out_valid),                //      .valid
		.in_error  (tx_st_error_adapter_stat_out_error),                //      .error
		.out_data  (tx_st_timing_adapter_splitter_status_in_out_data),  //   out.data
		.out_valid (tx_st_timing_adapter_splitter_status_in_out_valid), //      .valid
		.out_ready (tx_st_timing_adapter_splitter_status_in_out_ready), //      .ready
		.out_error (tx_st_timing_adapter_splitter_status_in_out_error)  //      .error
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_status_output tx_st_timing_adapter_splitter_status_output (
		.clk       (tx_clk_clk),                          //   clk.clk
		.reset_n   (~rst_controller_001_reset_out_reset), // reset.reset_n
		.in_data   (tx_st_status_splitter_out1_data),     //    in.data
		.in_valid  (tx_st_status_splitter_out1_valid),    //      .valid
		.in_ready  (tx_st_status_splitter_out1_ready),    //      .ready
		.in_error  (tx_st_status_splitter_out1_error),    //      .error
		.out_data  (avalon_st_txstatus_data),             //   out.data
		.out_valid (avalon_st_txstatus_valid),            //      .valid
		.out_error (avalon_st_txstatus_error)             //      .error
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (1),
		.USE_PACKETS       (0),
		.DATA_WIDTH        (40),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (7),
		.BITS_PER_SYMBOL   (40),
		.EMPTY_WIDTH       (1)
	) tx_st_status_splitter (
		.clk                 (tx_clk_clk),                                        //   clk.clk
		.reset               (rst_controller_001_reset_out_reset),                // reset.reset
		.in0_ready           (tx_st_timing_adapter_splitter_status_in_out_ready), //    in.ready
		.in0_valid           (tx_st_timing_adapter_splitter_status_in_out_valid), //      .valid
		.in0_error           (tx_st_timing_adapter_splitter_status_in_out_error), //      .error
		.in0_data            (tx_st_timing_adapter_splitter_status_in_out_data),  //      .data
		.out0_ready          (tx_st_status_splitter_out0_ready),                  //  out0.ready
		.out0_valid          (tx_st_status_splitter_out0_valid),                  //      .valid
		.out0_error          (tx_st_status_splitter_out0_error),                  //      .error
		.out0_data           (tx_st_status_splitter_out0_data),                   //      .data
		.out1_ready          (tx_st_status_splitter_out1_ready),                  //  out1.ready
		.out1_valid          (tx_st_status_splitter_out1_valid),                  //      .valid
		.out1_error          (tx_st_status_splitter_out1_error),                  //      .error
		.out1_data           (tx_st_status_splitter_out1_data),                   //      .data
		.in0_startofpacket   (1'b0),                                              // (terminated)
		.in0_endofpacket     (1'b0),                                              // (terminated)
		.in0_empty           (1'b0),                                              // (terminated)
		.in0_channel         (1'b0),                                              // (terminated)
		.out0_startofpacket  (),                                                  // (terminated)
		.out0_endofpacket    (),                                                  // (terminated)
		.out0_empty          (),                                                  // (terminated)
		.out0_channel        (),                                                  // (terminated)
		.out1_startofpacket  (),                                                  // (terminated)
		.out1_endofpacket    (),                                                  // (terminated)
		.out1_empty          (),                                                  // (terminated)
		.out1_channel        (),                                                  // (terminated)
		.out2_ready          (1'b1),                                              // (terminated)
		.out2_valid          (),                                                  // (terminated)
		.out2_startofpacket  (),                                                  // (terminated)
		.out2_endofpacket    (),                                                  // (terminated)
		.out2_empty          (),                                                  // (terminated)
		.out2_channel        (),                                                  // (terminated)
		.out2_error          (),                                                  // (terminated)
		.out2_data           (),                                                  // (terminated)
		.out3_ready          (1'b1),                                              // (terminated)
		.out3_valid          (),                                                  // (terminated)
		.out3_startofpacket  (),                                                  // (terminated)
		.out3_endofpacket    (),                                                  // (terminated)
		.out3_empty          (),                                                  // (terminated)
		.out3_channel        (),                                                  // (terminated)
		.out3_error          (),                                                  // (terminated)
		.out3_data           (),                                                  // (terminated)
		.out4_ready          (1'b1),                                              // (terminated)
		.out4_valid          (),                                                  // (terminated)
		.out4_startofpacket  (),                                                  // (terminated)
		.out4_endofpacket    (),                                                  // (terminated)
		.out4_empty          (),                                                  // (terminated)
		.out4_channel        (),                                                  // (terminated)
		.out4_error          (),                                                  // (terminated)
		.out4_data           (),                                                  // (terminated)
		.out5_ready          (1'b1),                                              // (terminated)
		.out5_valid          (),                                                  // (terminated)
		.out5_startofpacket  (),                                                  // (terminated)
		.out5_endofpacket    (),                                                  // (terminated)
		.out5_empty          (),                                                  // (terminated)
		.out5_channel        (),                                                  // (terminated)
		.out5_error          (),                                                  // (terminated)
		.out5_data           (),                                                  // (terminated)
		.out6_ready          (1'b1),                                              // (terminated)
		.out6_valid          (),                                                  // (terminated)
		.out6_startofpacket  (),                                                  // (terminated)
		.out6_endofpacket    (),                                                  // (terminated)
		.out6_empty          (),                                                  // (terminated)
		.out6_channel        (),                                                  // (terminated)
		.out6_error          (),                                                  // (terminated)
		.out6_data           (),                                                  // (terminated)
		.out7_ready          (1'b1),                                              // (terminated)
		.out7_valid          (),                                                  // (terminated)
		.out7_startofpacket  (),                                                  // (terminated)
		.out7_endofpacket    (),                                                  // (terminated)
		.out7_empty          (),                                                  // (terminated)
		.out7_channel        (),                                                  // (terminated)
		.out7_error          (),                                                  // (terminated)
		.out7_data           (),                                                  // (terminated)
		.out8_ready          (1'b1),                                              // (terminated)
		.out8_valid          (),                                                  // (terminated)
		.out8_startofpacket  (),                                                  // (terminated)
		.out8_endofpacket    (),                                                  // (terminated)
		.out8_empty          (),                                                  // (terminated)
		.out8_channel        (),                                                  // (terminated)
		.out8_error          (),                                                  // (terminated)
		.out8_data           (),                                                  // (terminated)
		.out9_ready          (1'b1),                                              // (terminated)
		.out9_valid          (),                                                  // (terminated)
		.out9_startofpacket  (),                                                  // (terminated)
		.out9_endofpacket    (),                                                  // (terminated)
		.out9_empty          (),                                                  // (terminated)
		.out9_channel        (),                                                  // (terminated)
		.out9_error          (),                                                  // (terminated)
		.out9_data           (),                                                  // (terminated)
		.out10_ready         (1'b1),                                              // (terminated)
		.out10_valid         (),                                                  // (terminated)
		.out10_startofpacket (),                                                  // (terminated)
		.out10_endofpacket   (),                                                  // (terminated)
		.out10_empty         (),                                                  // (terminated)
		.out10_channel       (),                                                  // (terminated)
		.out10_error         (),                                                  // (terminated)
		.out10_data          (),                                                  // (terminated)
		.out11_ready         (1'b1),                                              // (terminated)
		.out11_valid         (),                                                  // (terminated)
		.out11_startofpacket (),                                                  // (terminated)
		.out11_endofpacket   (),                                                  // (terminated)
		.out11_empty         (),                                                  // (terminated)
		.out11_channel       (),                                                  // (terminated)
		.out11_error         (),                                                  // (terminated)
		.out11_data          (),                                                  // (terminated)
		.out12_ready         (1'b1),                                              // (terminated)
		.out12_valid         (),                                                  // (terminated)
		.out12_startofpacket (),                                                  // (terminated)
		.out12_endofpacket   (),                                                  // (terminated)
		.out12_empty         (),                                                  // (terminated)
		.out12_channel       (),                                                  // (terminated)
		.out12_error         (),                                                  // (terminated)
		.out12_data          (),                                                  // (terminated)
		.out13_ready         (1'b1),                                              // (terminated)
		.out13_valid         (),                                                  // (terminated)
		.out13_startofpacket (),                                                  // (terminated)
		.out13_endofpacket   (),                                                  // (terminated)
		.out13_empty         (),                                                  // (terminated)
		.out13_channel       (),                                                  // (terminated)
		.out13_error         (),                                                  // (terminated)
		.out13_data          (),                                                  // (terminated)
		.out14_ready         (1'b1),                                              // (terminated)
		.out14_valid         (),                                                  // (terminated)
		.out14_startofpacket (),                                                  // (terminated)
		.out14_endofpacket   (),                                                  // (terminated)
		.out14_empty         (),                                                  // (terminated)
		.out14_channel       (),                                                  // (terminated)
		.out14_error         (),                                                  // (terminated)
		.out14_data          (),                                                  // (terminated)
		.out15_ready         (1'b1),                                              // (terminated)
		.out15_valid         (),                                                  // (terminated)
		.out15_startofpacket (),                                                  // (terminated)
		.out15_endofpacket   (),                                                  // (terminated)
		.out15_empty         (),                                                  // (terminated)
		.out15_channel       (),                                                  // (terminated)
		.out15_error         (),                                                  // (terminated)
		.out15_data          ()                                                   // (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_status_output tx_st_timing_adapter_splitter_status_statistics (
		.clk       (tx_clk_clk),                                                //   clk.clk
		.reset_n   (~rst_controller_001_reset_out_reset),                       // reset.reset_n
		.in_data   (tx_st_status_splitter_out0_data),                           //    in.data
		.in_valid  (tx_st_status_splitter_out0_valid),                          //      .valid
		.in_ready  (tx_st_status_splitter_out0_ready),                          //      .ready
		.in_error  (tx_st_status_splitter_out0_error),                          //      .error
		.out_data  (tx_st_timing_adapter_splitter_status_statistics_out_data),  //   out.data
		.out_valid (tx_st_timing_adapter_splitter_status_statistics_out_valid), //      .valid
		.out_error (tx_st_timing_adapter_splitter_status_statistics_out_error)  //      .error
	);

	altera_eth_10gmem_statistics_collector #(
		.ENABLE_PFC (0)
	) tx_eth_statistics_collector (
		.clk             (tx_clk_clk),                                                  //               clock.clk
		.csr_reset       (rst_controller_003_reset_out_reset),                          //           csr_reset.reset
		.csr_read        (mm_interconnect_1_tx_eth_statistics_collector_csr_read),      //                 csr.read
		.csr_address     (mm_interconnect_1_tx_eth_statistics_collector_csr_address),   //                    .address
		.csr_readdata    (mm_interconnect_1_tx_eth_statistics_collector_csr_readdata),  //                    .readdata
		.csr_write       (mm_interconnect_1_tx_eth_statistics_collector_csr_write),     //                    .write
		.csr_writedata   (mm_interconnect_1_tx_eth_statistics_collector_csr_writedata), //                    .writedata
		.stat_sink_valid (tx_st_status_output_delay_to_statistic_out_valid),            // avalon_st_sink_data.valid
		.stat_sink_data  (tx_st_status_output_delay_to_statistic_out_data),             //                    .data
		.stat_sink_error (tx_st_status_output_delay_to_statistic_out_error)             //                    .error
	);

	altera_avalon_st_delay #(
		.NUMBER_OF_DELAY_CLOCKS (1),
		.DATA_WIDTH             (40),
		.BITS_PER_SYMBOL        (40),
		.USE_PACKETS            (0),
		.USE_CHANNEL            (0),
		.CHANNEL_WIDTH          (1),
		.USE_ERROR              (1),
		.ERROR_WIDTH            (7)
	) tx_st_status_output_delay_to_statistic (
		.in0_valid          (tx_st_timing_adapter_splitter_status_statistics_out_valid), //        in.valid
		.in0_data           (tx_st_timing_adapter_splitter_status_statistics_out_data),  //          .data
		.in0_error          (tx_st_timing_adapter_splitter_status_statistics_out_error), //          .error
		.out0_valid         (tx_st_status_output_delay_to_statistic_out_valid),          //       out.valid
		.out0_data          (tx_st_status_output_delay_to_statistic_out_data),           //          .data
		.out0_error         (tx_st_status_output_delay_to_statistic_out_error),          //          .error
		.clk                (tx_clk_clk),                                                //       clk.clk
		.reset_n            (~rst_controller_001_reset_out_reset),                       // clk_reset.reset_n
		.in0_startofpacket  (1'b0),                                                      // (terminated)
		.in0_endofpacket    (1'b0),                                                      // (terminated)
		.out0_startofpacket (),                                                          // (terminated)
		.out0_endofpacket   (),                                                          // (terminated)
		.in0_empty          (1'b0),                                                      // (terminated)
		.out0_empty         (),                                                          // (terminated)
		.in0_channel        (1'b0),                                                      // (terminated)
		.out0_channel       ()                                                           // (terminated)
	);

	altera_eth_packet_formatter #(
		.ERROR_WIDTH (3)
	) tx_eth_packet_formatter (
		.clk                      (tx_clk_clk),                                                           //       clk.clk
		.reset                    (rst_controller_001_reset_out_reset),                                   // clk_reset.reset
		.data_sink_data           (tx_st_splitter_1_out1_data),                                           // data_sink.data
		.data_sink_sop            (tx_st_splitter_1_out1_startofpacket),                                  //          .startofpacket
		.data_sink_eop            (tx_st_splitter_1_out1_endofpacket),                                    //          .endofpacket
		.data_sink_empty          (tx_st_splitter_1_out1_empty),                                          //          .empty
		.data_sink_error          (tx_st_splitter_1_out1_error),                                          //          .error
		.data_sink_valid          (tx_st_splitter_1_out1_valid),                                          //          .valid
		.data_sink_ready          (tx_st_splitter_1_out1_ready),                                          //          .ready
		.data_src_data            (tx_eth_packet_formatter_data_src_data),                                //  data_src.data
		.data_src_sop             (tx_eth_packet_formatter_data_src_startofpacket),                       //          .startofpacket
		.data_src_eop             (tx_eth_packet_formatter_data_src_endofpacket),                         //          .endofpacket
		.data_src_empty           (tx_eth_packet_formatter_data_src_empty),                               //          .empty
		.data_src_valid           (tx_eth_packet_formatter_data_src_valid),                               //          .valid
		.data_src_ready           (tx_eth_packet_formatter_data_src_ready),                               //          .ready
		.data_sink_data_preamble  (64'b0000000000000000000000000000000000000000000000000000000000000000), // (terminated)
		.data_sink_valid_preamble (1'b0),                                                                 // (terminated)
		.data_sink_ready_preamble ()                                                                      // (terminated)
	);

	altera_eth_xgmii_termination tx_eth_xgmii_termination (
		.clk             (tx_clk_clk),                                            //             clock_reset.clk
		.reset           (rst_controller_001_reset_out_reset),                    //       clock_reset_reset.reset
		.xgmii_src_data  (tx_eth_xgmii_termination_avalon_streaming_source_data), // avalon_streaming_source.data
		.data_sink_sop   (tx_eth_packet_formatter_data_src_startofpacket),        //   avalon_streaming_sink.startofpacket
		.data_sink_eop   (tx_eth_packet_formatter_data_src_endofpacket),          //                        .endofpacket
		.data_sink_valid (tx_eth_packet_formatter_data_src_valid),                //                        .valid
		.data_sink_data  (tx_eth_packet_formatter_data_src_data),                 //                        .data
		.data_sink_empty (tx_eth_packet_formatter_data_src_empty),                //                        .empty
		.data_sink_ready (tx_eth_packet_formatter_data_src_ready)                 //                        .ready
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_in tx_st_timing_adapter_splitter_in (
		.clk       (tx_clk_clk),                                            //   clk.clk
		.reset_n   (~rst_controller_001_reset_out_reset),                   // reset.reset_n
		.in_data   (tx_eth_xgmii_termination_avalon_streaming_source_data), //    in.data
		.out_data  (tx_st_timing_adapter_splitter_in_out_data),             //   out.data
		.out_valid (tx_st_timing_adapter_splitter_in_out_valid),            //      .valid
		.out_ready (tx_st_timing_adapter_splitter_in_out_ready)             //      .ready
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (1),
		.QUALIFY_VALID_OUT (1),
		.USE_PACKETS       (0),
		.DATA_WIDTH        (72),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (1),
		.BITS_PER_SYMBOL   (9),
		.EMPTY_WIDTH       (3)
	) tx_st_splitter_xgmii (
		.clk                 (tx_clk_clk),                                 //   clk.clk
		.reset               (rst_controller_001_reset_out_reset),         // reset.reset
		.in0_ready           (tx_st_timing_adapter_splitter_in_out_ready), //    in.ready
		.in0_valid           (tx_st_timing_adapter_splitter_in_out_valid), //      .valid
		.in0_data            (tx_st_timing_adapter_splitter_in_out_data),  //      .data
		.out0_ready          (tx_st_splitter_xgmii_out0_ready),            //  out0.ready
		.out0_valid          (tx_st_splitter_xgmii_out0_valid),            //      .valid
		.out0_data           (tx_st_splitter_xgmii_out0_data),             //      .data
		.in0_startofpacket   (1'b0),                                       // (terminated)
		.in0_endofpacket     (1'b0),                                       // (terminated)
		.in0_empty           (3'b000),                                     // (terminated)
		.in0_channel         (1'b0),                                       // (terminated)
		.in0_error           (1'b0),                                       // (terminated)
		.out0_startofpacket  (),                                           // (terminated)
		.out0_endofpacket    (),                                           // (terminated)
		.out0_empty          (),                                           // (terminated)
		.out0_channel        (),                                           // (terminated)
		.out0_error          (),                                           // (terminated)
		.out1_ready          (1'b1),                                       // (terminated)
		.out1_valid          (),                                           // (terminated)
		.out1_startofpacket  (),                                           // (terminated)
		.out1_endofpacket    (),                                           // (terminated)
		.out1_empty          (),                                           // (terminated)
		.out1_channel        (),                                           // (terminated)
		.out1_error          (),                                           // (terminated)
		.out1_data           (),                                           // (terminated)
		.out2_ready          (1'b1),                                       // (terminated)
		.out2_valid          (),                                           // (terminated)
		.out2_startofpacket  (),                                           // (terminated)
		.out2_endofpacket    (),                                           // (terminated)
		.out2_empty          (),                                           // (terminated)
		.out2_channel        (),                                           // (terminated)
		.out2_error          (),                                           // (terminated)
		.out2_data           (),                                           // (terminated)
		.out3_ready          (1'b1),                                       // (terminated)
		.out3_valid          (),                                           // (terminated)
		.out3_startofpacket  (),                                           // (terminated)
		.out3_endofpacket    (),                                           // (terminated)
		.out3_empty          (),                                           // (terminated)
		.out3_channel        (),                                           // (terminated)
		.out3_error          (),                                           // (terminated)
		.out3_data           (),                                           // (terminated)
		.out4_ready          (1'b1),                                       // (terminated)
		.out4_valid          (),                                           // (terminated)
		.out4_startofpacket  (),                                           // (terminated)
		.out4_endofpacket    (),                                           // (terminated)
		.out4_empty          (),                                           // (terminated)
		.out4_channel        (),                                           // (terminated)
		.out4_error          (),                                           // (terminated)
		.out4_data           (),                                           // (terminated)
		.out5_ready          (1'b1),                                       // (terminated)
		.out5_valid          (),                                           // (terminated)
		.out5_startofpacket  (),                                           // (terminated)
		.out5_endofpacket    (),                                           // (terminated)
		.out5_empty          (),                                           // (terminated)
		.out5_channel        (),                                           // (terminated)
		.out5_error          (),                                           // (terminated)
		.out5_data           (),                                           // (terminated)
		.out6_ready          (1'b1),                                       // (terminated)
		.out6_valid          (),                                           // (terminated)
		.out6_startofpacket  (),                                           // (terminated)
		.out6_endofpacket    (),                                           // (terminated)
		.out6_empty          (),                                           // (terminated)
		.out6_channel        (),                                           // (terminated)
		.out6_error          (),                                           // (terminated)
		.out6_data           (),                                           // (terminated)
		.out7_ready          (1'b1),                                       // (terminated)
		.out7_valid          (),                                           // (terminated)
		.out7_startofpacket  (),                                           // (terminated)
		.out7_endofpacket    (),                                           // (terminated)
		.out7_empty          (),                                           // (terminated)
		.out7_channel        (),                                           // (terminated)
		.out7_error          (),                                           // (terminated)
		.out7_data           (),                                           // (terminated)
		.out8_ready          (1'b1),                                       // (terminated)
		.out8_valid          (),                                           // (terminated)
		.out8_startofpacket  (),                                           // (terminated)
		.out8_endofpacket    (),                                           // (terminated)
		.out8_empty          (),                                           // (terminated)
		.out8_channel        (),                                           // (terminated)
		.out8_error          (),                                           // (terminated)
		.out8_data           (),                                           // (terminated)
		.out9_ready          (1'b1),                                       // (terminated)
		.out9_valid          (),                                           // (terminated)
		.out9_startofpacket  (),                                           // (terminated)
		.out9_endofpacket    (),                                           // (terminated)
		.out9_empty          (),                                           // (terminated)
		.out9_channel        (),                                           // (terminated)
		.out9_error          (),                                           // (terminated)
		.out9_data           (),                                           // (terminated)
		.out10_ready         (1'b1),                                       // (terminated)
		.out10_valid         (),                                           // (terminated)
		.out10_startofpacket (),                                           // (terminated)
		.out10_endofpacket   (),                                           // (terminated)
		.out10_empty         (),                                           // (terminated)
		.out10_channel       (),                                           // (terminated)
		.out10_error         (),                                           // (terminated)
		.out10_data          (),                                           // (terminated)
		.out11_ready         (1'b1),                                       // (terminated)
		.out11_valid         (),                                           // (terminated)
		.out11_startofpacket (),                                           // (terminated)
		.out11_endofpacket   (),                                           // (terminated)
		.out11_empty         (),                                           // (terminated)
		.out11_channel       (),                                           // (terminated)
		.out11_error         (),                                           // (terminated)
		.out11_data          (),                                           // (terminated)
		.out12_ready         (1'b1),                                       // (terminated)
		.out12_valid         (),                                           // (terminated)
		.out12_startofpacket (),                                           // (terminated)
		.out12_endofpacket   (),                                           // (terminated)
		.out12_empty         (),                                           // (terminated)
		.out12_channel       (),                                           // (terminated)
		.out12_error         (),                                           // (terminated)
		.out12_data          (),                                           // (terminated)
		.out13_ready         (1'b1),                                       // (terminated)
		.out13_valid         (),                                           // (terminated)
		.out13_startofpacket (),                                           // (terminated)
		.out13_endofpacket   (),                                           // (terminated)
		.out13_empty         (),                                           // (terminated)
		.out13_channel       (),                                           // (terminated)
		.out13_error         (),                                           // (terminated)
		.out13_data          (),                                           // (terminated)
		.out14_ready         (1'b1),                                       // (terminated)
		.out14_valid         (),                                           // (terminated)
		.out14_startofpacket (),                                           // (terminated)
		.out14_endofpacket   (),                                           // (terminated)
		.out14_empty         (),                                           // (terminated)
		.out14_channel       (),                                           // (terminated)
		.out14_error         (),                                           // (terminated)
		.out14_data          (),                                           // (terminated)
		.out15_ready         (1'b1),                                       // (terminated)
		.out15_valid         (),                                           // (terminated)
		.out15_startofpacket (),                                           // (terminated)
		.out15_endofpacket   (),                                           // (terminated)
		.out15_empty         (),                                           // (terminated)
		.out15_channel       (),                                           // (terminated)
		.out15_error         (),                                           // (terminated)
		.out15_data          ()                                            // (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_out_0 tx_st_timing_adapter_splitter_out_0 (
		.clk      (tx_clk_clk),                                   //   clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),          // reset.reset_n
		.in_data  (tx_st_splitter_xgmii_out0_data),               //    in.data
		.in_valid (tx_st_splitter_xgmii_out0_valid),              //      .valid
		.in_ready (tx_st_splitter_xgmii_out0_ready),              //      .ready
		.out_data (tx_st_timing_adapter_splitter_out_0_out_data)  //   out.data
	);

	altera_eth_link_fault_generation tx_eth_link_fault_generation (
		.clk                  (tx_clk_clk),                                        //             clk.clk
		.reset                (rst_controller_001_reset_out_reset),                //       clk_reset.reset
		.mii_sink_data        (tx_st_timing_adapter_splitter_out_0_out_data),      //        mii_sink.data
		.mii_src_data         (xgmii_tx_data),                                     //         mii_src.data
		.link_fault_sink_data (rxtx_timing_adapter_link_fault_status_tx_out_data)  // link_fault_sink.data
	);

	altera_avalon_mm_bridge #(
		.DATA_WIDTH        (32),
		.SYMBOL_WIDTH      (8),
		.HDL_ADDR_WIDTH    (14),
		.BURSTCOUNT_WIDTH  (1),
		.PIPELINE_COMMAND  (0),
		.PIPELINE_RESPONSE (0)
	) rx_bridge (
		.clk              (rx_clk_clk),                                   //   clk.clk
		.reset            (rst_controller_004_reset_out_reset),           // reset.reset
		.s0_waitrequest   (mm_interconnect_0_rx_bridge_s0_waitrequest),   //    s0.waitrequest
		.s0_readdata      (mm_interconnect_0_rx_bridge_s0_readdata),      //      .readdata
		.s0_readdatavalid (mm_interconnect_0_rx_bridge_s0_readdatavalid), //      .readdatavalid
		.s0_burstcount    (mm_interconnect_0_rx_bridge_s0_burstcount),    //      .burstcount
		.s0_writedata     (mm_interconnect_0_rx_bridge_s0_writedata),     //      .writedata
		.s0_address       (mm_interconnect_0_rx_bridge_s0_address),       //      .address
		.s0_write         (mm_interconnect_0_rx_bridge_s0_write),         //      .write
		.s0_read          (mm_interconnect_0_rx_bridge_s0_read),          //      .read
		.s0_byteenable    (mm_interconnect_0_rx_bridge_s0_byteenable),    //      .byteenable
		.s0_debugaccess   (mm_interconnect_0_rx_bridge_s0_debugaccess),   //      .debugaccess
		.m0_waitrequest   (rx_bridge_m0_waitrequest),                     //    m0.waitrequest
		.m0_readdata      (rx_bridge_m0_readdata),                        //      .readdata
		.m0_readdatavalid (rx_bridge_m0_readdatavalid),                   //      .readdatavalid
		.m0_burstcount    (rx_bridge_m0_burstcount),                      //      .burstcount
		.m0_writedata     (rx_bridge_m0_writedata),                       //      .writedata
		.m0_address       (rx_bridge_m0_address),                         //      .address
		.m0_write         (rx_bridge_m0_write),                           //      .write
		.m0_read          (rx_bridge_m0_read),                            //      .read
		.m0_byteenable    (rx_bridge_m0_byteenable),                      //      .byteenable
		.m0_debugaccess   (rx_bridge_m0_debugaccess)                      //      .debugaccess
	);

	altera_eth_10g_rx_register_map rx_register_map (
		.csr_clk               (rx_clk_clk),                           //      csr_clk.clk
		.csr_reset             (rst_controller_004_reset_out_reset),   //    csr_reset.reset
		.rx_10g_clk            (rx_clk_clk),                           //   rx_10g_clk.clk
		.rx_10g_reset          (rst_controller_002_reset_out_reset),   // rx_10g_reset.reset
		.rx_1g_clk             (1'b0),                                 //  (terminated)
		.rx_1g_reset           (1'b1),                                 //  (terminated)
		.csr_tsu_write         (1'b0),                                 //  (terminated)
		.csr_tsu_read          (1'b0),                                 //  (terminated)
		.csr_tsu_address       (4'b0000),                              //  (terminated)
		.csr_tsu_writedata     (32'b00000000000000000000000000000000), //  (terminated)
		.csr_tsu_readdata      (),                                     //  (terminated)
		.tsu_period_ns_fns_10g (),                                     //  (terminated)
		.tsu_adjust_ns_fns_10g (),                                     //  (terminated)
		.tsu_period_ns_fns_1g  (),                                     //  (terminated)
		.tsu_adjust_ns_fns_1g  ()                                      //  (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_in rx_st_timing_adapter_interface_conversion (
		.clk       (rx_clk_clk),                                          //   clk.clk
		.reset_n   (~rst_controller_002_reset_out_reset),                 // reset.reset_n
		.in_data   (xgmii_rx_data),                                       //    in.data
		.out_data  (rx_st_timing_adapter_interface_conversion_out_data),  //   out.data
		.out_valid (rx_st_timing_adapter_interface_conversion_out_valid), //      .valid
		.out_ready (rx_st_timing_adapter_interface_conversion_out_ready)  //      .ready
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (1),
		.USE_PACKETS       (0),
		.DATA_WIDTH        (72),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (1),
		.BITS_PER_SYMBOL   (9),
		.EMPTY_WIDTH       (3)
	) rx_st_splitter_xgmii (
		.clk                 (rx_clk_clk),                                          //   clk.clk
		.reset               (rst_controller_002_reset_out_reset),                  // reset.reset
		.in0_ready           (rx_st_timing_adapter_interface_conversion_out_ready), //    in.ready
		.in0_valid           (rx_st_timing_adapter_interface_conversion_out_valid), //      .valid
		.in0_data            (rx_st_timing_adapter_interface_conversion_out_data),  //      .data
		.out0_ready          (rx_st_splitter_xgmii_out0_ready),                     //  out0.ready
		.out0_valid          (rx_st_splitter_xgmii_out0_valid),                     //      .valid
		.out0_data           (rx_st_splitter_xgmii_out0_data),                      //      .data
		.out1_ready          (rx_st_splitter_xgmii_out1_ready),                     //  out1.ready
		.out1_valid          (rx_st_splitter_xgmii_out1_valid),                     //      .valid
		.out1_data           (rx_st_splitter_xgmii_out1_data),                      //      .data
		.in0_startofpacket   (1'b0),                                                // (terminated)
		.in0_endofpacket     (1'b0),                                                // (terminated)
		.in0_empty           (3'b000),                                              // (terminated)
		.in0_channel         (1'b0),                                                // (terminated)
		.in0_error           (1'b0),                                                // (terminated)
		.out0_startofpacket  (),                                                    // (terminated)
		.out0_endofpacket    (),                                                    // (terminated)
		.out0_empty          (),                                                    // (terminated)
		.out0_channel        (),                                                    // (terminated)
		.out0_error          (),                                                    // (terminated)
		.out1_startofpacket  (),                                                    // (terminated)
		.out1_endofpacket    (),                                                    // (terminated)
		.out1_empty          (),                                                    // (terminated)
		.out1_channel        (),                                                    // (terminated)
		.out1_error          (),                                                    // (terminated)
		.out2_ready          (1'b1),                                                // (terminated)
		.out2_valid          (),                                                    // (terminated)
		.out2_startofpacket  (),                                                    // (terminated)
		.out2_endofpacket    (),                                                    // (terminated)
		.out2_empty          (),                                                    // (terminated)
		.out2_channel        (),                                                    // (terminated)
		.out2_error          (),                                                    // (terminated)
		.out2_data           (),                                                    // (terminated)
		.out3_ready          (1'b1),                                                // (terminated)
		.out3_valid          (),                                                    // (terminated)
		.out3_startofpacket  (),                                                    // (terminated)
		.out3_endofpacket    (),                                                    // (terminated)
		.out3_empty          (),                                                    // (terminated)
		.out3_channel        (),                                                    // (terminated)
		.out3_error          (),                                                    // (terminated)
		.out3_data           (),                                                    // (terminated)
		.out4_ready          (1'b1),                                                // (terminated)
		.out4_valid          (),                                                    // (terminated)
		.out4_startofpacket  (),                                                    // (terminated)
		.out4_endofpacket    (),                                                    // (terminated)
		.out4_empty          (),                                                    // (terminated)
		.out4_channel        (),                                                    // (terminated)
		.out4_error          (),                                                    // (terminated)
		.out4_data           (),                                                    // (terminated)
		.out5_ready          (1'b1),                                                // (terminated)
		.out5_valid          (),                                                    // (terminated)
		.out5_startofpacket  (),                                                    // (terminated)
		.out5_endofpacket    (),                                                    // (terminated)
		.out5_empty          (),                                                    // (terminated)
		.out5_channel        (),                                                    // (terminated)
		.out5_error          (),                                                    // (terminated)
		.out5_data           (),                                                    // (terminated)
		.out6_ready          (1'b1),                                                // (terminated)
		.out6_valid          (),                                                    // (terminated)
		.out6_startofpacket  (),                                                    // (terminated)
		.out6_endofpacket    (),                                                    // (terminated)
		.out6_empty          (),                                                    // (terminated)
		.out6_channel        (),                                                    // (terminated)
		.out6_error          (),                                                    // (terminated)
		.out6_data           (),                                                    // (terminated)
		.out7_ready          (1'b1),                                                // (terminated)
		.out7_valid          (),                                                    // (terminated)
		.out7_startofpacket  (),                                                    // (terminated)
		.out7_endofpacket    (),                                                    // (terminated)
		.out7_empty          (),                                                    // (terminated)
		.out7_channel        (),                                                    // (terminated)
		.out7_error          (),                                                    // (terminated)
		.out7_data           (),                                                    // (terminated)
		.out8_ready          (1'b1),                                                // (terminated)
		.out8_valid          (),                                                    // (terminated)
		.out8_startofpacket  (),                                                    // (terminated)
		.out8_endofpacket    (),                                                    // (terminated)
		.out8_empty          (),                                                    // (terminated)
		.out8_channel        (),                                                    // (terminated)
		.out8_error          (),                                                    // (terminated)
		.out8_data           (),                                                    // (terminated)
		.out9_ready          (1'b1),                                                // (terminated)
		.out9_valid          (),                                                    // (terminated)
		.out9_startofpacket  (),                                                    // (terminated)
		.out9_endofpacket    (),                                                    // (terminated)
		.out9_empty          (),                                                    // (terminated)
		.out9_channel        (),                                                    // (terminated)
		.out9_error          (),                                                    // (terminated)
		.out9_data           (),                                                    // (terminated)
		.out10_ready         (1'b1),                                                // (terminated)
		.out10_valid         (),                                                    // (terminated)
		.out10_startofpacket (),                                                    // (terminated)
		.out10_endofpacket   (),                                                    // (terminated)
		.out10_empty         (),                                                    // (terminated)
		.out10_channel       (),                                                    // (terminated)
		.out10_error         (),                                                    // (terminated)
		.out10_data          (),                                                    // (terminated)
		.out11_ready         (1'b1),                                                // (terminated)
		.out11_valid         (),                                                    // (terminated)
		.out11_startofpacket (),                                                    // (terminated)
		.out11_endofpacket   (),                                                    // (terminated)
		.out11_empty         (),                                                    // (terminated)
		.out11_channel       (),                                                    // (terminated)
		.out11_error         (),                                                    // (terminated)
		.out11_data          (),                                                    // (terminated)
		.out12_ready         (1'b1),                                                // (terminated)
		.out12_valid         (),                                                    // (terminated)
		.out12_startofpacket (),                                                    // (terminated)
		.out12_endofpacket   (),                                                    // (terminated)
		.out12_empty         (),                                                    // (terminated)
		.out12_channel       (),                                                    // (terminated)
		.out12_error         (),                                                    // (terminated)
		.out12_data          (),                                                    // (terminated)
		.out13_ready         (1'b1),                                                // (terminated)
		.out13_valid         (),                                                    // (terminated)
		.out13_startofpacket (),                                                    // (terminated)
		.out13_endofpacket   (),                                                    // (terminated)
		.out13_empty         (),                                                    // (terminated)
		.out13_channel       (),                                                    // (terminated)
		.out13_error         (),                                                    // (terminated)
		.out13_data          (),                                                    // (terminated)
		.out14_ready         (1'b1),                                                // (terminated)
		.out14_valid         (),                                                    // (terminated)
		.out14_startofpacket (),                                                    // (terminated)
		.out14_endofpacket   (),                                                    // (terminated)
		.out14_empty         (),                                                    // (terminated)
		.out14_channel       (),                                                    // (terminated)
		.out14_error         (),                                                    // (terminated)
		.out14_data          (),                                                    // (terminated)
		.out15_ready         (1'b1),                                                // (terminated)
		.out15_valid         (),                                                    // (terminated)
		.out15_startofpacket (),                                                    // (terminated)
		.out15_endofpacket   (),                                                    // (terminated)
		.out15_empty         (),                                                    // (terminated)
		.out15_channel       (),                                                    // (terminated)
		.out15_error         (),                                                    // (terminated)
		.out15_data          ()                                                     // (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_out_0 rx_st_timing_adapter_lane_decoder (
		.clk      (rx_clk_clk),                                 //   clk.clk
		.reset_n  (~rst_controller_002_reset_out_reset),        // reset.reset_n
		.in_data  (rx_st_splitter_xgmii_out0_data),             //    in.data
		.in_valid (rx_st_splitter_xgmii_out0_valid),            //      .valid
		.in_ready (rx_st_splitter_xgmii_out0_ready),            //      .ready
		.out_data (rx_st_timing_adapter_lane_decoder_out_data)  //   out.data
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_out_0 rx_st_timing_adapter_link_fault_detection (
		.clk      (rx_clk_clk),                                         //   clk.clk
		.reset_n  (~rst_controller_002_reset_out_reset),                // reset.reset_n
		.in_data  (rx_st_splitter_xgmii_out1_data),                     //    in.data
		.in_valid (rx_st_splitter_xgmii_out1_valid),                    //      .valid
		.in_ready (rx_st_splitter_xgmii_out1_ready),                    //      .ready
		.out_data (rx_st_timing_adapter_link_fault_detection_out_data)  //   out.data
	);

	altera_eth_link_fault_detection rx_eth_link_fault_detection (
		.clk                 (rx_clk_clk),                                         //            clk.clk
		.reset               (rst_controller_002_reset_out_reset),                 //      clk_reset.reset
		.mii_sink_data       (rx_st_timing_adapter_link_fault_detection_out_data), //       mii_sink.data
		.link_fault_src_data (rx_eth_link_fault_detection_link_fault_src_data)     // link_fault_src.data
	);

	altera_eth_lane_decoder rx_eth_lane_decoder (
		.clk              (rx_clk_clk),                                                //             clock_reset.clk
		.reset            (rst_controller_002_reset_out_reset),                        //       clock_reset_reset.reset
		.csr_reset        (rst_controller_004_reset_out_reset),                        //               csr_reset.reset
		.xgmii_sink_data  (rx_st_timing_adapter_lane_decoder_out_data),                //   avalon_streaming_sink.data
		.rxdata_src_eop   (rx_eth_lane_decoder_avalon_streaming_source_endofpacket),   // avalon_streaming_source.endofpacket
		.rxdata_src_sop   (rx_eth_lane_decoder_avalon_streaming_source_startofpacket), //                        .startofpacket
		.rxdata_src_valid (rx_eth_lane_decoder_avalon_streaming_source_valid),         //                        .valid
		.rxdata_src_data  (rx_eth_lane_decoder_avalon_streaming_source_data),          //                        .data
		.rxdata_src_empty (rx_eth_lane_decoder_avalon_streaming_source_empty),         //                        .empty
		.rxdata_src_error (rx_eth_lane_decoder_avalon_streaming_source_error),         //                        .error
		.csr_read         (mm_interconnect_2_rx_eth_lane_decoder_csr_read),            //                     csr.read
		.csr_write        (mm_interconnect_2_rx_eth_lane_decoder_csr_write),           //                        .write
		.csr_address      (mm_interconnect_2_rx_eth_lane_decoder_csr_address),         //                        .address
		.csr_writedata    (mm_interconnect_2_rx_eth_lane_decoder_csr_writedata),       //                        .writedata
		.csr_readdata     (mm_interconnect_2_rx_eth_lane_decoder_csr_readdata),        //                        .readdata
		.preamble_valid   (),                                                          //             (terminated)
		.preamble_bytes   ()                                                           //             (terminated)
	);

	altera_eth_pkt_backpressure_control #(
		.BITSPERSYMBOL  (8),
		.SYMBOLSPERBEAT (8),
		.ERROR_WIDTH    (1),
		.USE_READY      (0)
	) rx_eth_pkt_backpressure_control (
		.clk                   (rx_clk_clk),                                                          //           clock_reset.clk
		.reset                 (rst_controller_002_reset_out_reset),                                  //     clock_reset_reset.reset
		.csr_reset             (rst_controller_004_reset_out_reset),                                  //             csr_reset.reset
		.csr_write             (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_write),         //                   csr.write
		.csr_read              (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_read),          //                      .read
		.csr_address           (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_address),       //                      .address
		.csr_writedata         (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_writedata),     //                      .writedata
		.csr_readdata          (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_readdata),      //                      .readdata
		.data_src_sop          (rx_eth_pkt_backpressure_control_avalon_st_source_data_startofpacket), // avalon_st_source_data.startofpacket
		.data_src_eop          (rx_eth_pkt_backpressure_control_avalon_st_source_data_endofpacket),   //                      .endofpacket
		.data_src_valid        (rx_eth_pkt_backpressure_control_avalon_st_source_data_valid),         //                      .valid
		.data_src_data         (rx_eth_pkt_backpressure_control_avalon_st_source_data_data),          //                      .data
		.data_src_empty        (rx_eth_pkt_backpressure_control_avalon_st_source_data_empty),         //                      .empty
		.data_src_error        (rx_eth_pkt_backpressure_control_avalon_st_source_data_error),         //                      .error
		.data_sink_sop         (rx_eth_lane_decoder_avalon_streaming_source_startofpacket),           //   avalon_st_sink_data.startofpacket
		.data_sink_eop         (rx_eth_lane_decoder_avalon_streaming_source_endofpacket),             //                      .endofpacket
		.data_sink_valid       (rx_eth_lane_decoder_avalon_streaming_source_valid),                   //                      .valid
		.data_sink_data        (rx_eth_lane_decoder_avalon_streaming_source_data),                    //                      .data
		.data_sink_empty       (rx_eth_lane_decoder_avalon_streaming_source_empty),                   //                      .empty
		.data_sink_error       (rx_eth_lane_decoder_avalon_streaming_source_error),                   //                      .error
		.data_src_ready        (1'b1),                                                                //           (terminated)
		.data_sink_ready       (),                                                                    //           (terminated)
		.pausebeats_sink_valid (1'b0),                                                                //           (terminated)
		.pausebeats_sink_data  (32'b00000000000000000000000000000000)                                 //           (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_rx_st_timing_adapter_frame_status_in rx_st_timing_adapter_frame_status_in (
		.clk               (rx_clk_clk),                                                          //   clk.clk
		.reset_n           (~rst_controller_002_reset_out_reset),                                 // reset.reset_n
		.in_data           (rx_eth_pkt_backpressure_control_avalon_st_source_data_data),          //    in.data
		.in_valid          (rx_eth_pkt_backpressure_control_avalon_st_source_data_valid),         //      .valid
		.in_startofpacket  (rx_eth_pkt_backpressure_control_avalon_st_source_data_startofpacket), //      .startofpacket
		.in_endofpacket    (rx_eth_pkt_backpressure_control_avalon_st_source_data_endofpacket),   //      .endofpacket
		.in_empty          (rx_eth_pkt_backpressure_control_avalon_st_source_data_empty),         //      .empty
		.in_error          (rx_eth_pkt_backpressure_control_avalon_st_source_data_error),         //      .error
		.out_data          (rx_st_timing_adapter_frame_status_in_out_data),                       //   out.data
		.out_valid         (rx_st_timing_adapter_frame_status_in_out_valid),                      //      .valid
		.out_ready         (rx_st_timing_adapter_frame_status_in_out_ready),                      //      .ready
		.out_startofpacket (rx_st_timing_adapter_frame_status_in_out_startofpacket),              //      .startofpacket
		.out_endofpacket   (rx_st_timing_adapter_frame_status_in_out_endofpacket),                //      .endofpacket
		.out_empty         (rx_st_timing_adapter_frame_status_in_out_empty),                      //      .empty
		.out_error         (rx_st_timing_adapter_frame_status_in_out_error)                       //      .error
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (1),
		.USE_PACKETS       (1),
		.DATA_WIDTH        (64),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (1),
		.BITS_PER_SYMBOL   (8),
		.EMPTY_WIDTH       (3)
	) rx_st_frame_status_splitter (
		.clk                 (rx_clk_clk),                                             //   clk.clk
		.reset               (rst_controller_002_reset_out_reset),                     // reset.reset
		.in0_ready           (rx_st_timing_adapter_frame_status_in_out_ready),         //    in.ready
		.in0_valid           (rx_st_timing_adapter_frame_status_in_out_valid),         //      .valid
		.in0_startofpacket   (rx_st_timing_adapter_frame_status_in_out_startofpacket), //      .startofpacket
		.in0_endofpacket     (rx_st_timing_adapter_frame_status_in_out_endofpacket),   //      .endofpacket
		.in0_empty           (rx_st_timing_adapter_frame_status_in_out_empty),         //      .empty
		.in0_error           (rx_st_timing_adapter_frame_status_in_out_error),         //      .error
		.in0_data            (rx_st_timing_adapter_frame_status_in_out_data),          //      .data
		.out0_ready          (rx_st_frame_status_splitter_out0_ready),                 //  out0.ready
		.out0_valid          (rx_st_frame_status_splitter_out0_valid),                 //      .valid
		.out0_startofpacket  (rx_st_frame_status_splitter_out0_startofpacket),         //      .startofpacket
		.out0_endofpacket    (rx_st_frame_status_splitter_out0_endofpacket),           //      .endofpacket
		.out0_empty          (rx_st_frame_status_splitter_out0_empty),                 //      .empty
		.out0_error          (rx_st_frame_status_splitter_out0_error),                 //      .error
		.out0_data           (rx_st_frame_status_splitter_out0_data),                  //      .data
		.out1_ready          (rx_st_frame_status_splitter_out1_ready),                 //  out1.ready
		.out1_valid          (rx_st_frame_status_splitter_out1_valid),                 //      .valid
		.out1_startofpacket  (rx_st_frame_status_splitter_out1_startofpacket),         //      .startofpacket
		.out1_endofpacket    (rx_st_frame_status_splitter_out1_endofpacket),           //      .endofpacket
		.out1_empty          (rx_st_frame_status_splitter_out1_empty),                 //      .empty
		.out1_error          (rx_st_frame_status_splitter_out1_error),                 //      .error
		.out1_data           (rx_st_frame_status_splitter_out1_data),                  //      .data
		.in0_channel         (1'b0),                                                   // (terminated)
		.out0_channel        (),                                                       // (terminated)
		.out1_channel        (),                                                       // (terminated)
		.out2_ready          (1'b1),                                                   // (terminated)
		.out2_valid          (),                                                       // (terminated)
		.out2_startofpacket  (),                                                       // (terminated)
		.out2_endofpacket    (),                                                       // (terminated)
		.out2_empty          (),                                                       // (terminated)
		.out2_channel        (),                                                       // (terminated)
		.out2_error          (),                                                       // (terminated)
		.out2_data           (),                                                       // (terminated)
		.out3_ready          (1'b1),                                                   // (terminated)
		.out3_valid          (),                                                       // (terminated)
		.out3_startofpacket  (),                                                       // (terminated)
		.out3_endofpacket    (),                                                       // (terminated)
		.out3_empty          (),                                                       // (terminated)
		.out3_channel        (),                                                       // (terminated)
		.out3_error          (),                                                       // (terminated)
		.out3_data           (),                                                       // (terminated)
		.out4_ready          (1'b1),                                                   // (terminated)
		.out4_valid          (),                                                       // (terminated)
		.out4_startofpacket  (),                                                       // (terminated)
		.out4_endofpacket    (),                                                       // (terminated)
		.out4_empty          (),                                                       // (terminated)
		.out4_channel        (),                                                       // (terminated)
		.out4_error          (),                                                       // (terminated)
		.out4_data           (),                                                       // (terminated)
		.out5_ready          (1'b1),                                                   // (terminated)
		.out5_valid          (),                                                       // (terminated)
		.out5_startofpacket  (),                                                       // (terminated)
		.out5_endofpacket    (),                                                       // (terminated)
		.out5_empty          (),                                                       // (terminated)
		.out5_channel        (),                                                       // (terminated)
		.out5_error          (),                                                       // (terminated)
		.out5_data           (),                                                       // (terminated)
		.out6_ready          (1'b1),                                                   // (terminated)
		.out6_valid          (),                                                       // (terminated)
		.out6_startofpacket  (),                                                       // (terminated)
		.out6_endofpacket    (),                                                       // (terminated)
		.out6_empty          (),                                                       // (terminated)
		.out6_channel        (),                                                       // (terminated)
		.out6_error          (),                                                       // (terminated)
		.out6_data           (),                                                       // (terminated)
		.out7_ready          (1'b1),                                                   // (terminated)
		.out7_valid          (),                                                       // (terminated)
		.out7_startofpacket  (),                                                       // (terminated)
		.out7_endofpacket    (),                                                       // (terminated)
		.out7_empty          (),                                                       // (terminated)
		.out7_channel        (),                                                       // (terminated)
		.out7_error          (),                                                       // (terminated)
		.out7_data           (),                                                       // (terminated)
		.out8_ready          (1'b1),                                                   // (terminated)
		.out8_valid          (),                                                       // (terminated)
		.out8_startofpacket  (),                                                       // (terminated)
		.out8_endofpacket    (),                                                       // (terminated)
		.out8_empty          (),                                                       // (terminated)
		.out8_channel        (),                                                       // (terminated)
		.out8_error          (),                                                       // (terminated)
		.out8_data           (),                                                       // (terminated)
		.out9_ready          (1'b1),                                                   // (terminated)
		.out9_valid          (),                                                       // (terminated)
		.out9_startofpacket  (),                                                       // (terminated)
		.out9_endofpacket    (),                                                       // (terminated)
		.out9_empty          (),                                                       // (terminated)
		.out9_channel        (),                                                       // (terminated)
		.out9_error          (),                                                       // (terminated)
		.out9_data           (),                                                       // (terminated)
		.out10_ready         (1'b1),                                                   // (terminated)
		.out10_valid         (),                                                       // (terminated)
		.out10_startofpacket (),                                                       // (terminated)
		.out10_endofpacket   (),                                                       // (terminated)
		.out10_empty         (),                                                       // (terminated)
		.out10_channel       (),                                                       // (terminated)
		.out10_error         (),                                                       // (terminated)
		.out10_data          (),                                                       // (terminated)
		.out11_ready         (1'b1),                                                   // (terminated)
		.out11_valid         (),                                                       // (terminated)
		.out11_startofpacket (),                                                       // (terminated)
		.out11_endofpacket   (),                                                       // (terminated)
		.out11_empty         (),                                                       // (terminated)
		.out11_channel       (),                                                       // (terminated)
		.out11_error         (),                                                       // (terminated)
		.out11_data          (),                                                       // (terminated)
		.out12_ready         (1'b1),                                                   // (terminated)
		.out12_valid         (),                                                       // (terminated)
		.out12_startofpacket (),                                                       // (terminated)
		.out12_endofpacket   (),                                                       // (terminated)
		.out12_empty         (),                                                       // (terminated)
		.out12_channel       (),                                                       // (terminated)
		.out12_error         (),                                                       // (terminated)
		.out12_data          (),                                                       // (terminated)
		.out13_ready         (1'b1),                                                   // (terminated)
		.out13_valid         (),                                                       // (terminated)
		.out13_startofpacket (),                                                       // (terminated)
		.out13_endofpacket   (),                                                       // (terminated)
		.out13_empty         (),                                                       // (terminated)
		.out13_channel       (),                                                       // (terminated)
		.out13_error         (),                                                       // (terminated)
		.out13_data          (),                                                       // (terminated)
		.out14_ready         (1'b1),                                                   // (terminated)
		.out14_valid         (),                                                       // (terminated)
		.out14_startofpacket (),                                                       // (terminated)
		.out14_endofpacket   (),                                                       // (terminated)
		.out14_empty         (),                                                       // (terminated)
		.out14_channel       (),                                                       // (terminated)
		.out14_error         (),                                                       // (terminated)
		.out14_data          (),                                                       // (terminated)
		.out15_ready         (1'b1),                                                   // (terminated)
		.out15_valid         (),                                                       // (terminated)
		.out15_startofpacket (),                                                       // (terminated)
		.out15_endofpacket   (),                                                       // (terminated)
		.out15_empty         (),                                                       // (terminated)
		.out15_channel       (),                                                       // (terminated)
		.out15_error         (),                                                       // (terminated)
		.out15_data          ()                                                        // (terminated)
	);

	altera_eth_frame_decoder #(
		.BITSPERSYMBOL    (8),
		.SYMBOLSPERBEAT   (8),
		.ERROR_WIDTH      (1),
		.CONTINUOUS_VALID (1),
		.ENABLE_SUPP_ADDR (1),
		.ENABLE_PFC       (0),
		.PFC_PRIORITY_NUM (8)
	) rx_eth_frame_decoder (
		.clk                        (rx_clk_clk),                                                         //            clock_reset.clk
		.reset                      (rst_controller_002_reset_out_reset),                                 //      clock_reset_reset.reset
		.csr_reset                  (rst_controller_004_reset_out_reset),                                 //              csr_reset.reset
		.csr_readdata               (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_readdata),      //          avalom_mm_csr.readdata
		.csr_write                  (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_write),         //                       .write
		.csr_read                   (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_read),          //                       .read
		.csr_address                (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_address),       //                       .address
		.csr_writedata              (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_writedata),     //                       .writedata
		.data_sink_sop              (rx_timing_adapter_frame_status_out_frame_decoder_out_startofpacket), //    avalon_st_data_sink.startofpacket
		.data_sink_eop              (rx_timing_adapter_frame_status_out_frame_decoder_out_endofpacket),   //                       .endofpacket
		.data_sink_valid            (rx_timing_adapter_frame_status_out_frame_decoder_out_valid),         //                       .valid
		.data_sink_data             (rx_timing_adapter_frame_status_out_frame_decoder_out_data),          //                       .data
		.data_sink_empty            (rx_timing_adapter_frame_status_out_frame_decoder_out_empty),         //                       .empty
		.data_sink_error            (rx_timing_adapter_frame_status_out_frame_decoder_out_error),         //                       .error
		.data_src_sop               (rx_eth_frame_decoder_avalon_st_data_src_startofpacket),              //     avalon_st_data_src.startofpacket
		.data_src_eop               (rx_eth_frame_decoder_avalon_st_data_src_endofpacket),                //                       .endofpacket
		.data_src_valid             (rx_eth_frame_decoder_avalon_st_data_src_valid),                      //                       .valid
		.data_src_data              (rx_eth_frame_decoder_avalon_st_data_src_data),                       //                       .data
		.data_src_empty             (rx_eth_frame_decoder_avalon_st_data_src_empty),                      //                       .empty
		.data_src_error             (rx_eth_frame_decoder_avalon_st_data_src_error),                      //                       .error
		.pauselen_src_valid         (rx_eth_frame_decoder_avalon_st_pauselen_src_valid),                  // avalon_st_pauselen_src.valid
		.pauselen_src_data          (rx_eth_frame_decoder_avalon_st_pauselen_src_data),                   //                       .data
		.rxstatus_src_valid         (rx_eth_frame_decoder_avalon_st_rxstatus_src_valid),                  // avalon_st_rxstatus_src.valid
		.rxstatus_src_data          (rx_eth_frame_decoder_avalon_st_rxstatus_src_data),                   //                       .data
		.rxstatus_src_error         (rx_eth_frame_decoder_avalon_st_rxstatus_src_error),                  //                       .error
		.pktinfo_src_valid          (rx_eth_frame_decoder_avalon_st_pktinfo_src_valid),                   //  avalon_st_pktinfo_src.valid
		.pktinfo_src_data           (rx_eth_frame_decoder_avalon_st_pktinfo_src_data),                    //                       .data
		.data_sink_ready            (),                                                                   //            (terminated)
		.data_src_ready             (1'b1),                                                               //            (terminated)
		.pfc_pause_quanta_src_valid (),                                                                   //            (terminated)
		.pfc_pause_quanta_src_data  (),                                                                   //            (terminated)
		.pfc_status_src_valid       (),                                                                   //            (terminated)
		.pfc_status_src_data        ()                                                                    //            (terminated)
	);

	altera_eth_crc #(
		.BITSPERSYMBOL             (8),
		.SYMBOLSPERBEAT            (8),
		.ERROR_WIDTH               (1),
		.MODE_CHECKER_0_INSERTER_1 (0),
		.USE_CHANNEL               (0)
	) rx_eth_crc_checker (
		.clk               (rx_clk_clk),                                                       //             clock_reset.clk
		.reset             (rst_controller_002_reset_out_reset),                               //       clock_reset_reset.reset
		.csr_reset         (rst_controller_004_reset_out_reset),                               //               csr_reset.reset
		.csr_write         (mm_interconnect_2_rx_eth_crc_checker_csr_write),                   //                     csr.write
		.csr_read          (mm_interconnect_2_rx_eth_crc_checker_csr_read),                    //                        .read
		.csr_address       (mm_interconnect_2_rx_eth_crc_checker_csr_address),                 //                        .address
		.csr_writedata     (mm_interconnect_2_rx_eth_crc_checker_csr_writedata),               //                        .writedata
		.csr_readdata      (mm_interconnect_2_rx_eth_crc_checker_csr_readdata),                //                        .readdata
		.data_sink_sop     (rx_timing_adapter_frame_status_out_crc_checker_out_startofpacket), //   avalon_streaming_sink.startofpacket
		.data_sink_eop     (rx_timing_adapter_frame_status_out_crc_checker_out_endofpacket),   //                        .endofpacket
		.data_sink_valid   (rx_timing_adapter_frame_status_out_crc_checker_out_valid),         //                        .valid
		.data_sink_data    (rx_timing_adapter_frame_status_out_crc_checker_out_data),          //                        .data
		.data_sink_empty   (rx_timing_adapter_frame_status_out_crc_checker_out_empty),         //                        .empty
		.data_sink_error   (rx_timing_adapter_frame_status_out_crc_checker_out_error),         //                        .error
		.data_src_sop      (rx_eth_crc_checker_avalon_streaming_source_startofpacket),         // avalon_streaming_source.startofpacket
		.data_src_eop      (rx_eth_crc_checker_avalon_streaming_source_endofpacket),           //                        .endofpacket
		.data_src_valid    (rx_eth_crc_checker_avalon_streaming_source_valid),                 //                        .valid
		.data_src_data     (rx_eth_crc_checker_avalon_streaming_source_data),                  //                        .data
		.data_src_empty    (rx_eth_crc_checker_avalon_streaming_source_empty),                 //                        .empty
		.data_src_error    (rx_eth_crc_checker_avalon_streaming_source_error),                 //                        .error
		.data_sink_ready   (),                                                                 //             (terminated)
		.data_sink_channel (1'b1),                                                             //             (terminated)
		.data_src_ready    (1'b1),                                                             //             (terminated)
		.data_src_channel  ()                                                                  //             (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_rx_timing_adapter_frame_status_out_frame_decoder rx_timing_adapter_frame_status_out_frame_decoder (
		.clk               (rx_clk_clk),                                                         //   clk.clk
		.reset_n           (~rst_controller_002_reset_out_reset),                                // reset.reset_n
		.in_data           (rx_st_frame_status_splitter_out0_data),                              //    in.data
		.in_valid          (rx_st_frame_status_splitter_out0_valid),                             //      .valid
		.in_ready          (rx_st_frame_status_splitter_out0_ready),                             //      .ready
		.in_startofpacket  (rx_st_frame_status_splitter_out0_startofpacket),                     //      .startofpacket
		.in_endofpacket    (rx_st_frame_status_splitter_out0_endofpacket),                       //      .endofpacket
		.in_empty          (rx_st_frame_status_splitter_out0_empty),                             //      .empty
		.in_error          (rx_st_frame_status_splitter_out0_error),                             //      .error
		.out_data          (rx_timing_adapter_frame_status_out_frame_decoder_out_data),          //   out.data
		.out_valid         (rx_timing_adapter_frame_status_out_frame_decoder_out_valid),         //      .valid
		.out_startofpacket (rx_timing_adapter_frame_status_out_frame_decoder_out_startofpacket), //      .startofpacket
		.out_endofpacket   (rx_timing_adapter_frame_status_out_frame_decoder_out_endofpacket),   //      .endofpacket
		.out_empty         (rx_timing_adapter_frame_status_out_frame_decoder_out_empty),         //      .empty
		.out_error         (rx_timing_adapter_frame_status_out_frame_decoder_out_error)          //      .error
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_rx_timing_adapter_frame_status_out_frame_decoder rx_timing_adapter_frame_status_out_crc_checker (
		.clk               (rx_clk_clk),                                                       //   clk.clk
		.reset_n           (~rst_controller_002_reset_out_reset),                              // reset.reset_n
		.in_data           (rx_st_frame_status_splitter_out1_data),                            //    in.data
		.in_valid          (rx_st_frame_status_splitter_out1_valid),                           //      .valid
		.in_ready          (rx_st_frame_status_splitter_out1_ready),                           //      .ready
		.in_startofpacket  (rx_st_frame_status_splitter_out1_startofpacket),                   //      .startofpacket
		.in_endofpacket    (rx_st_frame_status_splitter_out1_endofpacket),                     //      .endofpacket
		.in_empty          (rx_st_frame_status_splitter_out1_empty),                           //      .empty
		.in_error          (rx_st_frame_status_splitter_out1_error),                           //      .error
		.out_data          (rx_timing_adapter_frame_status_out_crc_checker_out_data),          //   out.data
		.out_valid         (rx_timing_adapter_frame_status_out_crc_checker_out_valid),         //      .valid
		.out_startofpacket (rx_timing_adapter_frame_status_out_crc_checker_out_startofpacket), //      .startofpacket
		.out_endofpacket   (rx_timing_adapter_frame_status_out_crc_checker_out_endofpacket),   //      .endofpacket
		.out_empty         (rx_timing_adapter_frame_status_out_crc_checker_out_empty),         //      .empty
		.out_error         (rx_timing_adapter_frame_status_out_crc_checker_out_error)          //      .error
	);

	altera_eth_frame_status_merger rx_eth_frame_status_merger (
		.clk                           (rx_clk_clk),                                                                                                                                    //             clock_reset.clk
		.reset                         (rst_controller_002_reset_out_reset),                                                                                                            //       clock_reset_reset.reset
		.frame_decoder_data_sink_sop   (rx_eth_frame_decoder_avalon_st_data_src_startofpacket),                                                                                         // frame_decoder_data_sink.startofpacket
		.frame_decoder_data_sink_eop   (rx_eth_frame_decoder_avalon_st_data_src_endofpacket),                                                                                           //                        .endofpacket
		.frame_decoder_data_sink_valid (rx_eth_frame_decoder_avalon_st_data_src_valid),                                                                                                 //                        .valid
		.frame_decoder_data_sink_data  (rx_eth_frame_decoder_avalon_st_data_src_data),                                                                                                  //                        .data
		.frame_decoder_data_sink_empty (rx_eth_frame_decoder_avalon_st_data_src_empty),                                                                                                 //                        .empty
		.frame_decoder_data_sink_error (rx_eth_frame_decoder_avalon_st_data_src_error),                                                                                                 //                        .error
		.crc_checker_data_sink_sop     (rx_eth_crc_checker_avalon_streaming_source_startofpacket),                                                                                      //   crc_checker_data_sink.startofpacket
		.crc_checker_data_sink_eop     (rx_eth_crc_checker_avalon_streaming_source_endofpacket),                                                                                        //                        .endofpacket
		.crc_checker_data_sink_valid   (rx_eth_crc_checker_avalon_streaming_source_valid),                                                                                              //                        .valid
		.crc_checker_data_sink_data    (rx_eth_crc_checker_avalon_streaming_source_data),                                                                                               //                        .data
		.crc_checker_data_sink_empty   (rx_eth_crc_checker_avalon_streaming_source_empty),                                                                                              //                        .empty
		.crc_checker_data_sink_error   (rx_eth_crc_checker_avalon_streaming_source_error),                                                                                              //                        .error
		.data_src_sop                  (rx_eth_frame_status_merger_data_src_startofpacket),                                                                                             //                data_src.startofpacket
		.data_src_eop                  (rx_eth_frame_status_merger_data_src_endofpacket),                                                                                               //                        .endofpacket
		.data_src_valid                (rx_eth_frame_status_merger_data_src_valid),                                                                                                     //                        .valid
		.data_src_data                 (rx_eth_frame_status_merger_data_src_data),                                                                                                      //                        .data
		.data_src_empty                (rx_eth_frame_status_merger_data_src_empty),                                                                                                     //                        .empty
		.data_src_error                (rx_eth_frame_status_merger_data_src_error),                                                                                                     //                        .error
		.pauselen_sink_valid           (rx_eth_frame_decoder_avalon_st_pauselen_src_valid),                                                                                             //           pauselen_sink.valid
		.pauselen_sink_data            (rx_eth_frame_decoder_avalon_st_pauselen_src_data),                                                                                              //                        .data
		.pauselen_src_valid            (rx_eth_frame_status_merger_pauselen_src_valid),                                                                                                 //            pauselen_src.valid
		.pauselen_src_data             (rx_eth_frame_status_merger_pauselen_src_data),                                                                                                  //                        .data
		.rxstatus_sink_valid           (rx_eth_frame_decoder_avalon_st_rxstatus_src_valid),                                                                                             //           rxstatus_sink.valid
		.rxstatus_sink_data            (rx_eth_frame_decoder_avalon_st_rxstatus_src_data),                                                                                              //                        .data
		.rxstatus_sink_error           (rx_eth_frame_decoder_avalon_st_rxstatus_src_error),                                                                                             //                        .error
		.rxstatus_src_valid            (rx_eth_frame_status_merger_rxstatus_src_valid),                                                                                                 //            rxstatus_src.valid
		.rxstatus_src_data             (rx_eth_frame_status_merger_rxstatus_src_data),                                                                                                  //                        .data
		.rxstatus_src_error            (rx_eth_frame_status_merger_rxstatus_src_error),                                                                                                 //                        .error
		.pfc_pause_quanta_sink_valid   (1'b0),                                                                                                                                          //             (terminated)
		.pfc_pause_quanta_sink_data    (136'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //             (terminated)
		.pfc_pause_quanta_src_valid    (),                                                                                                                                              //             (terminated)
		.pfc_pause_quanta_src_data     ()                                                                                                                                               //             (terminated)
	);

	altera_eth_crc_pad_rem #(
		.BITSPERSYMBOL  (8),
		.SYMBOLSPERBEAT (8),
		.ERRORWIDTH     (5)
	) rx_eth_crc_pad_rem (
		.clk               (rx_clk_clk),                                                    //                  clock_reset.clk
		.reset             (rst_controller_002_reset_out_reset),                            //            clock_reset_reset.reset
		.csr_reset         (rst_controller_004_reset_out_reset),                            //                    csr_reset.reset
		.csr_read          (mm_interconnect_2_rx_eth_crc_pad_rem_csr_read),                 //                          csr.read
		.csr_write         (mm_interconnect_2_rx_eth_crc_pad_rem_csr_write),                //                             .write
		.csr_address       (mm_interconnect_2_rx_eth_crc_pad_rem_csr_address),              //                             .address
		.csr_writedata     (mm_interconnect_2_rx_eth_crc_pad_rem_csr_writedata),            //                             .writedata
		.csr_readdata      (mm_interconnect_2_rx_eth_crc_pad_rem_csr_readdata),             //                             .readdata
		.data_sink_sop     (rx_eth_frame_status_merger_data_src_startofpacket),             //   avalon_streaming_sink_data.startofpacket
		.data_sink_eop     (rx_eth_frame_status_merger_data_src_endofpacket),               //                             .endofpacket
		.data_sink_valid   (rx_eth_frame_status_merger_data_src_valid),                     //                             .valid
		.data_sink_data    (rx_eth_frame_status_merger_data_src_data),                      //                             .data
		.data_sink_empty   (rx_eth_frame_status_merger_data_src_empty),                     //                             .empty
		.data_sink_error   (rx_eth_frame_status_merger_data_src_error),                     //                             .error
		.status_sink_valid (rx_eth_frame_decoder_avalon_st_pktinfo_src_valid),              // avalon_streaming_sink_status.valid
		.status_sink_data  (rx_eth_frame_decoder_avalon_st_pktinfo_src_data),               //                             .data
		.data_source_sop   (rx_eth_crc_pad_rem_avalon_streaming_source_data_startofpacket), // avalon_streaming_source_data.startofpacket
		.data_source_eop   (rx_eth_crc_pad_rem_avalon_streaming_source_data_endofpacket),   //                             .endofpacket
		.data_source_valid (rx_eth_crc_pad_rem_avalon_streaming_source_data_valid),         //                             .valid
		.data_source_data  (rx_eth_crc_pad_rem_avalon_streaming_source_data_data),          //                             .data
		.data_source_empty (rx_eth_crc_pad_rem_avalon_streaming_source_data_empty),         //                             .empty
		.data_source_error (rx_eth_crc_pad_rem_avalon_streaming_source_data_error)          //                             .error
	);

	altera_eth_packet_overflow_control #(
		.BITSPERSYMBOL  (8),
		.SYMBOLSPERBEAT (8),
		.ERROR_WIDTH    (5)
	) rx_eth_packet_overflow_control (
		.clk             (rx_clk_clk),                                                    //             clock_reset.clk
		.reset           (rst_controller_002_reset_out_reset),                            //       clock_reset_reset.reset
		.csr_reset       (rst_controller_004_reset_out_reset),                            //               csr_reset.reset
		.data_sink_sop   (rx_eth_crc_pad_rem_avalon_streaming_source_data_startofpacket), //   avalon_streaming_sink.startofpacket
		.data_sink_eop   (rx_eth_crc_pad_rem_avalon_streaming_source_data_endofpacket),   //                        .endofpacket
		.data_sink_valid (rx_eth_crc_pad_rem_avalon_streaming_source_data_valid),         //                        .valid
		.data_sink_empty (rx_eth_crc_pad_rem_avalon_streaming_source_data_empty),         //                        .empty
		.data_sink_error (rx_eth_crc_pad_rem_avalon_streaming_source_data_error),         //                        .error
		.data_sink_data  (rx_eth_crc_pad_rem_avalon_streaming_source_data_data),          //                        .data
		.data_src_sop    (avalon_st_rx_startofpacket),                                    // avalon_streaming_source.startofpacket
		.data_src_eop    (avalon_st_rx_endofpacket),                                      //                        .endofpacket
		.data_src_valid  (avalon_st_rx_valid),                                            //                        .valid
		.data_src_ready  (avalon_st_rx_ready),                                            //                        .ready
		.data_src_data   (avalon_st_rx_data),                                             //                        .data
		.data_src_empty  (avalon_st_rx_empty),                                            //                        .empty
		.data_src_error  (avalon_st_rx_error),                                            //                        .error
		.csr_address     (mm_interconnect_2_rx_eth_packet_overflow_control_csr_address),  //                     csr.address
		.csr_read        (mm_interconnect_2_rx_eth_packet_overflow_control_csr_read),     //                        .read
		.csr_readdata    (mm_interconnect_2_rx_eth_packet_overflow_control_csr_readdata)  //                        .readdata
	);

	altera_avalon_st_delay #(
		.NUMBER_OF_DELAY_CLOCKS (2),
		.DATA_WIDTH             (40),
		.BITS_PER_SYMBOL        (40),
		.USE_PACKETS            (0),
		.USE_CHANNEL            (0),
		.CHANNEL_WIDTH          (1),
		.USE_ERROR              (1),
		.ERROR_WIDTH            (7)
	) rx_st_status_output_delay (
		.in0_valid          (rx_st_timing_adapter_splitter_status_output_out_valid), //        in.valid
		.in0_data           (rx_st_timing_adapter_splitter_status_output_out_data),  //          .data
		.in0_error          (rx_st_timing_adapter_splitter_status_output_out_error), //          .error
		.out0_valid         (avalon_st_rxstatus_valid),                              //       out.valid
		.out0_data          (avalon_st_rxstatus_data),                               //          .data
		.out0_error         (avalon_st_rxstatus_error),                              //          .error
		.clk                (rx_clk_clk),                                            //       clk.clk
		.reset_n            (~rst_controller_002_reset_out_reset),                   // clk_reset.reset_n
		.in0_startofpacket  (1'b0),                                                  // (terminated)
		.in0_endofpacket    (1'b0),                                                  // (terminated)
		.out0_startofpacket (),                                                      // (terminated)
		.out0_endofpacket   (),                                                      // (terminated)
		.in0_empty          (1'b0),                                                  // (terminated)
		.out0_empty         (),                                                      // (terminated)
		.in0_channel        (1'b0),                                                  // (terminated)
		.out0_channel       ()                                                       // (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_rx_st_error_adapter_stat rx_st_error_adapter_stat (
		.clk       (rx_clk_clk),                                    //   clk.clk
		.reset_n   (~rst_controller_002_reset_out_reset),           // reset.reset_n
		.in_data   (rx_eth_frame_status_merger_rxstatus_src_data),  //    in.data
		.in_valid  (rx_eth_frame_status_merger_rxstatus_src_valid), //      .valid
		.in_error  (rx_eth_frame_status_merger_rxstatus_src_error), //      .error
		.out_data  (rx_st_error_adapter_stat_out_data),             //   out.data
		.out_valid (rx_st_error_adapter_stat_out_valid),            //      .valid
		.out_error (rx_st_error_adapter_stat_out_error)             //      .error
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_status_in rx_st_timing_adapter_splitter_status_in (
		.clk       (rx_clk_clk),                                        //   clk.clk
		.reset_n   (~rst_controller_002_reset_out_reset),               // reset.reset_n
		.in_data   (rx_st_error_adapter_stat_out_data),                 //    in.data
		.in_valid  (rx_st_error_adapter_stat_out_valid),                //      .valid
		.in_error  (rx_st_error_adapter_stat_out_error),                //      .error
		.out_data  (rx_st_timing_adapter_splitter_status_in_out_data),  //   out.data
		.out_valid (rx_st_timing_adapter_splitter_status_in_out_valid), //      .valid
		.out_ready (rx_st_timing_adapter_splitter_status_in_out_ready), //      .ready
		.out_error (rx_st_timing_adapter_splitter_status_in_out_error)  //      .error
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (1),
		.USE_PACKETS       (0),
		.DATA_WIDTH        (40),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (7),
		.BITS_PER_SYMBOL   (40),
		.EMPTY_WIDTH       (1)
	) rx_st_status_splitter (
		.clk                 (rx_clk_clk),                                        //   clk.clk
		.reset               (rst_controller_002_reset_out_reset),                // reset.reset
		.in0_ready           (rx_st_timing_adapter_splitter_status_in_out_ready), //    in.ready
		.in0_valid           (rx_st_timing_adapter_splitter_status_in_out_valid), //      .valid
		.in0_error           (rx_st_timing_adapter_splitter_status_in_out_error), //      .error
		.in0_data            (rx_st_timing_adapter_splitter_status_in_out_data),  //      .data
		.out0_ready          (rx_st_status_splitter_out0_ready),                  //  out0.ready
		.out0_valid          (rx_st_status_splitter_out0_valid),                  //      .valid
		.out0_error          (rx_st_status_splitter_out0_error),                  //      .error
		.out0_data           (rx_st_status_splitter_out0_data),                   //      .data
		.out1_ready          (rx_st_status_splitter_out1_ready),                  //  out1.ready
		.out1_valid          (rx_st_status_splitter_out1_valid),                  //      .valid
		.out1_error          (rx_st_status_splitter_out1_error),                  //      .error
		.out1_data           (rx_st_status_splitter_out1_data),                   //      .data
		.in0_startofpacket   (1'b0),                                              // (terminated)
		.in0_endofpacket     (1'b0),                                              // (terminated)
		.in0_empty           (1'b0),                                              // (terminated)
		.in0_channel         (1'b0),                                              // (terminated)
		.out0_startofpacket  (),                                                  // (terminated)
		.out0_endofpacket    (),                                                  // (terminated)
		.out0_empty          (),                                                  // (terminated)
		.out0_channel        (),                                                  // (terminated)
		.out1_startofpacket  (),                                                  // (terminated)
		.out1_endofpacket    (),                                                  // (terminated)
		.out1_empty          (),                                                  // (terminated)
		.out1_channel        (),                                                  // (terminated)
		.out2_ready          (1'b1),                                              // (terminated)
		.out2_valid          (),                                                  // (terminated)
		.out2_startofpacket  (),                                                  // (terminated)
		.out2_endofpacket    (),                                                  // (terminated)
		.out2_empty          (),                                                  // (terminated)
		.out2_channel        (),                                                  // (terminated)
		.out2_error          (),                                                  // (terminated)
		.out2_data           (),                                                  // (terminated)
		.out3_ready          (1'b1),                                              // (terminated)
		.out3_valid          (),                                                  // (terminated)
		.out3_startofpacket  (),                                                  // (terminated)
		.out3_endofpacket    (),                                                  // (terminated)
		.out3_empty          (),                                                  // (terminated)
		.out3_channel        (),                                                  // (terminated)
		.out3_error          (),                                                  // (terminated)
		.out3_data           (),                                                  // (terminated)
		.out4_ready          (1'b1),                                              // (terminated)
		.out4_valid          (),                                                  // (terminated)
		.out4_startofpacket  (),                                                  // (terminated)
		.out4_endofpacket    (),                                                  // (terminated)
		.out4_empty          (),                                                  // (terminated)
		.out4_channel        (),                                                  // (terminated)
		.out4_error          (),                                                  // (terminated)
		.out4_data           (),                                                  // (terminated)
		.out5_ready          (1'b1),                                              // (terminated)
		.out5_valid          (),                                                  // (terminated)
		.out5_startofpacket  (),                                                  // (terminated)
		.out5_endofpacket    (),                                                  // (terminated)
		.out5_empty          (),                                                  // (terminated)
		.out5_channel        (),                                                  // (terminated)
		.out5_error          (),                                                  // (terminated)
		.out5_data           (),                                                  // (terminated)
		.out6_ready          (1'b1),                                              // (terminated)
		.out6_valid          (),                                                  // (terminated)
		.out6_startofpacket  (),                                                  // (terminated)
		.out6_endofpacket    (),                                                  // (terminated)
		.out6_empty          (),                                                  // (terminated)
		.out6_channel        (),                                                  // (terminated)
		.out6_error          (),                                                  // (terminated)
		.out6_data           (),                                                  // (terminated)
		.out7_ready          (1'b1),                                              // (terminated)
		.out7_valid          (),                                                  // (terminated)
		.out7_startofpacket  (),                                                  // (terminated)
		.out7_endofpacket    (),                                                  // (terminated)
		.out7_empty          (),                                                  // (terminated)
		.out7_channel        (),                                                  // (terminated)
		.out7_error          (),                                                  // (terminated)
		.out7_data           (),                                                  // (terminated)
		.out8_ready          (1'b1),                                              // (terminated)
		.out8_valid          (),                                                  // (terminated)
		.out8_startofpacket  (),                                                  // (terminated)
		.out8_endofpacket    (),                                                  // (terminated)
		.out8_empty          (),                                                  // (terminated)
		.out8_channel        (),                                                  // (terminated)
		.out8_error          (),                                                  // (terminated)
		.out8_data           (),                                                  // (terminated)
		.out9_ready          (1'b1),                                              // (terminated)
		.out9_valid          (),                                                  // (terminated)
		.out9_startofpacket  (),                                                  // (terminated)
		.out9_endofpacket    (),                                                  // (terminated)
		.out9_empty          (),                                                  // (terminated)
		.out9_channel        (),                                                  // (terminated)
		.out9_error          (),                                                  // (terminated)
		.out9_data           (),                                                  // (terminated)
		.out10_ready         (1'b1),                                              // (terminated)
		.out10_valid         (),                                                  // (terminated)
		.out10_startofpacket (),                                                  // (terminated)
		.out10_endofpacket   (),                                                  // (terminated)
		.out10_empty         (),                                                  // (terminated)
		.out10_channel       (),                                                  // (terminated)
		.out10_error         (),                                                  // (terminated)
		.out10_data          (),                                                  // (terminated)
		.out11_ready         (1'b1),                                              // (terminated)
		.out11_valid         (),                                                  // (terminated)
		.out11_startofpacket (),                                                  // (terminated)
		.out11_endofpacket   (),                                                  // (terminated)
		.out11_empty         (),                                                  // (terminated)
		.out11_channel       (),                                                  // (terminated)
		.out11_error         (),                                                  // (terminated)
		.out11_data          (),                                                  // (terminated)
		.out12_ready         (1'b1),                                              // (terminated)
		.out12_valid         (),                                                  // (terminated)
		.out12_startofpacket (),                                                  // (terminated)
		.out12_endofpacket   (),                                                  // (terminated)
		.out12_empty         (),                                                  // (terminated)
		.out12_channel       (),                                                  // (terminated)
		.out12_error         (),                                                  // (terminated)
		.out12_data          (),                                                  // (terminated)
		.out13_ready         (1'b1),                                              // (terminated)
		.out13_valid         (),                                                  // (terminated)
		.out13_startofpacket (),                                                  // (terminated)
		.out13_endofpacket   (),                                                  // (terminated)
		.out13_empty         (),                                                  // (terminated)
		.out13_channel       (),                                                  // (terminated)
		.out13_error         (),                                                  // (terminated)
		.out13_data          (),                                                  // (terminated)
		.out14_ready         (1'b1),                                              // (terminated)
		.out14_valid         (),                                                  // (terminated)
		.out14_startofpacket (),                                                  // (terminated)
		.out14_endofpacket   (),                                                  // (terminated)
		.out14_empty         (),                                                  // (terminated)
		.out14_channel       (),                                                  // (terminated)
		.out14_error         (),                                                  // (terminated)
		.out14_data          (),                                                  // (terminated)
		.out15_ready         (1'b1),                                              // (terminated)
		.out15_valid         (),                                                  // (terminated)
		.out15_startofpacket (),                                                  // (terminated)
		.out15_endofpacket   (),                                                  // (terminated)
		.out15_empty         (),                                                  // (terminated)
		.out15_channel       (),                                                  // (terminated)
		.out15_error         (),                                                  // (terminated)
		.out15_data          ()                                                   // (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_status_output rx_st_timing_adapter_splitter_status_statistics (
		.clk       (rx_clk_clk),                                                //   clk.clk
		.reset_n   (~rst_controller_002_reset_out_reset),                       // reset.reset_n
		.in_data   (rx_st_status_splitter_out0_data),                           //    in.data
		.in_valid  (rx_st_status_splitter_out0_valid),                          //      .valid
		.in_ready  (rx_st_status_splitter_out0_ready),                          //      .ready
		.in_error  (rx_st_status_splitter_out0_error),                          //      .error
		.out_data  (rx_st_timing_adapter_splitter_status_statistics_out_data),  //   out.data
		.out_valid (rx_st_timing_adapter_splitter_status_statistics_out_valid), //      .valid
		.out_error (rx_st_timing_adapter_splitter_status_statistics_out_error)  //      .error
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_tx_st_timing_adapter_splitter_status_output rx_st_timing_adapter_splitter_status_output (
		.clk       (rx_clk_clk),                                            //   clk.clk
		.reset_n   (~rst_controller_002_reset_out_reset),                   // reset.reset_n
		.in_data   (rx_st_status_splitter_out1_data),                       //    in.data
		.in_valid  (rx_st_status_splitter_out1_valid),                      //      .valid
		.in_ready  (rx_st_status_splitter_out1_ready),                      //      .ready
		.in_error  (rx_st_status_splitter_out1_error),                      //      .error
		.out_data  (rx_st_timing_adapter_splitter_status_output_out_data),  //   out.data
		.out_valid (rx_st_timing_adapter_splitter_status_output_out_valid), //      .valid
		.out_error (rx_st_timing_adapter_splitter_status_output_out_error)  //      .error
	);

	altera_avalon_st_delay #(
		.NUMBER_OF_DELAY_CLOCKS (1),
		.DATA_WIDTH             (40),
		.BITS_PER_SYMBOL        (40),
		.USE_PACKETS            (0),
		.USE_CHANNEL            (0),
		.CHANNEL_WIDTH          (1),
		.USE_ERROR              (1),
		.ERROR_WIDTH            (7)
	) rx_st_status_statistics_delay (
		.in0_valid          (rx_st_timing_adapter_splitter_status_statistics_out_valid), //        in.valid
		.in0_data           (rx_st_timing_adapter_splitter_status_statistics_out_data),  //          .data
		.in0_error          (rx_st_timing_adapter_splitter_status_statistics_out_error), //          .error
		.out0_valid         (rx_st_status_statistics_delay_out_valid),                   //       out.valid
		.out0_data          (rx_st_status_statistics_delay_out_data),                    //          .data
		.out0_error         (rx_st_status_statistics_delay_out_error),                   //          .error
		.clk                (rx_clk_clk),                                                //       clk.clk
		.reset_n            (~rst_controller_002_reset_out_reset),                       // clk_reset.reset_n
		.in0_startofpacket  (1'b0),                                                      // (terminated)
		.in0_endofpacket    (1'b0),                                                      // (terminated)
		.out0_startofpacket (),                                                          // (terminated)
		.out0_endofpacket   (),                                                          // (terminated)
		.in0_empty          (1'b0),                                                      // (terminated)
		.out0_empty         (),                                                          // (terminated)
		.in0_channel        (1'b0),                                                      // (terminated)
		.out0_channel       ()                                                           // (terminated)
	);

	altera_eth_10gmem_statistics_collector #(
		.ENABLE_PFC (0)
	) rx_eth_statistics_collector (
		.clk             (rx_clk_clk),                                                  //               clock.clk
		.csr_reset       (rst_controller_004_reset_out_reset),                          //           csr_reset.reset
		.csr_read        (mm_interconnect_2_rx_eth_statistics_collector_csr_read),      //                 csr.read
		.csr_address     (mm_interconnect_2_rx_eth_statistics_collector_csr_address),   //                    .address
		.csr_readdata    (mm_interconnect_2_rx_eth_statistics_collector_csr_readdata),  //                    .readdata
		.csr_write       (mm_interconnect_2_rx_eth_statistics_collector_csr_write),     //                    .write
		.csr_writedata   (mm_interconnect_2_rx_eth_statistics_collector_csr_writedata), //                    .writedata
		.stat_sink_valid (rx_st_status_statistics_delay_out_valid),                     // avalon_st_sink_data.valid
		.stat_sink_data  (rx_st_status_statistics_delay_out_data),                      //                    .data
		.stat_sink_error (rx_st_status_statistics_delay_out_error)                      //                    .error
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_txrx_timing_adapter_link_fault_status_rx txrx_timing_adapter_link_fault_status_rx (
		.clk       (rx_clk_clk),                                         //   clk.clk
		.reset_n   (~rst_controller_002_reset_out_reset),                // reset.reset_n
		.in_data   (rx_eth_link_fault_detection_link_fault_src_data),    //    in.data
		.out_data  (txrx_timing_adapter_link_fault_status_rx_out_data),  //   out.data
		.out_valid (txrx_timing_adapter_link_fault_status_rx_out_valid), //      .valid
		.out_ready (txrx_timing_adapter_link_fault_status_rx_out_ready)  //      .ready
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (0),
		.USE_PACKETS       (0),
		.DATA_WIDTH        (2),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (1),
		.BITS_PER_SYMBOL   (2),
		.EMPTY_WIDTH       (1)
	) txrx_st_splitter_link_fault_status (
		.clk                 (rx_clk_clk),                                         //   clk.clk
		.reset               (rst_controller_002_reset_out_reset),                 // reset.reset
		.in0_ready           (txrx_timing_adapter_link_fault_status_rx_out_ready), //    in.ready
		.in0_valid           (txrx_timing_adapter_link_fault_status_rx_out_valid), //      .valid
		.in0_data            (txrx_timing_adapter_link_fault_status_rx_out_data),  //      .data
		.out0_ready          (txrx_st_splitter_link_fault_status_out0_ready),      //  out0.ready
		.out0_valid          (txrx_st_splitter_link_fault_status_out0_valid),      //      .valid
		.out0_data           (txrx_st_splitter_link_fault_status_out0_data),       //      .data
		.out1_ready          (txrx_st_splitter_link_fault_status_out1_ready),      //  out1.ready
		.out1_valid          (txrx_st_splitter_link_fault_status_out1_valid),      //      .valid
		.out1_data           (txrx_st_splitter_link_fault_status_out1_data),       //      .data
		.in0_startofpacket   (1'b0),                                               // (terminated)
		.in0_endofpacket     (1'b0),                                               // (terminated)
		.in0_empty           (1'b0),                                               // (terminated)
		.in0_channel         (1'b0),                                               // (terminated)
		.in0_error           (1'b0),                                               // (terminated)
		.out0_startofpacket  (),                                                   // (terminated)
		.out0_endofpacket    (),                                                   // (terminated)
		.out0_empty          (),                                                   // (terminated)
		.out0_channel        (),                                                   // (terminated)
		.out0_error          (),                                                   // (terminated)
		.out1_startofpacket  (),                                                   // (terminated)
		.out1_endofpacket    (),                                                   // (terminated)
		.out1_empty          (),                                                   // (terminated)
		.out1_channel        (),                                                   // (terminated)
		.out1_error          (),                                                   // (terminated)
		.out2_ready          (1'b1),                                               // (terminated)
		.out2_valid          (),                                                   // (terminated)
		.out2_startofpacket  (),                                                   // (terminated)
		.out2_endofpacket    (),                                                   // (terminated)
		.out2_empty          (),                                                   // (terminated)
		.out2_channel        (),                                                   // (terminated)
		.out2_error          (),                                                   // (terminated)
		.out2_data           (),                                                   // (terminated)
		.out3_ready          (1'b1),                                               // (terminated)
		.out3_valid          (),                                                   // (terminated)
		.out3_startofpacket  (),                                                   // (terminated)
		.out3_endofpacket    (),                                                   // (terminated)
		.out3_empty          (),                                                   // (terminated)
		.out3_channel        (),                                                   // (terminated)
		.out3_error          (),                                                   // (terminated)
		.out3_data           (),                                                   // (terminated)
		.out4_ready          (1'b1),                                               // (terminated)
		.out4_valid          (),                                                   // (terminated)
		.out4_startofpacket  (),                                                   // (terminated)
		.out4_endofpacket    (),                                                   // (terminated)
		.out4_empty          (),                                                   // (terminated)
		.out4_channel        (),                                                   // (terminated)
		.out4_error          (),                                                   // (terminated)
		.out4_data           (),                                                   // (terminated)
		.out5_ready          (1'b1),                                               // (terminated)
		.out5_valid          (),                                                   // (terminated)
		.out5_startofpacket  (),                                                   // (terminated)
		.out5_endofpacket    (),                                                   // (terminated)
		.out5_empty          (),                                                   // (terminated)
		.out5_channel        (),                                                   // (terminated)
		.out5_error          (),                                                   // (terminated)
		.out5_data           (),                                                   // (terminated)
		.out6_ready          (1'b1),                                               // (terminated)
		.out6_valid          (),                                                   // (terminated)
		.out6_startofpacket  (),                                                   // (terminated)
		.out6_endofpacket    (),                                                   // (terminated)
		.out6_empty          (),                                                   // (terminated)
		.out6_channel        (),                                                   // (terminated)
		.out6_error          (),                                                   // (terminated)
		.out6_data           (),                                                   // (terminated)
		.out7_ready          (1'b1),                                               // (terminated)
		.out7_valid          (),                                                   // (terminated)
		.out7_startofpacket  (),                                                   // (terminated)
		.out7_endofpacket    (),                                                   // (terminated)
		.out7_empty          (),                                                   // (terminated)
		.out7_channel        (),                                                   // (terminated)
		.out7_error          (),                                                   // (terminated)
		.out7_data           (),                                                   // (terminated)
		.out8_ready          (1'b1),                                               // (terminated)
		.out8_valid          (),                                                   // (terminated)
		.out8_startofpacket  (),                                                   // (terminated)
		.out8_endofpacket    (),                                                   // (terminated)
		.out8_empty          (),                                                   // (terminated)
		.out8_channel        (),                                                   // (terminated)
		.out8_error          (),                                                   // (terminated)
		.out8_data           (),                                                   // (terminated)
		.out9_ready          (1'b1),                                               // (terminated)
		.out9_valid          (),                                                   // (terminated)
		.out9_startofpacket  (),                                                   // (terminated)
		.out9_endofpacket    (),                                                   // (terminated)
		.out9_empty          (),                                                   // (terminated)
		.out9_channel        (),                                                   // (terminated)
		.out9_error          (),                                                   // (terminated)
		.out9_data           (),                                                   // (terminated)
		.out10_ready         (1'b1),                                               // (terminated)
		.out10_valid         (),                                                   // (terminated)
		.out10_startofpacket (),                                                   // (terminated)
		.out10_endofpacket   (),                                                   // (terminated)
		.out10_empty         (),                                                   // (terminated)
		.out10_channel       (),                                                   // (terminated)
		.out10_error         (),                                                   // (terminated)
		.out10_data          (),                                                   // (terminated)
		.out11_ready         (1'b1),                                               // (terminated)
		.out11_valid         (),                                                   // (terminated)
		.out11_startofpacket (),                                                   // (terminated)
		.out11_endofpacket   (),                                                   // (terminated)
		.out11_empty         (),                                                   // (terminated)
		.out11_channel       (),                                                   // (terminated)
		.out11_error         (),                                                   // (terminated)
		.out11_data          (),                                                   // (terminated)
		.out12_ready         (1'b1),                                               // (terminated)
		.out12_valid         (),                                                   // (terminated)
		.out12_startofpacket (),                                                   // (terminated)
		.out12_endofpacket   (),                                                   // (terminated)
		.out12_empty         (),                                                   // (terminated)
		.out12_channel       (),                                                   // (terminated)
		.out12_error         (),                                                   // (terminated)
		.out12_data          (),                                                   // (terminated)
		.out13_ready         (1'b1),                                               // (terminated)
		.out13_valid         (),                                                   // (terminated)
		.out13_startofpacket (),                                                   // (terminated)
		.out13_endofpacket   (),                                                   // (terminated)
		.out13_empty         (),                                                   // (terminated)
		.out13_channel       (),                                                   // (terminated)
		.out13_error         (),                                                   // (terminated)
		.out13_data          (),                                                   // (terminated)
		.out14_ready         (1'b1),                                               // (terminated)
		.out14_valid         (),                                                   // (terminated)
		.out14_startofpacket (),                                                   // (terminated)
		.out14_endofpacket   (),                                                   // (terminated)
		.out14_empty         (),                                                   // (terminated)
		.out14_channel       (),                                                   // (terminated)
		.out14_error         (),                                                   // (terminated)
		.out14_data          (),                                                   // (terminated)
		.out15_ready         (1'b1),                                               // (terminated)
		.out15_valid         (),                                                   // (terminated)
		.out15_startofpacket (),                                                   // (terminated)
		.out15_endofpacket   (),                                                   // (terminated)
		.out15_empty         (),                                                   // (terminated)
		.out15_channel       (),                                                   // (terminated)
		.out15_error         (),                                                   // (terminated)
		.out15_data          ()                                                    // (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_txrx_timing_adapter_link_fault_status_export txrx_timing_adapter_link_fault_status_export (
		.clk      (rx_clk_clk),                                    //   clk.clk
		.reset_n  (~rst_controller_002_reset_out_reset),           // reset.reset_n
		.in_data  (txrx_st_splitter_link_fault_status_out0_data),  //    in.data
		.in_valid (txrx_st_splitter_link_fault_status_out0_valid), //      .valid
		.in_ready (txrx_st_splitter_link_fault_status_out0_ready), //      .ready
		.out_data (link_fault_status_xgmii_rx_data)                //   out.data
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (2),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (0),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (2),
		.RD_SYNC_DEPTH      (2)
	) rxtx_dc_fifo_link_fault_status (
		.in_clk            (rx_clk_clk),                                    //        in_clk.clk
		.in_reset_n        (~rst_controller_002_reset_out_reset),           //  in_clk_reset.reset_n
		.out_clk           (tx_clk_clk),                                    //       out_clk.clk
		.out_reset_n       (~rst_controller_001_reset_out_reset),           // out_clk_reset.reset_n
		.in_data           (txrx_st_splitter_link_fault_status_out1_data),  //            in.data
		.in_valid          (txrx_st_splitter_link_fault_status_out1_valid), //              .valid
		.in_ready          (txrx_st_splitter_link_fault_status_out1_ready), //              .ready
		.out_data          (rxtx_dc_fifo_link_fault_status_out_data),       //           out.data
		.out_valid         (rxtx_dc_fifo_link_fault_status_out_valid),      //              .valid
		.out_ready         (rxtx_dc_fifo_link_fault_status_out_ready),      //              .ready
		.in_csr_address    (1'b0),                                          //   (terminated)
		.in_csr_read       (1'b0),                                          //   (terminated)
		.in_csr_write      (1'b0),                                          //   (terminated)
		.in_csr_readdata   (),                                              //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),          //   (terminated)
		.out_csr_address   (1'b0),                                          //   (terminated)
		.out_csr_read      (1'b0),                                          //   (terminated)
		.out_csr_write     (1'b0),                                          //   (terminated)
		.out_csr_readdata  (),                                              //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),          //   (terminated)
		.in_startofpacket  (1'b0),                                          //   (terminated)
		.in_endofpacket    (1'b0),                                          //   (terminated)
		.out_startofpacket (),                                              //   (terminated)
		.out_endofpacket   ()                                               //   (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_txrx_timing_adapter_link_fault_status_export rxtx_timing_adapter_link_fault_status_tx (
		.clk      (tx_clk_clk),                                        //   clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),               // reset.reset_n
		.in_data  (rxtx_dc_fifo_link_fault_status_out_data),           //    in.data
		.in_valid (rxtx_dc_fifo_link_fault_status_out_valid),          //      .valid
		.in_ready (rxtx_dc_fifo_link_fault_status_out_ready),          //      .ready
		.out_data (rxtx_timing_adapter_link_fault_status_tx_out_data)  //   out.data
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_rxtx_timing_adapter_pauselen_rx rxtx_timing_adapter_pauselen_rx (
		.clk       (rx_clk_clk),                                    //   clk.clk
		.reset_n   (~rst_controller_002_reset_out_reset),           // reset.reset_n
		.in_data   (rx_eth_frame_status_merger_pauselen_src_data),  //    in.data
		.in_valid  (rx_eth_frame_status_merger_pauselen_src_valid), //      .valid
		.out_data  (rxtx_timing_adapter_pauselen_rx_out_data),      //   out.data
		.out_valid (rxtx_timing_adapter_pauselen_rx_out_valid),     //      .valid
		.out_ready (rxtx_timing_adapter_pauselen_rx_out_ready)      //      .ready
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (16),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (0),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (2),
		.RD_SYNC_DEPTH      (2)
	) rxtx_dc_fifo_pauselen (
		.in_clk            (rx_clk_clk),                                //        in_clk.clk
		.in_reset_n        (~rst_controller_002_reset_out_reset),       //  in_clk_reset.reset_n
		.out_clk           (tx_clk_clk),                                //       out_clk.clk
		.out_reset_n       (~rst_controller_001_reset_out_reset),       // out_clk_reset.reset_n
		.in_data           (rxtx_timing_adapter_pauselen_rx_out_data),  //            in.data
		.in_valid          (rxtx_timing_adapter_pauselen_rx_out_valid), //              .valid
		.in_ready          (rxtx_timing_adapter_pauselen_rx_out_ready), //              .ready
		.out_data          (rxtx_dc_fifo_pauselen_out_data),            //           out.data
		.out_valid         (rxtx_dc_fifo_pauselen_out_valid),           //              .valid
		.out_ready         (rxtx_dc_fifo_pauselen_out_ready),           //              .ready
		.in_csr_address    (1'b0),                                      //   (terminated)
		.in_csr_read       (1'b0),                                      //   (terminated)
		.in_csr_write      (1'b0),                                      //   (terminated)
		.in_csr_readdata   (),                                          //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),      //   (terminated)
		.out_csr_address   (1'b0),                                      //   (terminated)
		.out_csr_read      (1'b0),                                      //   (terminated)
		.out_csr_write     (1'b0),                                      //   (terminated)
		.out_csr_readdata  (),                                          //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),      //   (terminated)
		.in_startofpacket  (1'b0),                                      //   (terminated)
		.in_endofpacket    (1'b0),                                      //   (terminated)
		.out_startofpacket (),                                          //   (terminated)
		.out_endofpacket   ()                                           //   (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_rxtx_timing_adapter_pauselen_tx rxtx_timing_adapter_pauselen_tx (
		.clk       (tx_clk_clk),                                //   clk.clk
		.reset_n   (~rst_controller_001_reset_out_reset),       // reset.reset_n
		.in_data   (rxtx_dc_fifo_pauselen_out_data),            //    in.data
		.in_valid  (rxtx_dc_fifo_pauselen_out_valid),           //      .valid
		.in_ready  (rxtx_dc_fifo_pauselen_out_ready),           //      .ready
		.out_data  (rxtx_timing_adapter_pauselen_tx_out_data),  //   out.data
		.out_valid (rxtx_timing_adapter_pauselen_tx_out_valid)  //      .valid
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_mm_interconnect_0 mm_interconnect_0 (
		.csr_clk_module_clk_clk                                           (csr_clk_clk),                                                      //                                   csr_clk_module_clk.clk
		.rx_clk_module_clk_clk                                            (rx_clk_clk),                                                       //                                    rx_clk_module_clk.clk
		.tx_clk_module_clk_clk                                            (tx_clk_clk),                                                       //                                    tx_clk_module_clk.clk
		.merlin_master_translator_reset_reset_bridge_in_reset_reset       (rst_controller_reset_out_reset),                                   // merlin_master_translator_reset_reset_bridge_in_reset.reset
		.rx_bridge_reset_reset_bridge_in_reset_reset                      (rst_controller_004_reset_out_reset),                               //                rx_bridge_reset_reset_bridge_in_reset.reset
		.tx_bridge_reset_reset_bridge_in_reset_reset                      (rst_controller_003_reset_out_reset),                               //                tx_bridge_reset_reset_bridge_in_reset.reset
		.merlin_master_translator_avalon_universal_master_0_address       (merlin_master_translator_avalon_universal_master_0_address),       //   merlin_master_translator_avalon_universal_master_0.address
		.merlin_master_translator_avalon_universal_master_0_waitrequest   (merlin_master_translator_avalon_universal_master_0_waitrequest),   //                                                     .waitrequest
		.merlin_master_translator_avalon_universal_master_0_burstcount    (merlin_master_translator_avalon_universal_master_0_burstcount),    //                                                     .burstcount
		.merlin_master_translator_avalon_universal_master_0_byteenable    (merlin_master_translator_avalon_universal_master_0_byteenable),    //                                                     .byteenable
		.merlin_master_translator_avalon_universal_master_0_read          (merlin_master_translator_avalon_universal_master_0_read),          //                                                     .read
		.merlin_master_translator_avalon_universal_master_0_readdata      (merlin_master_translator_avalon_universal_master_0_readdata),      //                                                     .readdata
		.merlin_master_translator_avalon_universal_master_0_readdatavalid (merlin_master_translator_avalon_universal_master_0_readdatavalid), //                                                     .readdatavalid
		.merlin_master_translator_avalon_universal_master_0_write         (merlin_master_translator_avalon_universal_master_0_write),         //                                                     .write
		.merlin_master_translator_avalon_universal_master_0_writedata     (merlin_master_translator_avalon_universal_master_0_writedata),     //                                                     .writedata
		.merlin_master_translator_avalon_universal_master_0_lock          (merlin_master_translator_avalon_universal_master_0_lock),          //                                                     .lock
		.merlin_master_translator_avalon_universal_master_0_debugaccess   (merlin_master_translator_avalon_universal_master_0_debugaccess),   //                                                     .debugaccess
		.rx_bridge_s0_address                                             (mm_interconnect_0_rx_bridge_s0_address),                           //                                         rx_bridge_s0.address
		.rx_bridge_s0_write                                               (mm_interconnect_0_rx_bridge_s0_write),                             //                                                     .write
		.rx_bridge_s0_read                                                (mm_interconnect_0_rx_bridge_s0_read),                              //                                                     .read
		.rx_bridge_s0_readdata                                            (mm_interconnect_0_rx_bridge_s0_readdata),                          //                                                     .readdata
		.rx_bridge_s0_writedata                                           (mm_interconnect_0_rx_bridge_s0_writedata),                         //                                                     .writedata
		.rx_bridge_s0_burstcount                                          (mm_interconnect_0_rx_bridge_s0_burstcount),                        //                                                     .burstcount
		.rx_bridge_s0_byteenable                                          (mm_interconnect_0_rx_bridge_s0_byteenable),                        //                                                     .byteenable
		.rx_bridge_s0_readdatavalid                                       (mm_interconnect_0_rx_bridge_s0_readdatavalid),                     //                                                     .readdatavalid
		.rx_bridge_s0_waitrequest                                         (mm_interconnect_0_rx_bridge_s0_waitrequest),                       //                                                     .waitrequest
		.rx_bridge_s0_debugaccess                                         (mm_interconnect_0_rx_bridge_s0_debugaccess),                       //                                                     .debugaccess
		.tx_bridge_s0_address                                             (mm_interconnect_0_tx_bridge_s0_address),                           //                                         tx_bridge_s0.address
		.tx_bridge_s0_write                                               (mm_interconnect_0_tx_bridge_s0_write),                             //                                                     .write
		.tx_bridge_s0_read                                                (mm_interconnect_0_tx_bridge_s0_read),                              //                                                     .read
		.tx_bridge_s0_readdata                                            (mm_interconnect_0_tx_bridge_s0_readdata),                          //                                                     .readdata
		.tx_bridge_s0_writedata                                           (mm_interconnect_0_tx_bridge_s0_writedata),                         //                                                     .writedata
		.tx_bridge_s0_burstcount                                          (mm_interconnect_0_tx_bridge_s0_burstcount),                        //                                                     .burstcount
		.tx_bridge_s0_byteenable                                          (mm_interconnect_0_tx_bridge_s0_byteenable),                        //                                                     .byteenable
		.tx_bridge_s0_readdatavalid                                       (mm_interconnect_0_tx_bridge_s0_readdatavalid),                     //                                                     .readdatavalid
		.tx_bridge_s0_waitrequest                                         (mm_interconnect_0_tx_bridge_s0_waitrequest),                       //                                                     .waitrequest
		.tx_bridge_s0_debugaccess                                         (mm_interconnect_0_tx_bridge_s0_debugaccess)                        //                                                     .debugaccess
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_mm_interconnect_1 mm_interconnect_1 (
		.tx_clk_module_clk_clk                                   (tx_clk_clk),                                                                //                              tx_clk_module_clk.clk
		.tx_bridge_reset_reset_bridge_in_reset_reset             (rst_controller_003_reset_out_reset),                                        //          tx_bridge_reset_reset_bridge_in_reset.reset
		.tx_bridge_m0_address                                    (tx_bridge_m0_address),                                                      //                                   tx_bridge_m0.address
		.tx_bridge_m0_waitrequest                                (tx_bridge_m0_waitrequest),                                                  //                                               .waitrequest
		.tx_bridge_m0_burstcount                                 (tx_bridge_m0_burstcount),                                                   //                                               .burstcount
		.tx_bridge_m0_byteenable                                 (tx_bridge_m0_byteenable),                                                   //                                               .byteenable
		.tx_bridge_m0_read                                       (tx_bridge_m0_read),                                                         //                                               .read
		.tx_bridge_m0_readdata                                   (tx_bridge_m0_readdata),                                                     //                                               .readdata
		.tx_bridge_m0_readdatavalid                              (tx_bridge_m0_readdatavalid),                                                //                                               .readdatavalid
		.tx_bridge_m0_write                                      (tx_bridge_m0_write),                                                        //                                               .write
		.tx_bridge_m0_writedata                                  (tx_bridge_m0_writedata),                                                    //                                               .writedata
		.tx_bridge_m0_debugaccess                                (tx_bridge_m0_debugaccess),                                                  //                                               .debugaccess
		.tx_eth_address_inserter_csr_address                     (mm_interconnect_1_tx_eth_address_inserter_csr_address),                     //                    tx_eth_address_inserter_csr.address
		.tx_eth_address_inserter_csr_write                       (mm_interconnect_1_tx_eth_address_inserter_csr_write),                       //                                               .write
		.tx_eth_address_inserter_csr_read                        (mm_interconnect_1_tx_eth_address_inserter_csr_read),                        //                                               .read
		.tx_eth_address_inserter_csr_readdata                    (mm_interconnect_1_tx_eth_address_inserter_csr_readdata),                    //                                               .readdata
		.tx_eth_address_inserter_csr_writedata                   (mm_interconnect_1_tx_eth_address_inserter_csr_writedata),                   //                                               .writedata
		.tx_eth_crc_inserter_csr_address                         (mm_interconnect_1_tx_eth_crc_inserter_csr_address),                         //                        tx_eth_crc_inserter_csr.address
		.tx_eth_crc_inserter_csr_write                           (mm_interconnect_1_tx_eth_crc_inserter_csr_write),                           //                                               .write
		.tx_eth_crc_inserter_csr_read                            (mm_interconnect_1_tx_eth_crc_inserter_csr_read),                            //                                               .read
		.tx_eth_crc_inserter_csr_readdata                        (mm_interconnect_1_tx_eth_crc_inserter_csr_readdata),                        //                                               .readdata
		.tx_eth_crc_inserter_csr_writedata                       (mm_interconnect_1_tx_eth_crc_inserter_csr_writedata),                       //                                               .writedata
		.tx_eth_frame_decoder_avalom_mm_csr_address              (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_address),              //             tx_eth_frame_decoder_avalom_mm_csr.address
		.tx_eth_frame_decoder_avalom_mm_csr_write                (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_write),                //                                               .write
		.tx_eth_frame_decoder_avalom_mm_csr_read                 (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_read),                 //                                               .read
		.tx_eth_frame_decoder_avalom_mm_csr_readdata             (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_readdata),             //                                               .readdata
		.tx_eth_frame_decoder_avalom_mm_csr_writedata            (mm_interconnect_1_tx_eth_frame_decoder_avalom_mm_csr_writedata),            //                                               .writedata
		.tx_eth_packet_underflow_control_avalon_slave_0_address  (mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_address),  // tx_eth_packet_underflow_control_avalon_slave_0.address
		.tx_eth_packet_underflow_control_avalon_slave_0_read     (mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_read),     //                                               .read
		.tx_eth_packet_underflow_control_avalon_slave_0_readdata (mm_interconnect_1_tx_eth_packet_underflow_control_avalon_slave_0_readdata), //                                               .readdata
		.tx_eth_pad_inserter_csr_address                         (mm_interconnect_1_tx_eth_pad_inserter_csr_address),                         //                        tx_eth_pad_inserter_csr.address
		.tx_eth_pad_inserter_csr_write                           (mm_interconnect_1_tx_eth_pad_inserter_csr_write),                           //                                               .write
		.tx_eth_pad_inserter_csr_read                            (mm_interconnect_1_tx_eth_pad_inserter_csr_read),                            //                                               .read
		.tx_eth_pad_inserter_csr_readdata                        (mm_interconnect_1_tx_eth_pad_inserter_csr_readdata),                        //                                               .readdata
		.tx_eth_pad_inserter_csr_writedata                       (mm_interconnect_1_tx_eth_pad_inserter_csr_writedata),                       //                                               .writedata
		.tx_eth_pause_ctrl_gen_csr_address                       (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_address),                       //                      tx_eth_pause_ctrl_gen_csr.address
		.tx_eth_pause_ctrl_gen_csr_write                         (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_write),                         //                                               .write
		.tx_eth_pause_ctrl_gen_csr_read                          (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_read),                          //                                               .read
		.tx_eth_pause_ctrl_gen_csr_readdata                      (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_readdata),                      //                                               .readdata
		.tx_eth_pause_ctrl_gen_csr_writedata                     (mm_interconnect_1_tx_eth_pause_ctrl_gen_csr_writedata),                     //                                               .writedata
		.tx_eth_pkt_backpressure_control_csr_address             (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_address),             //            tx_eth_pkt_backpressure_control_csr.address
		.tx_eth_pkt_backpressure_control_csr_write               (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_write),               //                                               .write
		.tx_eth_pkt_backpressure_control_csr_read                (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_read),                //                                               .read
		.tx_eth_pkt_backpressure_control_csr_readdata            (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_readdata),            //                                               .readdata
		.tx_eth_pkt_backpressure_control_csr_writedata           (mm_interconnect_1_tx_eth_pkt_backpressure_control_csr_writedata),           //                                               .writedata
		.tx_eth_statistics_collector_csr_address                 (mm_interconnect_1_tx_eth_statistics_collector_csr_address),                 //                tx_eth_statistics_collector_csr.address
		.tx_eth_statistics_collector_csr_write                   (mm_interconnect_1_tx_eth_statistics_collector_csr_write),                   //                                               .write
		.tx_eth_statistics_collector_csr_read                    (mm_interconnect_1_tx_eth_statistics_collector_csr_read),                    //                                               .read
		.tx_eth_statistics_collector_csr_readdata                (mm_interconnect_1_tx_eth_statistics_collector_csr_readdata),                //                                               .readdata
		.tx_eth_statistics_collector_csr_writedata               (mm_interconnect_1_tx_eth_statistics_collector_csr_writedata)                //                                               .writedata
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac_mm_interconnect_2 mm_interconnect_2 (
		.rx_clk_module_clk_clk                         (rx_clk_clk),                                                      //                     rx_clk_module_clk.clk
		.rx_bridge_reset_reset_bridge_in_reset_reset   (rst_controller_004_reset_out_reset),                              // rx_bridge_reset_reset_bridge_in_reset.reset
		.rx_bridge_m0_address                          (rx_bridge_m0_address),                                            //                          rx_bridge_m0.address
		.rx_bridge_m0_waitrequest                      (rx_bridge_m0_waitrequest),                                        //                                      .waitrequest
		.rx_bridge_m0_burstcount                       (rx_bridge_m0_burstcount),                                         //                                      .burstcount
		.rx_bridge_m0_byteenable                       (rx_bridge_m0_byteenable),                                         //                                      .byteenable
		.rx_bridge_m0_read                             (rx_bridge_m0_read),                                               //                                      .read
		.rx_bridge_m0_readdata                         (rx_bridge_m0_readdata),                                           //                                      .readdata
		.rx_bridge_m0_readdatavalid                    (rx_bridge_m0_readdatavalid),                                      //                                      .readdatavalid
		.rx_bridge_m0_write                            (rx_bridge_m0_write),                                              //                                      .write
		.rx_bridge_m0_writedata                        (rx_bridge_m0_writedata),                                          //                                      .writedata
		.rx_bridge_m0_debugaccess                      (rx_bridge_m0_debugaccess),                                        //                                      .debugaccess
		.rx_eth_crc_checker_csr_address                (mm_interconnect_2_rx_eth_crc_checker_csr_address),                //                rx_eth_crc_checker_csr.address
		.rx_eth_crc_checker_csr_write                  (mm_interconnect_2_rx_eth_crc_checker_csr_write),                  //                                      .write
		.rx_eth_crc_checker_csr_read                   (mm_interconnect_2_rx_eth_crc_checker_csr_read),                   //                                      .read
		.rx_eth_crc_checker_csr_readdata               (mm_interconnect_2_rx_eth_crc_checker_csr_readdata),               //                                      .readdata
		.rx_eth_crc_checker_csr_writedata              (mm_interconnect_2_rx_eth_crc_checker_csr_writedata),              //                                      .writedata
		.rx_eth_crc_pad_rem_csr_address                (mm_interconnect_2_rx_eth_crc_pad_rem_csr_address),                //                rx_eth_crc_pad_rem_csr.address
		.rx_eth_crc_pad_rem_csr_write                  (mm_interconnect_2_rx_eth_crc_pad_rem_csr_write),                  //                                      .write
		.rx_eth_crc_pad_rem_csr_read                   (mm_interconnect_2_rx_eth_crc_pad_rem_csr_read),                   //                                      .read
		.rx_eth_crc_pad_rem_csr_readdata               (mm_interconnect_2_rx_eth_crc_pad_rem_csr_readdata),               //                                      .readdata
		.rx_eth_crc_pad_rem_csr_writedata              (mm_interconnect_2_rx_eth_crc_pad_rem_csr_writedata),              //                                      .writedata
		.rx_eth_frame_decoder_avalom_mm_csr_address    (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_address),    //    rx_eth_frame_decoder_avalom_mm_csr.address
		.rx_eth_frame_decoder_avalom_mm_csr_write      (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_write),      //                                      .write
		.rx_eth_frame_decoder_avalom_mm_csr_read       (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_read),       //                                      .read
		.rx_eth_frame_decoder_avalom_mm_csr_readdata   (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_readdata),   //                                      .readdata
		.rx_eth_frame_decoder_avalom_mm_csr_writedata  (mm_interconnect_2_rx_eth_frame_decoder_avalom_mm_csr_writedata),  //                                      .writedata
		.rx_eth_lane_decoder_csr_address               (mm_interconnect_2_rx_eth_lane_decoder_csr_address),               //               rx_eth_lane_decoder_csr.address
		.rx_eth_lane_decoder_csr_write                 (mm_interconnect_2_rx_eth_lane_decoder_csr_write),                 //                                      .write
		.rx_eth_lane_decoder_csr_read                  (mm_interconnect_2_rx_eth_lane_decoder_csr_read),                  //                                      .read
		.rx_eth_lane_decoder_csr_readdata              (mm_interconnect_2_rx_eth_lane_decoder_csr_readdata),              //                                      .readdata
		.rx_eth_lane_decoder_csr_writedata             (mm_interconnect_2_rx_eth_lane_decoder_csr_writedata),             //                                      .writedata
		.rx_eth_packet_overflow_control_csr_address    (mm_interconnect_2_rx_eth_packet_overflow_control_csr_address),    //    rx_eth_packet_overflow_control_csr.address
		.rx_eth_packet_overflow_control_csr_read       (mm_interconnect_2_rx_eth_packet_overflow_control_csr_read),       //                                      .read
		.rx_eth_packet_overflow_control_csr_readdata   (mm_interconnect_2_rx_eth_packet_overflow_control_csr_readdata),   //                                      .readdata
		.rx_eth_pkt_backpressure_control_csr_address   (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_address),   //   rx_eth_pkt_backpressure_control_csr.address
		.rx_eth_pkt_backpressure_control_csr_write     (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_write),     //                                      .write
		.rx_eth_pkt_backpressure_control_csr_read      (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_read),      //                                      .read
		.rx_eth_pkt_backpressure_control_csr_readdata  (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_readdata),  //                                      .readdata
		.rx_eth_pkt_backpressure_control_csr_writedata (mm_interconnect_2_rx_eth_pkt_backpressure_control_csr_writedata), //                                      .writedata
		.rx_eth_statistics_collector_csr_address       (mm_interconnect_2_rx_eth_statistics_collector_csr_address),       //       rx_eth_statistics_collector_csr.address
		.rx_eth_statistics_collector_csr_write         (mm_interconnect_2_rx_eth_statistics_collector_csr_write),         //                                      .write
		.rx_eth_statistics_collector_csr_read          (mm_interconnect_2_rx_eth_statistics_collector_csr_read),          //                                      .read
		.rx_eth_statistics_collector_csr_readdata      (mm_interconnect_2_rx_eth_statistics_collector_csr_readdata),      //                                      .readdata
		.rx_eth_statistics_collector_csr_writedata     (mm_interconnect_2_rx_eth_statistics_collector_csr_writedata)      //                                      .writedata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~csr_reset_reset_n),             // reset_in0.reset
		.clk            (csr_clk_clk),                    //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~tx_reset_reset_n),                  // reset_in0.reset
		.clk            (tx_clk_clk),                         //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~rx_reset_reset_n),                  // reset_in0.reset
		.clk            (rx_clk_clk),                         //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_003 (
		.reset_in0      (~csr_reset_reset_n),                 // reset_in0.reset
		.clk            (tx_clk_clk),                         //       clk.clk
		.reset_out      (rst_controller_003_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_004 (
		.reset_in0      (~csr_reset_reset_n),                 // reset_in0.reset
		.clk            (rx_clk_clk),                         //       clk.clk
		.reset_out      (rst_controller_004_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
