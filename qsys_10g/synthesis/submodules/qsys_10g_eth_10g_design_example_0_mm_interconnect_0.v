// qsys_10g_eth_10g_design_example_0_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 205 at 2014.10.27.20:38:57

`timescale 1 ps / 1 ps
module qsys_10g_eth_10g_design_example_0_mm_interconnect_0 (
		input  wire        altera_10gbaser_xgmii_rx_clk_clk,                                //                        altera_10gbaser_xgmii_rx_clk.clk
		input  wire        mm_clk_module_clk_clk,                                           //                                   mm_clk_module_clk.clk
		input  wire        tx_clk_module_clk_clk,                                           //                                   tx_clk_module_clk.clk
		input  wire        altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset,       // altera_avalon_mm_bridge_reset_reset_bridge_in_reset.reset
		input  wire        eth_10g_mac_csr_reset_reset_bridge_in_reset_reset,               //         eth_10g_mac_csr_reset_reset_bridge_in_reset.reset
		input  wire        rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset,                //          rx_sc_fifo_clk_reset_reset_bridge_in_reset.reset
		input  wire        tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset,                //          tx_sc_fifo_clk_reset_reset_bridge_in_reset.reset
		input  wire [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_address,       //   altera_avalon_mm_bridge_avalon_universal_master_0.address
		output wire        altera_avalon_mm_bridge_avalon_universal_master_0_waitrequest,   //                                                    .waitrequest
		input  wire [2:0]  altera_avalon_mm_bridge_avalon_universal_master_0_burstcount,    //                                                    .burstcount
		input  wire [3:0]  altera_avalon_mm_bridge_avalon_universal_master_0_byteenable,    //                                                    .byteenable
		input  wire        altera_avalon_mm_bridge_avalon_universal_master_0_read,          //                                                    .read
		output wire [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_readdata,      //                                                    .readdata
		output wire        altera_avalon_mm_bridge_avalon_universal_master_0_readdatavalid, //                                                    .readdatavalid
		input  wire        altera_avalon_mm_bridge_avalon_universal_master_0_write,         //                                                    .write
		input  wire [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_writedata,     //                                                    .writedata
		input  wire        altera_avalon_mm_bridge_avalon_universal_master_0_lock,          //                                                    .lock
		input  wire        altera_avalon_mm_bridge_avalon_universal_master_0_debugaccess,   //                                                    .debugaccess
		output wire [8:0]  altera_10gbaser_phy_mgmt_address,                                //                            altera_10gbaser_phy_mgmt.address
		output wire        altera_10gbaser_phy_mgmt_write,                                  //                                                    .write
		output wire        altera_10gbaser_phy_mgmt_read,                                   //                                                    .read
		input  wire [31:0] altera_10gbaser_phy_mgmt_readdata,                               //                                                    .readdata
		output wire [31:0] altera_10gbaser_phy_mgmt_writedata,                              //                                                    .writedata
		input  wire        altera_10gbaser_phy_mgmt_waitrequest,                            //                                                    .waitrequest
		output wire [12:0] eth_10g_mac_csr_address,                                         //                                     eth_10g_mac_csr.address
		output wire        eth_10g_mac_csr_write,                                           //                                                    .write
		output wire        eth_10g_mac_csr_read,                                            //                                                    .read
		input  wire [31:0] eth_10g_mac_csr_readdata,                                        //                                                    .readdata
		output wire [31:0] eth_10g_mac_csr_writedata,                                       //                                                    .writedata
		input  wire        eth_10g_mac_csr_waitrequest,                                     //                                                    .waitrequest
		output wire [3:0]  eth_loopback_composed_csr_address,                               //                           eth_loopback_composed_csr.address
		output wire        eth_loopback_composed_csr_write,                                 //                                                    .write
		output wire        eth_loopback_composed_csr_read,                                  //                                                    .read
		input  wire [31:0] eth_loopback_composed_csr_readdata,                              //                                                    .readdata
		output wire [31:0] eth_loopback_composed_csr_writedata,                             //                                                    .writedata
		input  wire        eth_loopback_composed_csr_waitrequest,                           //                                                    .waitrequest
		output wire [5:0]  eth_mdio_csr_address,                                            //                                        eth_mdio_csr.address
		output wire        eth_mdio_csr_write,                                              //                                                    .write
		output wire        eth_mdio_csr_read,                                               //                                                    .read
		input  wire [31:0] eth_mdio_csr_readdata,                                           //                                                    .readdata
		output wire [31:0] eth_mdio_csr_writedata,                                          //                                                    .writedata
		input  wire        eth_mdio_csr_waitrequest,                                        //                                                    .waitrequest
		output wire [2:0]  rx_sc_fifo_csr_address,                                          //                                      rx_sc_fifo_csr.address
		output wire        rx_sc_fifo_csr_write,                                            //                                                    .write
		output wire        rx_sc_fifo_csr_read,                                             //                                                    .read
		input  wire [31:0] rx_sc_fifo_csr_readdata,                                         //                                                    .readdata
		output wire [31:0] rx_sc_fifo_csr_writedata,                                        //                                                    .writedata
		output wire [2:0]  tx_sc_fifo_csr_address,                                          //                                      tx_sc_fifo_csr.address
		output wire        tx_sc_fifo_csr_write,                                            //                                                    .write
		output wire        tx_sc_fifo_csr_read,                                             //                                                    .read
		input  wire [31:0] tx_sc_fifo_csr_readdata,                                         //                                                    .readdata
		output wire [31:0] tx_sc_fifo_csr_writedata                                         //                                                    .writedata
	);

	wire          altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest;   // altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_waitrequest -> altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_waitrequest
	wire    [2:0] altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount;    // altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_burstcount -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_burstcount
	wire   [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_writedata;     // altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_writedata -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_writedata
	wire   [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_address;       // altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_address -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_address
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_lock;          // altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_lock -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_lock
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_write;         // altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_write -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_write
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_read;          // altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_read -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_read
	wire   [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_readdata;      // altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_readdata -> altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_readdata
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess;   // altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_debugaccess -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_debugaccess
	wire    [3:0] altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable;    // altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_byteenable -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_byteenable
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid; // altera_avalon_mm_bridge_avalon_universal_master_0_agent:av_readdatavalid -> altera_avalon_mm_bridge_avalon_universal_master_0_translator:uav_readdatavalid
	wire          altera_10gbaser_phy_mgmt_agent_m0_waitrequest;                                                        // altera_10gbaser_phy_mgmt_translator:uav_waitrequest -> altera_10gbaser_phy_mgmt_agent:m0_waitrequest
	wire    [2:0] altera_10gbaser_phy_mgmt_agent_m0_burstcount;                                                         // altera_10gbaser_phy_mgmt_agent:m0_burstcount -> altera_10gbaser_phy_mgmt_translator:uav_burstcount
	wire   [31:0] altera_10gbaser_phy_mgmt_agent_m0_writedata;                                                          // altera_10gbaser_phy_mgmt_agent:m0_writedata -> altera_10gbaser_phy_mgmt_translator:uav_writedata
	wire   [31:0] altera_10gbaser_phy_mgmt_agent_m0_address;                                                            // altera_10gbaser_phy_mgmt_agent:m0_address -> altera_10gbaser_phy_mgmt_translator:uav_address
	wire          altera_10gbaser_phy_mgmt_agent_m0_write;                                                              // altera_10gbaser_phy_mgmt_agent:m0_write -> altera_10gbaser_phy_mgmt_translator:uav_write
	wire          altera_10gbaser_phy_mgmt_agent_m0_lock;                                                               // altera_10gbaser_phy_mgmt_agent:m0_lock -> altera_10gbaser_phy_mgmt_translator:uav_lock
	wire          altera_10gbaser_phy_mgmt_agent_m0_read;                                                               // altera_10gbaser_phy_mgmt_agent:m0_read -> altera_10gbaser_phy_mgmt_translator:uav_read
	wire   [31:0] altera_10gbaser_phy_mgmt_agent_m0_readdata;                                                           // altera_10gbaser_phy_mgmt_translator:uav_readdata -> altera_10gbaser_phy_mgmt_agent:m0_readdata
	wire          altera_10gbaser_phy_mgmt_agent_m0_readdatavalid;                                                      // altera_10gbaser_phy_mgmt_translator:uav_readdatavalid -> altera_10gbaser_phy_mgmt_agent:m0_readdatavalid
	wire          altera_10gbaser_phy_mgmt_agent_m0_debugaccess;                                                        // altera_10gbaser_phy_mgmt_agent:m0_debugaccess -> altera_10gbaser_phy_mgmt_translator:uav_debugaccess
	wire    [3:0] altera_10gbaser_phy_mgmt_agent_m0_byteenable;                                                         // altera_10gbaser_phy_mgmt_agent:m0_byteenable -> altera_10gbaser_phy_mgmt_translator:uav_byteenable
	wire          altera_10gbaser_phy_mgmt_agent_rf_source_endofpacket;                                                 // altera_10gbaser_phy_mgmt_agent:rf_source_endofpacket -> altera_10gbaser_phy_mgmt_agent_rsp_fifo:in_endofpacket
	wire          altera_10gbaser_phy_mgmt_agent_rf_source_valid;                                                       // altera_10gbaser_phy_mgmt_agent:rf_source_valid -> altera_10gbaser_phy_mgmt_agent_rsp_fifo:in_valid
	wire          altera_10gbaser_phy_mgmt_agent_rf_source_startofpacket;                                               // altera_10gbaser_phy_mgmt_agent:rf_source_startofpacket -> altera_10gbaser_phy_mgmt_agent_rsp_fifo:in_startofpacket
	wire  [106:0] altera_10gbaser_phy_mgmt_agent_rf_source_data;                                                        // altera_10gbaser_phy_mgmt_agent:rf_source_data -> altera_10gbaser_phy_mgmt_agent_rsp_fifo:in_data
	wire          altera_10gbaser_phy_mgmt_agent_rf_source_ready;                                                       // altera_10gbaser_phy_mgmt_agent_rsp_fifo:in_ready -> altera_10gbaser_phy_mgmt_agent:rf_source_ready
	wire          altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_endofpacket;                                              // altera_10gbaser_phy_mgmt_agent_rsp_fifo:out_endofpacket -> altera_10gbaser_phy_mgmt_agent:rf_sink_endofpacket
	wire          altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_valid;                                                    // altera_10gbaser_phy_mgmt_agent_rsp_fifo:out_valid -> altera_10gbaser_phy_mgmt_agent:rf_sink_valid
	wire          altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_startofpacket;                                            // altera_10gbaser_phy_mgmt_agent_rsp_fifo:out_startofpacket -> altera_10gbaser_phy_mgmt_agent:rf_sink_startofpacket
	wire  [106:0] altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_data;                                                     // altera_10gbaser_phy_mgmt_agent_rsp_fifo:out_data -> altera_10gbaser_phy_mgmt_agent:rf_sink_data
	wire          altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_ready;                                                    // altera_10gbaser_phy_mgmt_agent:rf_sink_ready -> altera_10gbaser_phy_mgmt_agent_rsp_fifo:out_ready
	wire          altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_valid;                                                  // altera_10gbaser_phy_mgmt_agent:rdata_fifo_src_valid -> altera_10gbaser_phy_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_data;                                                   // altera_10gbaser_phy_mgmt_agent:rdata_fifo_src_data -> altera_10gbaser_phy_mgmt_agent:rdata_fifo_sink_data
	wire          altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_ready;                                                  // altera_10gbaser_phy_mgmt_agent:rdata_fifo_sink_ready -> altera_10gbaser_phy_mgmt_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_endofpacket;                                                                              // cmd_mux:src_endofpacket -> altera_10gbaser_phy_mgmt_agent:cp_endofpacket
	wire          cmd_mux_src_valid;                                                                                    // cmd_mux:src_valid -> altera_10gbaser_phy_mgmt_agent:cp_valid
	wire          cmd_mux_src_startofpacket;                                                                            // cmd_mux:src_startofpacket -> altera_10gbaser_phy_mgmt_agent:cp_startofpacket
	wire  [105:0] cmd_mux_src_data;                                                                                     // cmd_mux:src_data -> altera_10gbaser_phy_mgmt_agent:cp_data
	wire    [5:0] cmd_mux_src_channel;                                                                                  // cmd_mux:src_channel -> altera_10gbaser_phy_mgmt_agent:cp_channel
	wire          cmd_mux_src_ready;                                                                                    // altera_10gbaser_phy_mgmt_agent:cp_ready -> cmd_mux:src_ready
	wire          eth_10g_mac_csr_agent_m0_waitrequest;                                                                 // eth_10g_mac_csr_translator:uav_waitrequest -> eth_10g_mac_csr_agent:m0_waitrequest
	wire    [2:0] eth_10g_mac_csr_agent_m0_burstcount;                                                                  // eth_10g_mac_csr_agent:m0_burstcount -> eth_10g_mac_csr_translator:uav_burstcount
	wire   [31:0] eth_10g_mac_csr_agent_m0_writedata;                                                                   // eth_10g_mac_csr_agent:m0_writedata -> eth_10g_mac_csr_translator:uav_writedata
	wire   [31:0] eth_10g_mac_csr_agent_m0_address;                                                                     // eth_10g_mac_csr_agent:m0_address -> eth_10g_mac_csr_translator:uav_address
	wire          eth_10g_mac_csr_agent_m0_write;                                                                       // eth_10g_mac_csr_agent:m0_write -> eth_10g_mac_csr_translator:uav_write
	wire          eth_10g_mac_csr_agent_m0_lock;                                                                        // eth_10g_mac_csr_agent:m0_lock -> eth_10g_mac_csr_translator:uav_lock
	wire          eth_10g_mac_csr_agent_m0_read;                                                                        // eth_10g_mac_csr_agent:m0_read -> eth_10g_mac_csr_translator:uav_read
	wire   [31:0] eth_10g_mac_csr_agent_m0_readdata;                                                                    // eth_10g_mac_csr_translator:uav_readdata -> eth_10g_mac_csr_agent:m0_readdata
	wire          eth_10g_mac_csr_agent_m0_readdatavalid;                                                               // eth_10g_mac_csr_translator:uav_readdatavalid -> eth_10g_mac_csr_agent:m0_readdatavalid
	wire          eth_10g_mac_csr_agent_m0_debugaccess;                                                                 // eth_10g_mac_csr_agent:m0_debugaccess -> eth_10g_mac_csr_translator:uav_debugaccess
	wire    [3:0] eth_10g_mac_csr_agent_m0_byteenable;                                                                  // eth_10g_mac_csr_agent:m0_byteenable -> eth_10g_mac_csr_translator:uav_byteenable
	wire          eth_10g_mac_csr_agent_rf_source_endofpacket;                                                          // eth_10g_mac_csr_agent:rf_source_endofpacket -> eth_10g_mac_csr_agent_rsp_fifo:in_endofpacket
	wire          eth_10g_mac_csr_agent_rf_source_valid;                                                                // eth_10g_mac_csr_agent:rf_source_valid -> eth_10g_mac_csr_agent_rsp_fifo:in_valid
	wire          eth_10g_mac_csr_agent_rf_source_startofpacket;                                                        // eth_10g_mac_csr_agent:rf_source_startofpacket -> eth_10g_mac_csr_agent_rsp_fifo:in_startofpacket
	wire  [106:0] eth_10g_mac_csr_agent_rf_source_data;                                                                 // eth_10g_mac_csr_agent:rf_source_data -> eth_10g_mac_csr_agent_rsp_fifo:in_data
	wire          eth_10g_mac_csr_agent_rf_source_ready;                                                                // eth_10g_mac_csr_agent_rsp_fifo:in_ready -> eth_10g_mac_csr_agent:rf_source_ready
	wire          eth_10g_mac_csr_agent_rsp_fifo_out_endofpacket;                                                       // eth_10g_mac_csr_agent_rsp_fifo:out_endofpacket -> eth_10g_mac_csr_agent:rf_sink_endofpacket
	wire          eth_10g_mac_csr_agent_rsp_fifo_out_valid;                                                             // eth_10g_mac_csr_agent_rsp_fifo:out_valid -> eth_10g_mac_csr_agent:rf_sink_valid
	wire          eth_10g_mac_csr_agent_rsp_fifo_out_startofpacket;                                                     // eth_10g_mac_csr_agent_rsp_fifo:out_startofpacket -> eth_10g_mac_csr_agent:rf_sink_startofpacket
	wire  [106:0] eth_10g_mac_csr_agent_rsp_fifo_out_data;                                                              // eth_10g_mac_csr_agent_rsp_fifo:out_data -> eth_10g_mac_csr_agent:rf_sink_data
	wire          eth_10g_mac_csr_agent_rsp_fifo_out_ready;                                                             // eth_10g_mac_csr_agent:rf_sink_ready -> eth_10g_mac_csr_agent_rsp_fifo:out_ready
	wire          eth_10g_mac_csr_agent_rdata_fifo_src_valid;                                                           // eth_10g_mac_csr_agent:rdata_fifo_src_valid -> eth_10g_mac_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_10g_mac_csr_agent_rdata_fifo_src_data;                                                            // eth_10g_mac_csr_agent:rdata_fifo_src_data -> eth_10g_mac_csr_agent:rdata_fifo_sink_data
	wire          eth_10g_mac_csr_agent_rdata_fifo_src_ready;                                                           // eth_10g_mac_csr_agent:rdata_fifo_sink_ready -> eth_10g_mac_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_endofpacket;                                                                          // cmd_mux_001:src_endofpacket -> eth_10g_mac_csr_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                // cmd_mux_001:src_valid -> eth_10g_mac_csr_agent:cp_valid
	wire          cmd_mux_001_src_startofpacket;                                                                        // cmd_mux_001:src_startofpacket -> eth_10g_mac_csr_agent:cp_startofpacket
	wire  [105:0] cmd_mux_001_src_data;                                                                                 // cmd_mux_001:src_data -> eth_10g_mac_csr_agent:cp_data
	wire    [5:0] cmd_mux_001_src_channel;                                                                              // cmd_mux_001:src_channel -> eth_10g_mac_csr_agent:cp_channel
	wire          cmd_mux_001_src_ready;                                                                                // eth_10g_mac_csr_agent:cp_ready -> cmd_mux_001:src_ready
	wire          eth_loopback_composed_csr_agent_m0_waitrequest;                                                       // eth_loopback_composed_csr_translator:uav_waitrequest -> eth_loopback_composed_csr_agent:m0_waitrequest
	wire    [2:0] eth_loopback_composed_csr_agent_m0_burstcount;                                                        // eth_loopback_composed_csr_agent:m0_burstcount -> eth_loopback_composed_csr_translator:uav_burstcount
	wire   [31:0] eth_loopback_composed_csr_agent_m0_writedata;                                                         // eth_loopback_composed_csr_agent:m0_writedata -> eth_loopback_composed_csr_translator:uav_writedata
	wire   [31:0] eth_loopback_composed_csr_agent_m0_address;                                                           // eth_loopback_composed_csr_agent:m0_address -> eth_loopback_composed_csr_translator:uav_address
	wire          eth_loopback_composed_csr_agent_m0_write;                                                             // eth_loopback_composed_csr_agent:m0_write -> eth_loopback_composed_csr_translator:uav_write
	wire          eth_loopback_composed_csr_agent_m0_lock;                                                              // eth_loopback_composed_csr_agent:m0_lock -> eth_loopback_composed_csr_translator:uav_lock
	wire          eth_loopback_composed_csr_agent_m0_read;                                                              // eth_loopback_composed_csr_agent:m0_read -> eth_loopback_composed_csr_translator:uav_read
	wire   [31:0] eth_loopback_composed_csr_agent_m0_readdata;                                                          // eth_loopback_composed_csr_translator:uav_readdata -> eth_loopback_composed_csr_agent:m0_readdata
	wire          eth_loopback_composed_csr_agent_m0_readdatavalid;                                                     // eth_loopback_composed_csr_translator:uav_readdatavalid -> eth_loopback_composed_csr_agent:m0_readdatavalid
	wire          eth_loopback_composed_csr_agent_m0_debugaccess;                                                       // eth_loopback_composed_csr_agent:m0_debugaccess -> eth_loopback_composed_csr_translator:uav_debugaccess
	wire    [3:0] eth_loopback_composed_csr_agent_m0_byteenable;                                                        // eth_loopback_composed_csr_agent:m0_byteenable -> eth_loopback_composed_csr_translator:uav_byteenable
	wire          eth_loopback_composed_csr_agent_rf_source_endofpacket;                                                // eth_loopback_composed_csr_agent:rf_source_endofpacket -> eth_loopback_composed_csr_agent_rsp_fifo:in_endofpacket
	wire          eth_loopback_composed_csr_agent_rf_source_valid;                                                      // eth_loopback_composed_csr_agent:rf_source_valid -> eth_loopback_composed_csr_agent_rsp_fifo:in_valid
	wire          eth_loopback_composed_csr_agent_rf_source_startofpacket;                                              // eth_loopback_composed_csr_agent:rf_source_startofpacket -> eth_loopback_composed_csr_agent_rsp_fifo:in_startofpacket
	wire  [106:0] eth_loopback_composed_csr_agent_rf_source_data;                                                       // eth_loopback_composed_csr_agent:rf_source_data -> eth_loopback_composed_csr_agent_rsp_fifo:in_data
	wire          eth_loopback_composed_csr_agent_rf_source_ready;                                                      // eth_loopback_composed_csr_agent_rsp_fifo:in_ready -> eth_loopback_composed_csr_agent:rf_source_ready
	wire          eth_loopback_composed_csr_agent_rsp_fifo_out_endofpacket;                                             // eth_loopback_composed_csr_agent_rsp_fifo:out_endofpacket -> eth_loopback_composed_csr_agent:rf_sink_endofpacket
	wire          eth_loopback_composed_csr_agent_rsp_fifo_out_valid;                                                   // eth_loopback_composed_csr_agent_rsp_fifo:out_valid -> eth_loopback_composed_csr_agent:rf_sink_valid
	wire          eth_loopback_composed_csr_agent_rsp_fifo_out_startofpacket;                                           // eth_loopback_composed_csr_agent_rsp_fifo:out_startofpacket -> eth_loopback_composed_csr_agent:rf_sink_startofpacket
	wire  [106:0] eth_loopback_composed_csr_agent_rsp_fifo_out_data;                                                    // eth_loopback_composed_csr_agent_rsp_fifo:out_data -> eth_loopback_composed_csr_agent:rf_sink_data
	wire          eth_loopback_composed_csr_agent_rsp_fifo_out_ready;                                                   // eth_loopback_composed_csr_agent:rf_sink_ready -> eth_loopback_composed_csr_agent_rsp_fifo:out_ready
	wire          eth_loopback_composed_csr_agent_rdata_fifo_src_valid;                                                 // eth_loopback_composed_csr_agent:rdata_fifo_src_valid -> eth_loopback_composed_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_loopback_composed_csr_agent_rdata_fifo_src_data;                                                  // eth_loopback_composed_csr_agent:rdata_fifo_src_data -> eth_loopback_composed_csr_agent:rdata_fifo_sink_data
	wire          eth_loopback_composed_csr_agent_rdata_fifo_src_ready;                                                 // eth_loopback_composed_csr_agent:rdata_fifo_sink_ready -> eth_loopback_composed_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_endofpacket;                                                                          // cmd_mux_002:src_endofpacket -> eth_loopback_composed_csr_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                // cmd_mux_002:src_valid -> eth_loopback_composed_csr_agent:cp_valid
	wire          cmd_mux_002_src_startofpacket;                                                                        // cmd_mux_002:src_startofpacket -> eth_loopback_composed_csr_agent:cp_startofpacket
	wire  [105:0] cmd_mux_002_src_data;                                                                                 // cmd_mux_002:src_data -> eth_loopback_composed_csr_agent:cp_data
	wire    [5:0] cmd_mux_002_src_channel;                                                                              // cmd_mux_002:src_channel -> eth_loopback_composed_csr_agent:cp_channel
	wire          cmd_mux_002_src_ready;                                                                                // eth_loopback_composed_csr_agent:cp_ready -> cmd_mux_002:src_ready
	wire          tx_sc_fifo_csr_agent_m0_waitrequest;                                                                  // tx_sc_fifo_csr_translator:uav_waitrequest -> tx_sc_fifo_csr_agent:m0_waitrequest
	wire    [2:0] tx_sc_fifo_csr_agent_m0_burstcount;                                                                   // tx_sc_fifo_csr_agent:m0_burstcount -> tx_sc_fifo_csr_translator:uav_burstcount
	wire   [31:0] tx_sc_fifo_csr_agent_m0_writedata;                                                                    // tx_sc_fifo_csr_agent:m0_writedata -> tx_sc_fifo_csr_translator:uav_writedata
	wire   [31:0] tx_sc_fifo_csr_agent_m0_address;                                                                      // tx_sc_fifo_csr_agent:m0_address -> tx_sc_fifo_csr_translator:uav_address
	wire          tx_sc_fifo_csr_agent_m0_write;                                                                        // tx_sc_fifo_csr_agent:m0_write -> tx_sc_fifo_csr_translator:uav_write
	wire          tx_sc_fifo_csr_agent_m0_lock;                                                                         // tx_sc_fifo_csr_agent:m0_lock -> tx_sc_fifo_csr_translator:uav_lock
	wire          tx_sc_fifo_csr_agent_m0_read;                                                                         // tx_sc_fifo_csr_agent:m0_read -> tx_sc_fifo_csr_translator:uav_read
	wire   [31:0] tx_sc_fifo_csr_agent_m0_readdata;                                                                     // tx_sc_fifo_csr_translator:uav_readdata -> tx_sc_fifo_csr_agent:m0_readdata
	wire          tx_sc_fifo_csr_agent_m0_readdatavalid;                                                                // tx_sc_fifo_csr_translator:uav_readdatavalid -> tx_sc_fifo_csr_agent:m0_readdatavalid
	wire          tx_sc_fifo_csr_agent_m0_debugaccess;                                                                  // tx_sc_fifo_csr_agent:m0_debugaccess -> tx_sc_fifo_csr_translator:uav_debugaccess
	wire    [3:0] tx_sc_fifo_csr_agent_m0_byteenable;                                                                   // tx_sc_fifo_csr_agent:m0_byteenable -> tx_sc_fifo_csr_translator:uav_byteenable
	wire          tx_sc_fifo_csr_agent_rf_source_endofpacket;                                                           // tx_sc_fifo_csr_agent:rf_source_endofpacket -> tx_sc_fifo_csr_agent_rsp_fifo:in_endofpacket
	wire          tx_sc_fifo_csr_agent_rf_source_valid;                                                                 // tx_sc_fifo_csr_agent:rf_source_valid -> tx_sc_fifo_csr_agent_rsp_fifo:in_valid
	wire          tx_sc_fifo_csr_agent_rf_source_startofpacket;                                                         // tx_sc_fifo_csr_agent:rf_source_startofpacket -> tx_sc_fifo_csr_agent_rsp_fifo:in_startofpacket
	wire  [106:0] tx_sc_fifo_csr_agent_rf_source_data;                                                                  // tx_sc_fifo_csr_agent:rf_source_data -> tx_sc_fifo_csr_agent_rsp_fifo:in_data
	wire          tx_sc_fifo_csr_agent_rf_source_ready;                                                                 // tx_sc_fifo_csr_agent_rsp_fifo:in_ready -> tx_sc_fifo_csr_agent:rf_source_ready
	wire          tx_sc_fifo_csr_agent_rsp_fifo_out_endofpacket;                                                        // tx_sc_fifo_csr_agent_rsp_fifo:out_endofpacket -> tx_sc_fifo_csr_agent:rf_sink_endofpacket
	wire          tx_sc_fifo_csr_agent_rsp_fifo_out_valid;                                                              // tx_sc_fifo_csr_agent_rsp_fifo:out_valid -> tx_sc_fifo_csr_agent:rf_sink_valid
	wire          tx_sc_fifo_csr_agent_rsp_fifo_out_startofpacket;                                                      // tx_sc_fifo_csr_agent_rsp_fifo:out_startofpacket -> tx_sc_fifo_csr_agent:rf_sink_startofpacket
	wire  [106:0] tx_sc_fifo_csr_agent_rsp_fifo_out_data;                                                               // tx_sc_fifo_csr_agent_rsp_fifo:out_data -> tx_sc_fifo_csr_agent:rf_sink_data
	wire          tx_sc_fifo_csr_agent_rsp_fifo_out_ready;                                                              // tx_sc_fifo_csr_agent:rf_sink_ready -> tx_sc_fifo_csr_agent_rsp_fifo:out_ready
	wire          tx_sc_fifo_csr_agent_rdata_fifo_src_valid;                                                            // tx_sc_fifo_csr_agent:rdata_fifo_src_valid -> tx_sc_fifo_csr_agent_rdata_fifo:in_valid
	wire   [33:0] tx_sc_fifo_csr_agent_rdata_fifo_src_data;                                                             // tx_sc_fifo_csr_agent:rdata_fifo_src_data -> tx_sc_fifo_csr_agent_rdata_fifo:in_data
	wire          tx_sc_fifo_csr_agent_rdata_fifo_src_ready;                                                            // tx_sc_fifo_csr_agent_rdata_fifo:in_ready -> tx_sc_fifo_csr_agent:rdata_fifo_src_ready
	wire          tx_sc_fifo_csr_agent_rdata_fifo_out_valid;                                                            // tx_sc_fifo_csr_agent_rdata_fifo:out_valid -> tx_sc_fifo_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] tx_sc_fifo_csr_agent_rdata_fifo_out_data;                                                             // tx_sc_fifo_csr_agent_rdata_fifo:out_data -> tx_sc_fifo_csr_agent:rdata_fifo_sink_data
	wire          tx_sc_fifo_csr_agent_rdata_fifo_out_ready;                                                            // tx_sc_fifo_csr_agent:rdata_fifo_sink_ready -> tx_sc_fifo_csr_agent_rdata_fifo:out_ready
	wire          cmd_mux_003_src_endofpacket;                                                                          // cmd_mux_003:src_endofpacket -> tx_sc_fifo_csr_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                // cmd_mux_003:src_valid -> tx_sc_fifo_csr_agent:cp_valid
	wire          cmd_mux_003_src_startofpacket;                                                                        // cmd_mux_003:src_startofpacket -> tx_sc_fifo_csr_agent:cp_startofpacket
	wire  [105:0] cmd_mux_003_src_data;                                                                                 // cmd_mux_003:src_data -> tx_sc_fifo_csr_agent:cp_data
	wire    [5:0] cmd_mux_003_src_channel;                                                                              // cmd_mux_003:src_channel -> tx_sc_fifo_csr_agent:cp_channel
	wire          cmd_mux_003_src_ready;                                                                                // tx_sc_fifo_csr_agent:cp_ready -> cmd_mux_003:src_ready
	wire          rx_sc_fifo_csr_agent_m0_waitrequest;                                                                  // rx_sc_fifo_csr_translator:uav_waitrequest -> rx_sc_fifo_csr_agent:m0_waitrequest
	wire    [2:0] rx_sc_fifo_csr_agent_m0_burstcount;                                                                   // rx_sc_fifo_csr_agent:m0_burstcount -> rx_sc_fifo_csr_translator:uav_burstcount
	wire   [31:0] rx_sc_fifo_csr_agent_m0_writedata;                                                                    // rx_sc_fifo_csr_agent:m0_writedata -> rx_sc_fifo_csr_translator:uav_writedata
	wire   [31:0] rx_sc_fifo_csr_agent_m0_address;                                                                      // rx_sc_fifo_csr_agent:m0_address -> rx_sc_fifo_csr_translator:uav_address
	wire          rx_sc_fifo_csr_agent_m0_write;                                                                        // rx_sc_fifo_csr_agent:m0_write -> rx_sc_fifo_csr_translator:uav_write
	wire          rx_sc_fifo_csr_agent_m0_lock;                                                                         // rx_sc_fifo_csr_agent:m0_lock -> rx_sc_fifo_csr_translator:uav_lock
	wire          rx_sc_fifo_csr_agent_m0_read;                                                                         // rx_sc_fifo_csr_agent:m0_read -> rx_sc_fifo_csr_translator:uav_read
	wire   [31:0] rx_sc_fifo_csr_agent_m0_readdata;                                                                     // rx_sc_fifo_csr_translator:uav_readdata -> rx_sc_fifo_csr_agent:m0_readdata
	wire          rx_sc_fifo_csr_agent_m0_readdatavalid;                                                                // rx_sc_fifo_csr_translator:uav_readdatavalid -> rx_sc_fifo_csr_agent:m0_readdatavalid
	wire          rx_sc_fifo_csr_agent_m0_debugaccess;                                                                  // rx_sc_fifo_csr_agent:m0_debugaccess -> rx_sc_fifo_csr_translator:uav_debugaccess
	wire    [3:0] rx_sc_fifo_csr_agent_m0_byteenable;                                                                   // rx_sc_fifo_csr_agent:m0_byteenable -> rx_sc_fifo_csr_translator:uav_byteenable
	wire          rx_sc_fifo_csr_agent_rf_source_endofpacket;                                                           // rx_sc_fifo_csr_agent:rf_source_endofpacket -> rx_sc_fifo_csr_agent_rsp_fifo:in_endofpacket
	wire          rx_sc_fifo_csr_agent_rf_source_valid;                                                                 // rx_sc_fifo_csr_agent:rf_source_valid -> rx_sc_fifo_csr_agent_rsp_fifo:in_valid
	wire          rx_sc_fifo_csr_agent_rf_source_startofpacket;                                                         // rx_sc_fifo_csr_agent:rf_source_startofpacket -> rx_sc_fifo_csr_agent_rsp_fifo:in_startofpacket
	wire  [106:0] rx_sc_fifo_csr_agent_rf_source_data;                                                                  // rx_sc_fifo_csr_agent:rf_source_data -> rx_sc_fifo_csr_agent_rsp_fifo:in_data
	wire          rx_sc_fifo_csr_agent_rf_source_ready;                                                                 // rx_sc_fifo_csr_agent_rsp_fifo:in_ready -> rx_sc_fifo_csr_agent:rf_source_ready
	wire          rx_sc_fifo_csr_agent_rsp_fifo_out_endofpacket;                                                        // rx_sc_fifo_csr_agent_rsp_fifo:out_endofpacket -> rx_sc_fifo_csr_agent:rf_sink_endofpacket
	wire          rx_sc_fifo_csr_agent_rsp_fifo_out_valid;                                                              // rx_sc_fifo_csr_agent_rsp_fifo:out_valid -> rx_sc_fifo_csr_agent:rf_sink_valid
	wire          rx_sc_fifo_csr_agent_rsp_fifo_out_startofpacket;                                                      // rx_sc_fifo_csr_agent_rsp_fifo:out_startofpacket -> rx_sc_fifo_csr_agent:rf_sink_startofpacket
	wire  [106:0] rx_sc_fifo_csr_agent_rsp_fifo_out_data;                                                               // rx_sc_fifo_csr_agent_rsp_fifo:out_data -> rx_sc_fifo_csr_agent:rf_sink_data
	wire          rx_sc_fifo_csr_agent_rsp_fifo_out_ready;                                                              // rx_sc_fifo_csr_agent:rf_sink_ready -> rx_sc_fifo_csr_agent_rsp_fifo:out_ready
	wire          rx_sc_fifo_csr_agent_rdata_fifo_src_valid;                                                            // rx_sc_fifo_csr_agent:rdata_fifo_src_valid -> rx_sc_fifo_csr_agent_rdata_fifo:in_valid
	wire   [33:0] rx_sc_fifo_csr_agent_rdata_fifo_src_data;                                                             // rx_sc_fifo_csr_agent:rdata_fifo_src_data -> rx_sc_fifo_csr_agent_rdata_fifo:in_data
	wire          rx_sc_fifo_csr_agent_rdata_fifo_src_ready;                                                            // rx_sc_fifo_csr_agent_rdata_fifo:in_ready -> rx_sc_fifo_csr_agent:rdata_fifo_src_ready
	wire          rx_sc_fifo_csr_agent_rdata_fifo_out_valid;                                                            // rx_sc_fifo_csr_agent_rdata_fifo:out_valid -> rx_sc_fifo_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] rx_sc_fifo_csr_agent_rdata_fifo_out_data;                                                             // rx_sc_fifo_csr_agent_rdata_fifo:out_data -> rx_sc_fifo_csr_agent:rdata_fifo_sink_data
	wire          rx_sc_fifo_csr_agent_rdata_fifo_out_ready;                                                            // rx_sc_fifo_csr_agent:rdata_fifo_sink_ready -> rx_sc_fifo_csr_agent_rdata_fifo:out_ready
	wire          cmd_mux_004_src_endofpacket;                                                                          // cmd_mux_004:src_endofpacket -> rx_sc_fifo_csr_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                // cmd_mux_004:src_valid -> rx_sc_fifo_csr_agent:cp_valid
	wire          cmd_mux_004_src_startofpacket;                                                                        // cmd_mux_004:src_startofpacket -> rx_sc_fifo_csr_agent:cp_startofpacket
	wire  [105:0] cmd_mux_004_src_data;                                                                                 // cmd_mux_004:src_data -> rx_sc_fifo_csr_agent:cp_data
	wire    [5:0] cmd_mux_004_src_channel;                                                                              // cmd_mux_004:src_channel -> rx_sc_fifo_csr_agent:cp_channel
	wire          cmd_mux_004_src_ready;                                                                                // rx_sc_fifo_csr_agent:cp_ready -> cmd_mux_004:src_ready
	wire          eth_mdio_csr_agent_m0_waitrequest;                                                                    // eth_mdio_csr_translator:uav_waitrequest -> eth_mdio_csr_agent:m0_waitrequest
	wire    [2:0] eth_mdio_csr_agent_m0_burstcount;                                                                     // eth_mdio_csr_agent:m0_burstcount -> eth_mdio_csr_translator:uav_burstcount
	wire   [31:0] eth_mdio_csr_agent_m0_writedata;                                                                      // eth_mdio_csr_agent:m0_writedata -> eth_mdio_csr_translator:uav_writedata
	wire   [31:0] eth_mdio_csr_agent_m0_address;                                                                        // eth_mdio_csr_agent:m0_address -> eth_mdio_csr_translator:uav_address
	wire          eth_mdio_csr_agent_m0_write;                                                                          // eth_mdio_csr_agent:m0_write -> eth_mdio_csr_translator:uav_write
	wire          eth_mdio_csr_agent_m0_lock;                                                                           // eth_mdio_csr_agent:m0_lock -> eth_mdio_csr_translator:uav_lock
	wire          eth_mdio_csr_agent_m0_read;                                                                           // eth_mdio_csr_agent:m0_read -> eth_mdio_csr_translator:uav_read
	wire   [31:0] eth_mdio_csr_agent_m0_readdata;                                                                       // eth_mdio_csr_translator:uav_readdata -> eth_mdio_csr_agent:m0_readdata
	wire          eth_mdio_csr_agent_m0_readdatavalid;                                                                  // eth_mdio_csr_translator:uav_readdatavalid -> eth_mdio_csr_agent:m0_readdatavalid
	wire          eth_mdio_csr_agent_m0_debugaccess;                                                                    // eth_mdio_csr_agent:m0_debugaccess -> eth_mdio_csr_translator:uav_debugaccess
	wire    [3:0] eth_mdio_csr_agent_m0_byteenable;                                                                     // eth_mdio_csr_agent:m0_byteenable -> eth_mdio_csr_translator:uav_byteenable
	wire          eth_mdio_csr_agent_rf_source_endofpacket;                                                             // eth_mdio_csr_agent:rf_source_endofpacket -> eth_mdio_csr_agent_rsp_fifo:in_endofpacket
	wire          eth_mdio_csr_agent_rf_source_valid;                                                                   // eth_mdio_csr_agent:rf_source_valid -> eth_mdio_csr_agent_rsp_fifo:in_valid
	wire          eth_mdio_csr_agent_rf_source_startofpacket;                                                           // eth_mdio_csr_agent:rf_source_startofpacket -> eth_mdio_csr_agent_rsp_fifo:in_startofpacket
	wire  [106:0] eth_mdio_csr_agent_rf_source_data;                                                                    // eth_mdio_csr_agent:rf_source_data -> eth_mdio_csr_agent_rsp_fifo:in_data
	wire          eth_mdio_csr_agent_rf_source_ready;                                                                   // eth_mdio_csr_agent_rsp_fifo:in_ready -> eth_mdio_csr_agent:rf_source_ready
	wire          eth_mdio_csr_agent_rsp_fifo_out_endofpacket;                                                          // eth_mdio_csr_agent_rsp_fifo:out_endofpacket -> eth_mdio_csr_agent:rf_sink_endofpacket
	wire          eth_mdio_csr_agent_rsp_fifo_out_valid;                                                                // eth_mdio_csr_agent_rsp_fifo:out_valid -> eth_mdio_csr_agent:rf_sink_valid
	wire          eth_mdio_csr_agent_rsp_fifo_out_startofpacket;                                                        // eth_mdio_csr_agent_rsp_fifo:out_startofpacket -> eth_mdio_csr_agent:rf_sink_startofpacket
	wire  [106:0] eth_mdio_csr_agent_rsp_fifo_out_data;                                                                 // eth_mdio_csr_agent_rsp_fifo:out_data -> eth_mdio_csr_agent:rf_sink_data
	wire          eth_mdio_csr_agent_rsp_fifo_out_ready;                                                                // eth_mdio_csr_agent:rf_sink_ready -> eth_mdio_csr_agent_rsp_fifo:out_ready
	wire          eth_mdio_csr_agent_rdata_fifo_src_valid;                                                              // eth_mdio_csr_agent:rdata_fifo_src_valid -> eth_mdio_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] eth_mdio_csr_agent_rdata_fifo_src_data;                                                               // eth_mdio_csr_agent:rdata_fifo_src_data -> eth_mdio_csr_agent:rdata_fifo_sink_data
	wire          eth_mdio_csr_agent_rdata_fifo_src_ready;                                                              // eth_mdio_csr_agent:rdata_fifo_sink_ready -> eth_mdio_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_endofpacket;                                                                          // cmd_mux_005:src_endofpacket -> eth_mdio_csr_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                // cmd_mux_005:src_valid -> eth_mdio_csr_agent:cp_valid
	wire          cmd_mux_005_src_startofpacket;                                                                        // cmd_mux_005:src_startofpacket -> eth_mdio_csr_agent:cp_startofpacket
	wire  [105:0] cmd_mux_005_src_data;                                                                                 // cmd_mux_005:src_data -> eth_mdio_csr_agent:cp_data
	wire    [5:0] cmd_mux_005_src_channel;                                                                              // cmd_mux_005:src_channel -> eth_mdio_csr_agent:cp_channel
	wire          cmd_mux_005_src_ready;                                                                                // eth_mdio_csr_agent:cp_ready -> cmd_mux_005:src_ready
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_endofpacket;                               // altera_avalon_mm_bridge_avalon_universal_master_0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_valid;                                     // altera_avalon_mm_bridge_avalon_universal_master_0_agent:cp_valid -> router:sink_valid
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_startofpacket;                             // altera_avalon_mm_bridge_avalon_universal_master_0_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [105:0] altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_data;                                      // altera_avalon_mm_bridge_avalon_universal_master_0_agent:cp_data -> router:sink_data
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_ready;                                     // router:sink_ready -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:cp_ready
	wire          altera_10gbaser_phy_mgmt_agent_rp_endofpacket;                                                        // altera_10gbaser_phy_mgmt_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          altera_10gbaser_phy_mgmt_agent_rp_valid;                                                              // altera_10gbaser_phy_mgmt_agent:rp_valid -> router_001:sink_valid
	wire          altera_10gbaser_phy_mgmt_agent_rp_startofpacket;                                                      // altera_10gbaser_phy_mgmt_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [105:0] altera_10gbaser_phy_mgmt_agent_rp_data;                                                               // altera_10gbaser_phy_mgmt_agent:rp_data -> router_001:sink_data
	wire          altera_10gbaser_phy_mgmt_agent_rp_ready;                                                              // router_001:sink_ready -> altera_10gbaser_phy_mgmt_agent:rp_ready
	wire          router_001_src_endofpacket;                                                                           // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_001_src_valid;                                                                                 // router_001:src_valid -> rsp_demux:sink_valid
	wire          router_001_src_startofpacket;                                                                         // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [105:0] router_001_src_data;                                                                                  // router_001:src_data -> rsp_demux:sink_data
	wire    [5:0] router_001_src_channel;                                                                               // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_ready;                                                                                 // rsp_demux:sink_ready -> router_001:src_ready
	wire          eth_10g_mac_csr_agent_rp_endofpacket;                                                                 // eth_10g_mac_csr_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          eth_10g_mac_csr_agent_rp_valid;                                                                       // eth_10g_mac_csr_agent:rp_valid -> router_002:sink_valid
	wire          eth_10g_mac_csr_agent_rp_startofpacket;                                                               // eth_10g_mac_csr_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [105:0] eth_10g_mac_csr_agent_rp_data;                                                                        // eth_10g_mac_csr_agent:rp_data -> router_002:sink_data
	wire          eth_10g_mac_csr_agent_rp_ready;                                                                       // router_002:sink_ready -> eth_10g_mac_csr_agent:rp_ready
	wire          router_002_src_endofpacket;                                                                           // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                                                 // router_002:src_valid -> rsp_demux_001:sink_valid
	wire          router_002_src_startofpacket;                                                                         // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [105:0] router_002_src_data;                                                                                  // router_002:src_data -> rsp_demux_001:sink_data
	wire    [5:0] router_002_src_channel;                                                                               // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_ready;                                                                                 // rsp_demux_001:sink_ready -> router_002:src_ready
	wire          eth_loopback_composed_csr_agent_rp_endofpacket;                                                       // eth_loopback_composed_csr_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          eth_loopback_composed_csr_agent_rp_valid;                                                             // eth_loopback_composed_csr_agent:rp_valid -> router_003:sink_valid
	wire          eth_loopback_composed_csr_agent_rp_startofpacket;                                                     // eth_loopback_composed_csr_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [105:0] eth_loopback_composed_csr_agent_rp_data;                                                              // eth_loopback_composed_csr_agent:rp_data -> router_003:sink_data
	wire          eth_loopback_composed_csr_agent_rp_ready;                                                             // router_003:sink_ready -> eth_loopback_composed_csr_agent:rp_ready
	wire          router_003_src_endofpacket;                                                                           // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                                                                 // router_003:src_valid -> rsp_demux_002:sink_valid
	wire          router_003_src_startofpacket;                                                                         // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [105:0] router_003_src_data;                                                                                  // router_003:src_data -> rsp_demux_002:sink_data
	wire    [5:0] router_003_src_channel;                                                                               // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_ready;                                                                                 // rsp_demux_002:sink_ready -> router_003:src_ready
	wire          tx_sc_fifo_csr_agent_rp_endofpacket;                                                                  // tx_sc_fifo_csr_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          tx_sc_fifo_csr_agent_rp_valid;                                                                        // tx_sc_fifo_csr_agent:rp_valid -> router_004:sink_valid
	wire          tx_sc_fifo_csr_agent_rp_startofpacket;                                                                // tx_sc_fifo_csr_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [105:0] tx_sc_fifo_csr_agent_rp_data;                                                                         // tx_sc_fifo_csr_agent:rp_data -> router_004:sink_data
	wire          tx_sc_fifo_csr_agent_rp_ready;                                                                        // router_004:sink_ready -> tx_sc_fifo_csr_agent:rp_ready
	wire          router_004_src_endofpacket;                                                                           // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_004_src_valid;                                                                                 // router_004:src_valid -> rsp_demux_003:sink_valid
	wire          router_004_src_startofpacket;                                                                         // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [105:0] router_004_src_data;                                                                                  // router_004:src_data -> rsp_demux_003:sink_data
	wire    [5:0] router_004_src_channel;                                                                               // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_ready;                                                                                 // rsp_demux_003:sink_ready -> router_004:src_ready
	wire          rx_sc_fifo_csr_agent_rp_endofpacket;                                                                  // rx_sc_fifo_csr_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          rx_sc_fifo_csr_agent_rp_valid;                                                                        // rx_sc_fifo_csr_agent:rp_valid -> router_005:sink_valid
	wire          rx_sc_fifo_csr_agent_rp_startofpacket;                                                                // rx_sc_fifo_csr_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [105:0] rx_sc_fifo_csr_agent_rp_data;                                                                         // rx_sc_fifo_csr_agent:rp_data -> router_005:sink_data
	wire          rx_sc_fifo_csr_agent_rp_ready;                                                                        // router_005:sink_ready -> rx_sc_fifo_csr_agent:rp_ready
	wire          router_005_src_endofpacket;                                                                           // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_005_src_valid;                                                                                 // router_005:src_valid -> rsp_demux_004:sink_valid
	wire          router_005_src_startofpacket;                                                                         // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [105:0] router_005_src_data;                                                                                  // router_005:src_data -> rsp_demux_004:sink_data
	wire    [5:0] router_005_src_channel;                                                                               // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_ready;                                                                                 // rsp_demux_004:sink_ready -> router_005:src_ready
	wire          eth_mdio_csr_agent_rp_endofpacket;                                                                    // eth_mdio_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          eth_mdio_csr_agent_rp_valid;                                                                          // eth_mdio_csr_agent:rp_valid -> router_006:sink_valid
	wire          eth_mdio_csr_agent_rp_startofpacket;                                                                  // eth_mdio_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [105:0] eth_mdio_csr_agent_rp_data;                                                                           // eth_mdio_csr_agent:rp_data -> router_006:sink_data
	wire          eth_mdio_csr_agent_rp_ready;                                                                          // router_006:sink_ready -> eth_mdio_csr_agent:rp_ready
	wire          router_006_src_endofpacket;                                                                           // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_006_src_valid;                                                                                 // router_006:src_valid -> rsp_demux_005:sink_valid
	wire          router_006_src_startofpacket;                                                                         // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [105:0] router_006_src_data;                                                                                  // router_006:src_data -> rsp_demux_005:sink_data
	wire    [5:0] router_006_src_channel;                                                                               // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_ready;                                                                                 // rsp_demux_005:sink_ready -> router_006:src_ready
	wire          router_src_endofpacket;                                                                               // router:src_endofpacket -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                                                     // router:src_valid -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                                                             // router:src_startofpacket -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_sink_startofpacket
	wire  [105:0] router_src_data;                                                                                      // router:src_data -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_sink_data
	wire    [5:0] router_src_channel;                                                                                   // router:src_channel -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_sink_channel
	wire          router_src_ready;                                                                                     // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_sink_ready -> router:src_ready
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_endofpacket;                        // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_startofpacket;                      // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [105:0] altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_data;                               // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire    [5:0] altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_channel;                            // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                                                              // rsp_mux:src_endofpacket -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                                                    // rsp_mux:src_valid -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                                                            // rsp_mux:src_startofpacket -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_sink_startofpacket
	wire  [105:0] rsp_mux_src_data;                                                                                     // rsp_mux:src_data -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_sink_data
	wire    [5:0] rsp_mux_src_channel;                                                                                  // rsp_mux:src_channel -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                                                    // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_endofpacket;                        // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_src_endofpacket -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:rp_endofpacket
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_valid;                              // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_src_valid -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:rp_valid
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_startofpacket;                      // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_src_startofpacket -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:rp_startofpacket
	wire  [105:0] altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_data;                               // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_src_data -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:rp_data
	wire    [5:0] altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_channel;                            // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_src_channel -> altera_avalon_mm_bridge_avalon_universal_master_0_agent:rp_channel
	wire          altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_ready;                              // altera_avalon_mm_bridge_avalon_universal_master_0_agent:rp_ready -> altera_avalon_mm_bridge_avalon_universal_master_0_limiter:rsp_src_ready
	wire          cmd_demux_src0_endofpacket;                                                                           // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                                                 // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                                                         // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [105:0] cmd_demux_src0_data;                                                                                  // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire    [5:0] cmd_demux_src0_channel;                                                                               // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                                                 // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                                                           // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                                                 // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                                                         // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [105:0] cmd_demux_src1_data;                                                                                  // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire    [5:0] cmd_demux_src1_channel;                                                                               // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                                                                 // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          cmd_demux_src2_endofpacket;                                                                           // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                                 // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_src2_startofpacket;                                                                         // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [105:0] cmd_demux_src2_data;                                                                                  // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire    [5:0] cmd_demux_src2_channel;                                                                               // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_ready;                                                                                 // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire          cmd_demux_src5_endofpacket;                                                                           // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                                 // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire          cmd_demux_src5_startofpacket;                                                                         // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [105:0] cmd_demux_src5_data;                                                                                  // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire    [5:0] cmd_demux_src5_channel;                                                                               // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_ready;                                                                                 // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire          rsp_demux_src0_endofpacket;                                                                           // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                                 // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                                                         // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [105:0] rsp_demux_src0_data;                                                                                  // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire    [5:0] rsp_demux_src0_channel;                                                                               // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                                                 // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_001_src0_endofpacket;                                                                       // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                             // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                                                     // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [105:0] rsp_demux_001_src0_data;                                                                              // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire    [5:0] rsp_demux_001_src0_channel;                                                                           // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                                                             // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_002_src0_endofpacket;                                                                       // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                             // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                                                     // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [105:0] rsp_demux_002_src0_data;                                                                              // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire    [5:0] rsp_demux_002_src0_channel;                                                                           // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_ready;                                                                             // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_005_src0_endofpacket;                                                                       // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                             // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire          rsp_demux_005_src0_startofpacket;                                                                     // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire  [105:0] rsp_demux_005_src0_data;                                                                              // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire    [5:0] rsp_demux_005_src0_channel;                                                                           // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_ready;                                                                             // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire          cmd_demux_src3_endofpacket;                                                                           // cmd_demux:src3_endofpacket -> crosser:in_endofpacket
	wire          cmd_demux_src3_valid;                                                                                 // cmd_demux:src3_valid -> crosser:in_valid
	wire          cmd_demux_src3_startofpacket;                                                                         // cmd_demux:src3_startofpacket -> crosser:in_startofpacket
	wire  [105:0] cmd_demux_src3_data;                                                                                  // cmd_demux:src3_data -> crosser:in_data
	wire    [5:0] cmd_demux_src3_channel;                                                                               // cmd_demux:src3_channel -> crosser:in_channel
	wire          cmd_demux_src3_ready;                                                                                 // crosser:in_ready -> cmd_demux:src3_ready
	wire          crosser_out_endofpacket;                                                                              // crosser:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          crosser_out_valid;                                                                                    // crosser:out_valid -> cmd_mux_003:sink0_valid
	wire          crosser_out_startofpacket;                                                                            // crosser:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [105:0] crosser_out_data;                                                                                     // crosser:out_data -> cmd_mux_003:sink0_data
	wire    [5:0] crosser_out_channel;                                                                                  // crosser:out_channel -> cmd_mux_003:sink0_channel
	wire          crosser_out_ready;                                                                                    // cmd_mux_003:sink0_ready -> crosser:out_ready
	wire          cmd_demux_src4_endofpacket;                                                                           // cmd_demux:src4_endofpacket -> crosser_001:in_endofpacket
	wire          cmd_demux_src4_valid;                                                                                 // cmd_demux:src4_valid -> crosser_001:in_valid
	wire          cmd_demux_src4_startofpacket;                                                                         // cmd_demux:src4_startofpacket -> crosser_001:in_startofpacket
	wire  [105:0] cmd_demux_src4_data;                                                                                  // cmd_demux:src4_data -> crosser_001:in_data
	wire    [5:0] cmd_demux_src4_channel;                                                                               // cmd_demux:src4_channel -> crosser_001:in_channel
	wire          cmd_demux_src4_ready;                                                                                 // crosser_001:in_ready -> cmd_demux:src4_ready
	wire          crosser_001_out_endofpacket;                                                                          // crosser_001:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          crosser_001_out_valid;                                                                                // crosser_001:out_valid -> cmd_mux_004:sink0_valid
	wire          crosser_001_out_startofpacket;                                                                        // crosser_001:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [105:0] crosser_001_out_data;                                                                                 // crosser_001:out_data -> cmd_mux_004:sink0_data
	wire    [5:0] crosser_001_out_channel;                                                                              // crosser_001:out_channel -> cmd_mux_004:sink0_channel
	wire          crosser_001_out_ready;                                                                                // cmd_mux_004:sink0_ready -> crosser_001:out_ready
	wire          rsp_demux_003_src0_endofpacket;                                                                       // rsp_demux_003:src0_endofpacket -> crosser_002:in_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                             // rsp_demux_003:src0_valid -> crosser_002:in_valid
	wire          rsp_demux_003_src0_startofpacket;                                                                     // rsp_demux_003:src0_startofpacket -> crosser_002:in_startofpacket
	wire  [105:0] rsp_demux_003_src0_data;                                                                              // rsp_demux_003:src0_data -> crosser_002:in_data
	wire    [5:0] rsp_demux_003_src0_channel;                                                                           // rsp_demux_003:src0_channel -> crosser_002:in_channel
	wire          rsp_demux_003_src0_ready;                                                                             // crosser_002:in_ready -> rsp_demux_003:src0_ready
	wire          crosser_002_out_endofpacket;                                                                          // crosser_002:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          crosser_002_out_valid;                                                                                // crosser_002:out_valid -> rsp_mux:sink3_valid
	wire          crosser_002_out_startofpacket;                                                                        // crosser_002:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [105:0] crosser_002_out_data;                                                                                 // crosser_002:out_data -> rsp_mux:sink3_data
	wire    [5:0] crosser_002_out_channel;                                                                              // crosser_002:out_channel -> rsp_mux:sink3_channel
	wire          crosser_002_out_ready;                                                                                // rsp_mux:sink3_ready -> crosser_002:out_ready
	wire          rsp_demux_004_src0_endofpacket;                                                                       // rsp_demux_004:src0_endofpacket -> crosser_003:in_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                             // rsp_demux_004:src0_valid -> crosser_003:in_valid
	wire          rsp_demux_004_src0_startofpacket;                                                                     // rsp_demux_004:src0_startofpacket -> crosser_003:in_startofpacket
	wire  [105:0] rsp_demux_004_src0_data;                                                                              // rsp_demux_004:src0_data -> crosser_003:in_data
	wire    [5:0] rsp_demux_004_src0_channel;                                                                           // rsp_demux_004:src0_channel -> crosser_003:in_channel
	wire          rsp_demux_004_src0_ready;                                                                             // crosser_003:in_ready -> rsp_demux_004:src0_ready
	wire          crosser_003_out_endofpacket;                                                                          // crosser_003:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          crosser_003_out_valid;                                                                                // crosser_003:out_valid -> rsp_mux:sink4_valid
	wire          crosser_003_out_startofpacket;                                                                        // crosser_003:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [105:0] crosser_003_out_data;                                                                                 // crosser_003:out_data -> rsp_mux:sink4_data
	wire    [5:0] crosser_003_out_channel;                                                                              // crosser_003:out_channel -> rsp_mux:sink4_channel
	wire          crosser_003_out_ready;                                                                                // rsp_mux:sink4_ready -> crosser_003:out_ready
	wire    [5:0] altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_valid_data;                             // altera_avalon_mm_bridge_avalon_universal_master_0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (1),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) altera_avalon_mm_bridge_avalon_universal_master_0_translator (
		.clk                      (mm_clk_module_clk_clk),                                                                                //                       clk.clk
		.reset                    (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset),                                            //                     reset.reset
		.uav_address              (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (altera_avalon_mm_bridge_avalon_universal_master_0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (altera_avalon_mm_bridge_avalon_universal_master_0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (altera_avalon_mm_bridge_avalon_universal_master_0_burstcount),                                         //                          .burstcount
		.av_byteenable            (altera_avalon_mm_bridge_avalon_universal_master_0_byteenable),                                         //                          .byteenable
		.av_read                  (altera_avalon_mm_bridge_avalon_universal_master_0_read),                                               //                          .read
		.av_readdata              (altera_avalon_mm_bridge_avalon_universal_master_0_readdata),                                           //                          .readdata
		.av_readdatavalid         (altera_avalon_mm_bridge_avalon_universal_master_0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (altera_avalon_mm_bridge_avalon_universal_master_0_write),                                              //                          .write
		.av_writedata             (altera_avalon_mm_bridge_avalon_universal_master_0_writedata),                                          //                          .writedata
		.av_lock                  (altera_avalon_mm_bridge_avalon_universal_master_0_lock),                                               //                          .lock
		.av_debugaccess           (altera_avalon_mm_bridge_avalon_universal_master_0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                                                 //               (terminated)
		.av_begintransfer         (1'b0),                                                                                                 //               (terminated)
		.av_chipselect            (1'b0),                                                                                                 //               (terminated)
		.uav_clken                (),                                                                                                     //               (terminated)
		.av_clken                 (1'b1),                                                                                                 //               (terminated)
		.uav_response             (2'b00),                                                                                                //               (terminated)
		.av_response              (),                                                                                                     //               (terminated)
		.uav_writeresponserequest (),                                                                                                     //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                                                 //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                                                 //               (terminated)
		.av_writeresponsevalid    ()                                                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) altera_10gbaser_phy_mgmt_translator (
		.clk                      (mm_clk_module_clk_clk),                                     //                      clk.clk
		.reset                    (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (altera_10gbaser_phy_mgmt_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount           (altera_10gbaser_phy_mgmt_agent_m0_burstcount),              //                         .burstcount
		.uav_read                 (altera_10gbaser_phy_mgmt_agent_m0_read),                    //                         .read
		.uav_write                (altera_10gbaser_phy_mgmt_agent_m0_write),                   //                         .write
		.uav_waitrequest          (altera_10gbaser_phy_mgmt_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid        (altera_10gbaser_phy_mgmt_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable           (altera_10gbaser_phy_mgmt_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata             (altera_10gbaser_phy_mgmt_agent_m0_readdata),                //                         .readdata
		.uav_writedata            (altera_10gbaser_phy_mgmt_agent_m0_writedata),               //                         .writedata
		.uav_lock                 (altera_10gbaser_phy_mgmt_agent_m0_lock),                    //                         .lock
		.uav_debugaccess          (altera_10gbaser_phy_mgmt_agent_m0_debugaccess),             //                         .debugaccess
		.av_address               (altera_10gbaser_phy_mgmt_address),                          //      avalon_anti_slave_0.address
		.av_write                 (altera_10gbaser_phy_mgmt_write),                            //                         .write
		.av_read                  (altera_10gbaser_phy_mgmt_read),                             //                         .read
		.av_readdata              (altera_10gbaser_phy_mgmt_readdata),                         //                         .readdata
		.av_writedata             (altera_10gbaser_phy_mgmt_writedata),                        //                         .writedata
		.av_waitrequest           (altera_10gbaser_phy_mgmt_waitrequest),                      //                         .waitrequest
		.av_begintransfer         (),                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                          //              (terminated)
		.av_burstcount            (),                                                          //              (terminated)
		.av_byteenable            (),                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                      //              (terminated)
		.av_writebyteenable       (),                                                          //              (terminated)
		.av_lock                  (),                                                          //              (terminated)
		.av_chipselect            (),                                                          //              (terminated)
		.av_clken                 (),                                                          //              (terminated)
		.uav_clken                (1'b0),                                                      //              (terminated)
		.av_debugaccess           (),                                                          //              (terminated)
		.av_outputenable          (),                                                          //              (terminated)
		.uav_response             (),                                                          //              (terminated)
		.av_response              (2'b00),                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                          //              (terminated)
		.av_writeresponserequest  (),                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_10g_mac_csr_translator (
		.clk                      (mm_clk_module_clk_clk),                                     //                      clk.clk
		.reset                    (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (eth_10g_mac_csr_agent_m0_address),                          // avalon_universal_slave_0.address
		.uav_burstcount           (eth_10g_mac_csr_agent_m0_burstcount),                       //                         .burstcount
		.uav_read                 (eth_10g_mac_csr_agent_m0_read),                             //                         .read
		.uav_write                (eth_10g_mac_csr_agent_m0_write),                            //                         .write
		.uav_waitrequest          (eth_10g_mac_csr_agent_m0_waitrequest),                      //                         .waitrequest
		.uav_readdatavalid        (eth_10g_mac_csr_agent_m0_readdatavalid),                    //                         .readdatavalid
		.uav_byteenable           (eth_10g_mac_csr_agent_m0_byteenable),                       //                         .byteenable
		.uav_readdata             (eth_10g_mac_csr_agent_m0_readdata),                         //                         .readdata
		.uav_writedata            (eth_10g_mac_csr_agent_m0_writedata),                        //                         .writedata
		.uav_lock                 (eth_10g_mac_csr_agent_m0_lock),                             //                         .lock
		.uav_debugaccess          (eth_10g_mac_csr_agent_m0_debugaccess),                      //                         .debugaccess
		.av_address               (eth_10g_mac_csr_address),                                   //      avalon_anti_slave_0.address
		.av_write                 (eth_10g_mac_csr_write),                                     //                         .write
		.av_read                  (eth_10g_mac_csr_read),                                      //                         .read
		.av_readdata              (eth_10g_mac_csr_readdata),                                  //                         .readdata
		.av_writedata             (eth_10g_mac_csr_writedata),                                 //                         .writedata
		.av_waitrequest           (eth_10g_mac_csr_waitrequest),                               //                         .waitrequest
		.av_begintransfer         (),                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                          //              (terminated)
		.av_burstcount            (),                                                          //              (terminated)
		.av_byteenable            (),                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                      //              (terminated)
		.av_writebyteenable       (),                                                          //              (terminated)
		.av_lock                  (),                                                          //              (terminated)
		.av_chipselect            (),                                                          //              (terminated)
		.av_clken                 (),                                                          //              (terminated)
		.uav_clken                (1'b0),                                                      //              (terminated)
		.av_debugaccess           (),                                                          //              (terminated)
		.av_outputenable          (),                                                          //              (terminated)
		.uav_response             (),                                                          //              (terminated)
		.av_response              (2'b00),                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                          //              (terminated)
		.av_writeresponserequest  (),                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_loopback_composed_csr_translator (
		.clk                      (mm_clk_module_clk_clk),                                     //                      clk.clk
		.reset                    (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (eth_loopback_composed_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (eth_loopback_composed_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (eth_loopback_composed_csr_agent_m0_read),                   //                         .read
		.uav_write                (eth_loopback_composed_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest          (eth_loopback_composed_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (eth_loopback_composed_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (eth_loopback_composed_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (eth_loopback_composed_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (eth_loopback_composed_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (eth_loopback_composed_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (eth_loopback_composed_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (eth_loopback_composed_csr_address),                         //      avalon_anti_slave_0.address
		.av_write                 (eth_loopback_composed_csr_write),                           //                         .write
		.av_read                  (eth_loopback_composed_csr_read),                            //                         .read
		.av_readdata              (eth_loopback_composed_csr_readdata),                        //                         .readdata
		.av_writedata             (eth_loopback_composed_csr_writedata),                       //                         .writedata
		.av_waitrequest           (eth_loopback_composed_csr_waitrequest),                     //                         .waitrequest
		.av_begintransfer         (),                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                          //              (terminated)
		.av_burstcount            (),                                                          //              (terminated)
		.av_byteenable            (),                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                      //              (terminated)
		.av_writebyteenable       (),                                                          //              (terminated)
		.av_lock                  (),                                                          //              (terminated)
		.av_chipselect            (),                                                          //              (terminated)
		.av_clken                 (),                                                          //              (terminated)
		.uav_clken                (1'b0),                                                      //              (terminated)
		.av_debugaccess           (),                                                          //              (terminated)
		.av_outputenable          (),                                                          //              (terminated)
		.uav_response             (),                                                          //              (terminated)
		.av_response              (2'b00),                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                          //              (terminated)
		.av_writeresponserequest  (),                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tx_sc_fifo_csr_translator (
		.clk                      (tx_clk_module_clk_clk),                            //                      clk.clk
		.reset                    (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (tx_sc_fifo_csr_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (tx_sc_fifo_csr_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (tx_sc_fifo_csr_agent_m0_read),                     //                         .read
		.uav_write                (tx_sc_fifo_csr_agent_m0_write),                    //                         .write
		.uav_waitrequest          (tx_sc_fifo_csr_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (tx_sc_fifo_csr_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (tx_sc_fifo_csr_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (tx_sc_fifo_csr_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (tx_sc_fifo_csr_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (tx_sc_fifo_csr_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (tx_sc_fifo_csr_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (tx_sc_fifo_csr_address),                           //      avalon_anti_slave_0.address
		.av_write                 (tx_sc_fifo_csr_write),                             //                         .write
		.av_read                  (tx_sc_fifo_csr_read),                              //                         .read
		.av_readdata              (tx_sc_fifo_csr_readdata),                          //                         .readdata
		.av_writedata             (tx_sc_fifo_csr_writedata),                         //                         .writedata
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_chipselect            (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rx_sc_fifo_csr_translator (
		.clk                      (altera_10gbaser_xgmii_rx_clk_clk),                 //                      clk.clk
		.reset                    (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (rx_sc_fifo_csr_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount           (rx_sc_fifo_csr_agent_m0_burstcount),               //                         .burstcount
		.uav_read                 (rx_sc_fifo_csr_agent_m0_read),                     //                         .read
		.uav_write                (rx_sc_fifo_csr_agent_m0_write),                    //                         .write
		.uav_waitrequest          (rx_sc_fifo_csr_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid        (rx_sc_fifo_csr_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable           (rx_sc_fifo_csr_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata             (rx_sc_fifo_csr_agent_m0_readdata),                 //                         .readdata
		.uav_writedata            (rx_sc_fifo_csr_agent_m0_writedata),                //                         .writedata
		.uav_lock                 (rx_sc_fifo_csr_agent_m0_lock),                     //                         .lock
		.uav_debugaccess          (rx_sc_fifo_csr_agent_m0_debugaccess),              //                         .debugaccess
		.av_address               (rx_sc_fifo_csr_address),                           //      avalon_anti_slave_0.address
		.av_write                 (rx_sc_fifo_csr_write),                             //                         .write
		.av_read                  (rx_sc_fifo_csr_read),                              //                         .read
		.av_readdata              (rx_sc_fifo_csr_readdata),                          //                         .readdata
		.av_writedata             (rx_sc_fifo_csr_writedata),                         //                         .writedata
		.av_begintransfer         (),                                                 //              (terminated)
		.av_beginbursttransfer    (),                                                 //              (terminated)
		.av_burstcount            (),                                                 //              (terminated)
		.av_byteenable            (),                                                 //              (terminated)
		.av_readdatavalid         (1'b0),                                             //              (terminated)
		.av_waitrequest           (1'b0),                                             //              (terminated)
		.av_writebyteenable       (),                                                 //              (terminated)
		.av_lock                  (),                                                 //              (terminated)
		.av_chipselect            (),                                                 //              (terminated)
		.av_clken                 (),                                                 //              (terminated)
		.uav_clken                (1'b0),                                             //              (terminated)
		.av_debugaccess           (),                                                 //              (terminated)
		.av_outputenable          (),                                                 //              (terminated)
		.uav_response             (),                                                 //              (terminated)
		.av_response              (2'b00),                                            //              (terminated)
		.uav_writeresponserequest (1'b0),                                             //              (terminated)
		.uav_writeresponsevalid   (),                                                 //              (terminated)
		.av_writeresponserequest  (),                                                 //              (terminated)
		.av_writeresponsevalid    (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) eth_mdio_csr_translator (
		.clk                      (mm_clk_module_clk_clk),                                     //                      clk.clk
		.reset                    (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (eth_mdio_csr_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount           (eth_mdio_csr_agent_m0_burstcount),                          //                         .burstcount
		.uav_read                 (eth_mdio_csr_agent_m0_read),                                //                         .read
		.uav_write                (eth_mdio_csr_agent_m0_write),                               //                         .write
		.uav_waitrequest          (eth_mdio_csr_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid        (eth_mdio_csr_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable           (eth_mdio_csr_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata             (eth_mdio_csr_agent_m0_readdata),                            //                         .readdata
		.uav_writedata            (eth_mdio_csr_agent_m0_writedata),                           //                         .writedata
		.uav_lock                 (eth_mdio_csr_agent_m0_lock),                                //                         .lock
		.uav_debugaccess          (eth_mdio_csr_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address               (eth_mdio_csr_address),                                      //      avalon_anti_slave_0.address
		.av_write                 (eth_mdio_csr_write),                                        //                         .write
		.av_read                  (eth_mdio_csr_read),                                         //                         .read
		.av_readdata              (eth_mdio_csr_readdata),                                     //                         .readdata
		.av_writedata             (eth_mdio_csr_writedata),                                    //                         .writedata
		.av_waitrequest           (eth_mdio_csr_waitrequest),                                  //                         .waitrequest
		.av_begintransfer         (),                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                          //              (terminated)
		.av_burstcount            (),                                                          //              (terminated)
		.av_byteenable            (),                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                      //              (terminated)
		.av_writebyteenable       (),                                                          //              (terminated)
		.av_lock                  (),                                                          //              (terminated)
		.av_chipselect            (),                                                          //              (terminated)
		.av_clken                 (),                                                          //              (terminated)
		.uav_clken                (1'b0),                                                      //              (terminated)
		.av_debugaccess           (),                                                          //              (terminated)
		.av_outputenable          (),                                                          //              (terminated)
		.uav_response             (),                                                          //              (terminated)
		.av_response              (2'b00),                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                          //              (terminated)
		.av_writeresponserequest  (),                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_BEGIN_BURST           (85),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_BURST_TYPE_H          (82),
		.PKT_BURST_TYPE_L          (81),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_THREAD_ID_H           (93),
		.PKT_THREAD_ID_L           (93),
		.PKT_CACHE_H               (100),
		.PKT_CACHE_L               (97),
		.PKT_DATA_SIDEBAND_H       (84),
		.PKT_DATA_SIDEBAND_L       (84),
		.PKT_QOS_H                 (86),
		.PKT_QOS_L                 (86),
		.PKT_ADDR_SIDEBAND_H       (83),
		.PKT_ADDR_SIDEBAND_L       (83),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) altera_avalon_mm_bridge_avalon_universal_master_0_agent (
		.clk                     (mm_clk_module_clk_clk),                                                                                //       clk.clk
		.reset                   (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset),                                            // clk_reset.reset
		.av_address              (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (altera_avalon_mm_bridge_avalon_universal_master_0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_ready),                                     //          .ready
		.rp_valid                (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_data),                               //          .data
		.rp_channel              (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                                                     // (terminated)
		.av_writeresponserequest (1'b0),                                                                                                 // (terminated)
		.av_writeresponsevalid   ()                                                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) altera_10gbaser_phy_mgmt_agent (
		.clk                     (mm_clk_module_clk_clk),                                     //             clk.clk
		.reset                   (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (altera_10gbaser_phy_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (altera_10gbaser_phy_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (altera_10gbaser_phy_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (altera_10gbaser_phy_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (altera_10gbaser_phy_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (altera_10gbaser_phy_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (altera_10gbaser_phy_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (altera_10gbaser_phy_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (altera_10gbaser_phy_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (altera_10gbaser_phy_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (altera_10gbaser_phy_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (altera_10gbaser_phy_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (altera_10gbaser_phy_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (altera_10gbaser_phy_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (altera_10gbaser_phy_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (altera_10gbaser_phy_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //                .channel
		.rf_sink_ready           (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (altera_10gbaser_phy_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (altera_10gbaser_phy_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (altera_10gbaser_phy_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (altera_10gbaser_phy_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (altera_10gbaser_phy_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (altera_10gbaser_phy_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) altera_10gbaser_phy_mgmt_agent_rsp_fifo (
		.clk               (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset             (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (altera_10gbaser_phy_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (altera_10gbaser_phy_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (altera_10gbaser_phy_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (altera_10gbaser_phy_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (altera_10gbaser_phy_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (altera_10gbaser_phy_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) eth_10g_mac_csr_agent (
		.clk                     (mm_clk_module_clk_clk),                                     //             clk.clk
		.reset                   (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (eth_10g_mac_csr_agent_m0_address),                          //              m0.address
		.m0_burstcount           (eth_10g_mac_csr_agent_m0_burstcount),                       //                .burstcount
		.m0_byteenable           (eth_10g_mac_csr_agent_m0_byteenable),                       //                .byteenable
		.m0_debugaccess          (eth_10g_mac_csr_agent_m0_debugaccess),                      //                .debugaccess
		.m0_lock                 (eth_10g_mac_csr_agent_m0_lock),                             //                .lock
		.m0_readdata             (eth_10g_mac_csr_agent_m0_readdata),                         //                .readdata
		.m0_readdatavalid        (eth_10g_mac_csr_agent_m0_readdatavalid),                    //                .readdatavalid
		.m0_read                 (eth_10g_mac_csr_agent_m0_read),                             //                .read
		.m0_waitrequest          (eth_10g_mac_csr_agent_m0_waitrequest),                      //                .waitrequest
		.m0_writedata            (eth_10g_mac_csr_agent_m0_writedata),                        //                .writedata
		.m0_write                (eth_10g_mac_csr_agent_m0_write),                            //                .write
		.rp_endofpacket          (eth_10g_mac_csr_agent_rp_endofpacket),                      //              rp.endofpacket
		.rp_ready                (eth_10g_mac_csr_agent_rp_ready),                            //                .ready
		.rp_valid                (eth_10g_mac_csr_agent_rp_valid),                            //                .valid
		.rp_data                 (eth_10g_mac_csr_agent_rp_data),                             //                .data
		.rp_startofpacket        (eth_10g_mac_csr_agent_rp_startofpacket),                    //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                   //                .channel
		.rf_sink_ready           (eth_10g_mac_csr_agent_rsp_fifo_out_ready),                  //         rf_sink.ready
		.rf_sink_valid           (eth_10g_mac_csr_agent_rsp_fifo_out_valid),                  //                .valid
		.rf_sink_startofpacket   (eth_10g_mac_csr_agent_rsp_fifo_out_startofpacket),          //                .startofpacket
		.rf_sink_endofpacket     (eth_10g_mac_csr_agent_rsp_fifo_out_endofpacket),            //                .endofpacket
		.rf_sink_data            (eth_10g_mac_csr_agent_rsp_fifo_out_data),                   //                .data
		.rf_source_ready         (eth_10g_mac_csr_agent_rf_source_ready),                     //       rf_source.ready
		.rf_source_valid         (eth_10g_mac_csr_agent_rf_source_valid),                     //                .valid
		.rf_source_startofpacket (eth_10g_mac_csr_agent_rf_source_startofpacket),             //                .startofpacket
		.rf_source_endofpacket   (eth_10g_mac_csr_agent_rf_source_endofpacket),               //                .endofpacket
		.rf_source_data          (eth_10g_mac_csr_agent_rf_source_data),                      //                .data
		.rdata_fifo_sink_ready   (eth_10g_mac_csr_agent_rdata_fifo_src_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_10g_mac_csr_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_sink_data    (eth_10g_mac_csr_agent_rdata_fifo_src_data),                 //                .data
		.rdata_fifo_src_ready    (eth_10g_mac_csr_agent_rdata_fifo_src_ready),                //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_10g_mac_csr_agent_rdata_fifo_src_valid),                //                .valid
		.rdata_fifo_src_data     (eth_10g_mac_csr_agent_rdata_fifo_src_data),                 //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_10g_mac_csr_agent_rsp_fifo (
		.clk               (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset             (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (eth_10g_mac_csr_agent_rf_source_data),                      //        in.data
		.in_valid          (eth_10g_mac_csr_agent_rf_source_valid),                     //          .valid
		.in_ready          (eth_10g_mac_csr_agent_rf_source_ready),                     //          .ready
		.in_startofpacket  (eth_10g_mac_csr_agent_rf_source_startofpacket),             //          .startofpacket
		.in_endofpacket    (eth_10g_mac_csr_agent_rf_source_endofpacket),               //          .endofpacket
		.out_data          (eth_10g_mac_csr_agent_rsp_fifo_out_data),                   //       out.data
		.out_valid         (eth_10g_mac_csr_agent_rsp_fifo_out_valid),                  //          .valid
		.out_ready         (eth_10g_mac_csr_agent_rsp_fifo_out_ready),                  //          .ready
		.out_startofpacket (eth_10g_mac_csr_agent_rsp_fifo_out_startofpacket),          //          .startofpacket
		.out_endofpacket   (eth_10g_mac_csr_agent_rsp_fifo_out_endofpacket),            //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) eth_loopback_composed_csr_agent (
		.clk                     (mm_clk_module_clk_clk),                                      //             clk.clk
		.reset                   (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (eth_loopback_composed_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (eth_loopback_composed_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (eth_loopback_composed_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (eth_loopback_composed_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (eth_loopback_composed_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (eth_loopback_composed_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (eth_loopback_composed_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (eth_loopback_composed_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (eth_loopback_composed_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (eth_loopback_composed_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (eth_loopback_composed_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (eth_loopback_composed_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (eth_loopback_composed_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (eth_loopback_composed_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (eth_loopback_composed_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (eth_loopback_composed_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                    //                .channel
		.rf_sink_ready           (eth_loopback_composed_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (eth_loopback_composed_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (eth_loopback_composed_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (eth_loopback_composed_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (eth_loopback_composed_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (eth_loopback_composed_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (eth_loopback_composed_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (eth_loopback_composed_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (eth_loopback_composed_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (eth_loopback_composed_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (eth_loopback_composed_csr_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_loopback_composed_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (eth_loopback_composed_csr_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (eth_loopback_composed_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_loopback_composed_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (eth_loopback_composed_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                      //     (terminated)
		.m0_writeresponserequest (),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                        //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_loopback_composed_csr_agent_rsp_fifo (
		.clk               (mm_clk_module_clk_clk),                                      //       clk.clk
		.reset             (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (eth_loopback_composed_csr_agent_rf_source_data),             //        in.data
		.in_valid          (eth_loopback_composed_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (eth_loopback_composed_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (eth_loopback_composed_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (eth_loopback_composed_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (eth_loopback_composed_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (eth_loopback_composed_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (eth_loopback_composed_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (eth_loopback_composed_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (eth_loopback_composed_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                      // (terminated)
		.csr_read          (1'b0),                                                       // (terminated)
		.csr_write         (1'b0),                                                       // (terminated)
		.csr_readdata      (),                                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                       // (terminated)
		.almost_full_data  (),                                                           // (terminated)
		.almost_empty_data (),                                                           // (terminated)
		.in_empty          (1'b0),                                                       // (terminated)
		.out_empty         (),                                                           // (terminated)
		.in_error          (1'b0),                                                       // (terminated)
		.out_error         (),                                                           // (terminated)
		.in_channel        (1'b0),                                                       // (terminated)
		.out_channel       ()                                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tx_sc_fifo_csr_agent (
		.clk                     (tx_clk_module_clk_clk),                            //             clk.clk
		.reset                   (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (tx_sc_fifo_csr_agent_m0_address),                  //              m0.address
		.m0_burstcount           (tx_sc_fifo_csr_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (tx_sc_fifo_csr_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (tx_sc_fifo_csr_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (tx_sc_fifo_csr_agent_m0_lock),                     //                .lock
		.m0_readdata             (tx_sc_fifo_csr_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (tx_sc_fifo_csr_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (tx_sc_fifo_csr_agent_m0_read),                     //                .read
		.m0_waitrequest          (tx_sc_fifo_csr_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (tx_sc_fifo_csr_agent_m0_writedata),                //                .writedata
		.m0_write                (tx_sc_fifo_csr_agent_m0_write),                    //                .write
		.rp_endofpacket          (tx_sc_fifo_csr_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (tx_sc_fifo_csr_agent_rp_ready),                    //                .ready
		.rp_valid                (tx_sc_fifo_csr_agent_rp_valid),                    //                .valid
		.rp_data                 (tx_sc_fifo_csr_agent_rp_data),                     //                .data
		.rp_startofpacket        (tx_sc_fifo_csr_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_003_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                          //                .channel
		.rf_sink_ready           (tx_sc_fifo_csr_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (tx_sc_fifo_csr_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (tx_sc_fifo_csr_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (tx_sc_fifo_csr_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (tx_sc_fifo_csr_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (tx_sc_fifo_csr_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (tx_sc_fifo_csr_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (tx_sc_fifo_csr_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (tx_sc_fifo_csr_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (tx_sc_fifo_csr_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (tx_sc_fifo_csr_agent_rdata_fifo_out_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tx_sc_fifo_csr_agent_rdata_fifo_out_valid),        //                .valid
		.rdata_fifo_sink_data    (tx_sc_fifo_csr_agent_rdata_fifo_out_data),         //                .data
		.rdata_fifo_src_ready    (tx_sc_fifo_csr_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tx_sc_fifo_csr_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (tx_sc_fifo_csr_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_csr_agent_rsp_fifo (
		.clk               (tx_clk_module_clk_clk),                            //       clk.clk
		.reset             (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tx_sc_fifo_csr_agent_rf_source_data),              //        in.data
		.in_valid          (tx_sc_fifo_csr_agent_rf_source_valid),             //          .valid
		.in_ready          (tx_sc_fifo_csr_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (tx_sc_fifo_csr_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (tx_sc_fifo_csr_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (tx_sc_fifo_csr_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (tx_sc_fifo_csr_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (tx_sc_fifo_csr_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (tx_sc_fifo_csr_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (tx_sc_fifo_csr_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo_csr_agent_rdata_fifo (
		.clk               (tx_clk_module_clk_clk),                            //       clk.clk
		.reset             (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (tx_sc_fifo_csr_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (tx_sc_fifo_csr_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (tx_sc_fifo_csr_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (tx_sc_fifo_csr_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (tx_sc_fifo_csr_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (tx_sc_fifo_csr_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rx_sc_fifo_csr_agent (
		.clk                     (altera_10gbaser_xgmii_rx_clk_clk),                 //             clk.clk
		.reset                   (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rx_sc_fifo_csr_agent_m0_address),                  //              m0.address
		.m0_burstcount           (rx_sc_fifo_csr_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (rx_sc_fifo_csr_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (rx_sc_fifo_csr_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (rx_sc_fifo_csr_agent_m0_lock),                     //                .lock
		.m0_readdata             (rx_sc_fifo_csr_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (rx_sc_fifo_csr_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (rx_sc_fifo_csr_agent_m0_read),                     //                .read
		.m0_waitrequest          (rx_sc_fifo_csr_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (rx_sc_fifo_csr_agent_m0_writedata),                //                .writedata
		.m0_write                (rx_sc_fifo_csr_agent_m0_write),                    //                .write
		.rp_endofpacket          (rx_sc_fifo_csr_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (rx_sc_fifo_csr_agent_rp_ready),                    //                .ready
		.rp_valid                (rx_sc_fifo_csr_agent_rp_valid),                    //                .valid
		.rp_data                 (rx_sc_fifo_csr_agent_rp_data),                     //                .data
		.rp_startofpacket        (rx_sc_fifo_csr_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_004_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                          //                .channel
		.rf_sink_ready           (rx_sc_fifo_csr_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (rx_sc_fifo_csr_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (rx_sc_fifo_csr_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (rx_sc_fifo_csr_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (rx_sc_fifo_csr_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (rx_sc_fifo_csr_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (rx_sc_fifo_csr_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (rx_sc_fifo_csr_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (rx_sc_fifo_csr_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (rx_sc_fifo_csr_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (rx_sc_fifo_csr_agent_rdata_fifo_out_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rx_sc_fifo_csr_agent_rdata_fifo_out_valid),        //                .valid
		.rdata_fifo_sink_data    (rx_sc_fifo_csr_agent_rdata_fifo_out_data),         //                .data
		.rdata_fifo_src_ready    (rx_sc_fifo_csr_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rx_sc_fifo_csr_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (rx_sc_fifo_csr_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponserequest (),                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_csr_agent_rsp_fifo (
		.clk               (altera_10gbaser_xgmii_rx_clk_clk),                 //       clk.clk
		.reset             (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rx_sc_fifo_csr_agent_rf_source_data),              //        in.data
		.in_valid          (rx_sc_fifo_csr_agent_rf_source_valid),             //          .valid
		.in_ready          (rx_sc_fifo_csr_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (rx_sc_fifo_csr_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (rx_sc_fifo_csr_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (rx_sc_fifo_csr_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (rx_sc_fifo_csr_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (rx_sc_fifo_csr_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (rx_sc_fifo_csr_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (rx_sc_fifo_csr_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rx_sc_fifo_csr_agent_rdata_fifo (
		.clk               (altera_10gbaser_xgmii_rx_clk_clk),                 //       clk.clk
		.reset             (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rx_sc_fifo_csr_agent_rdata_fifo_src_data),         //        in.data
		.in_valid          (rx_sc_fifo_csr_agent_rdata_fifo_src_valid),        //          .valid
		.in_ready          (rx_sc_fifo_csr_agent_rdata_fifo_src_ready),        //          .ready
		.out_data          (rx_sc_fifo_csr_agent_rdata_fifo_out_data),         //       out.data
		.out_valid         (rx_sc_fifo_csr_agent_rdata_fifo_out_valid),        //          .valid
		.out_ready         (rx_sc_fifo_csr_agent_rdata_fifo_out_ready),        //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (85),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_BURSTWRAP_H           (77),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (96),
		.PKT_PROTECTION_L          (94),
		.PKT_RESPONSE_STATUS_H     (102),
		.PKT_RESPONSE_STATUS_L     (101),
		.PKT_BURST_SIZE_H          (80),
		.PKT_BURST_SIZE_L          (78),
		.PKT_ORI_BURST_SIZE_L      (103),
		.PKT_ORI_BURST_SIZE_H      (105),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (106),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) eth_mdio_csr_agent (
		.clk                     (mm_clk_module_clk_clk),                                     //             clk.clk
		.reset                   (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (eth_mdio_csr_agent_m0_address),                             //              m0.address
		.m0_burstcount           (eth_mdio_csr_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (eth_mdio_csr_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (eth_mdio_csr_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (eth_mdio_csr_agent_m0_lock),                                //                .lock
		.m0_readdata             (eth_mdio_csr_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (eth_mdio_csr_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (eth_mdio_csr_agent_m0_read),                                //                .read
		.m0_waitrequest          (eth_mdio_csr_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (eth_mdio_csr_agent_m0_writedata),                           //                .writedata
		.m0_write                (eth_mdio_csr_agent_m0_write),                               //                .write
		.rp_endofpacket          (eth_mdio_csr_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (eth_mdio_csr_agent_rp_ready),                               //                .ready
		.rp_valid                (eth_mdio_csr_agent_rp_valid),                               //                .valid
		.rp_data                 (eth_mdio_csr_agent_rp_data),                                //                .data
		.rp_startofpacket        (eth_mdio_csr_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                   //                .channel
		.rf_sink_ready           (eth_mdio_csr_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (eth_mdio_csr_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (eth_mdio_csr_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (eth_mdio_csr_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (eth_mdio_csr_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (eth_mdio_csr_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (eth_mdio_csr_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (eth_mdio_csr_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (eth_mdio_csr_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (eth_mdio_csr_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (eth_mdio_csr_agent_rdata_fifo_src_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (eth_mdio_csr_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_sink_data    (eth_mdio_csr_agent_rdata_fifo_src_data),                    //                .data
		.rdata_fifo_src_ready    (eth_mdio_csr_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (eth_mdio_csr_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (eth_mdio_csr_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponserequest (),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (107),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) eth_mdio_csr_agent_rsp_fifo (
		.clk               (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset             (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (eth_mdio_csr_agent_rf_source_data),                         //        in.data
		.in_valid          (eth_mdio_csr_agent_rf_source_valid),                        //          .valid
		.in_ready          (eth_mdio_csr_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (eth_mdio_csr_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (eth_mdio_csr_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (eth_mdio_csr_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (eth_mdio_csr_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (eth_mdio_csr_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (eth_mdio_csr_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (eth_mdio_csr_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_router router (
		.sink_ready         (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_ready),         //      sink.ready
		.sink_valid         (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_valid),         //          .valid
		.sink_data          (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_data),          //          .data
		.sink_startofpacket (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (altera_avalon_mm_bridge_avalon_universal_master_0_agent_cp_endofpacket),   //          .endofpacket
		.clk                (mm_clk_module_clk_clk),                                                    //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_src_ready),                                                         //       src.ready
		.src_valid          (router_src_valid),                                                         //          .valid
		.src_data           (router_src_data),                                                          //          .data
		.src_channel        (router_src_channel),                                                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                                                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                    //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (altera_10gbaser_phy_mgmt_agent_rp_ready),                   //      sink.ready
		.sink_valid         (altera_10gbaser_phy_mgmt_agent_rp_valid),                   //          .valid
		.sink_data          (altera_10gbaser_phy_mgmt_agent_rp_data),                    //          .data
		.sink_startofpacket (altera_10gbaser_phy_mgmt_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (altera_10gbaser_phy_mgmt_agent_rp_endofpacket),             //          .endofpacket
		.clk                (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //       src.ready
		.src_valid          (router_001_src_valid),                                      //          .valid
		.src_data           (router_001_src_data),                                       //          .data
		.src_channel        (router_001_src_channel),                                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (eth_10g_mac_csr_agent_rp_ready),                            //      sink.ready
		.sink_valid         (eth_10g_mac_csr_agent_rp_valid),                            //          .valid
		.sink_data          (eth_10g_mac_csr_agent_rp_data),                             //          .data
		.sink_startofpacket (eth_10g_mac_csr_agent_rp_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (eth_10g_mac_csr_agent_rp_endofpacket),                      //          .endofpacket
		.clk                (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                      //       src.ready
		.src_valid          (router_002_src_valid),                                      //          .valid
		.src_data           (router_002_src_data),                                       //          .data
		.src_channel        (router_002_src_channel),                                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                 //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (eth_loopback_composed_csr_agent_rp_ready),                  //      sink.ready
		.sink_valid         (eth_loopback_composed_csr_agent_rp_valid),                  //          .valid
		.sink_data          (eth_loopback_composed_csr_agent_rp_data),                   //          .data
		.sink_startofpacket (eth_loopback_composed_csr_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (eth_loopback_composed_csr_agent_rp_endofpacket),            //          .endofpacket
		.clk                (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                      //       src.ready
		.src_valid          (router_003_src_valid),                                      //          .valid
		.src_data           (router_003_src_data),                                       //          .data
		.src_channel        (router_003_src_channel),                                    //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                 //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_router_001 router_004 (
		.sink_ready         (tx_sc_fifo_csr_agent_rp_ready),                    //      sink.ready
		.sink_valid         (tx_sc_fifo_csr_agent_rp_valid),                    //          .valid
		.sink_data          (tx_sc_fifo_csr_agent_rp_data),                     //          .data
		.sink_startofpacket (tx_sc_fifo_csr_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (tx_sc_fifo_csr_agent_rp_endofpacket),              //          .endofpacket
		.clk                (tx_clk_module_clk_clk),                            //       clk.clk
		.reset              (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                             //       src.ready
		.src_valid          (router_004_src_valid),                             //          .valid
		.src_data           (router_004_src_data),                              //          .data
		.src_channel        (router_004_src_channel),                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_router_001 router_005 (
		.sink_ready         (rx_sc_fifo_csr_agent_rp_ready),                    //      sink.ready
		.sink_valid         (rx_sc_fifo_csr_agent_rp_valid),                    //          .valid
		.sink_data          (rx_sc_fifo_csr_agent_rp_data),                     //          .data
		.sink_startofpacket (rx_sc_fifo_csr_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (rx_sc_fifo_csr_agent_rp_endofpacket),              //          .endofpacket
		.clk                (altera_10gbaser_xgmii_rx_clk_clk),                 //       clk.clk
		.reset              (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_router_001 router_006 (
		.sink_ready         (eth_mdio_csr_agent_rp_ready),                               //      sink.ready
		.sink_valid         (eth_mdio_csr_agent_rp_valid),                               //          .valid
		.sink_data          (eth_mdio_csr_agent_rp_data),                                //          .data
		.sink_startofpacket (eth_mdio_csr_agent_rp_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (eth_mdio_csr_agent_rp_endofpacket),                         //          .endofpacket
		.clk                (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                      //       src.ready
		.src_valid          (router_006_src_valid),                                      //          .valid
		.src_data           (router_006_src_data),                                       //          .data
		.src_channel        (router_006_src_channel),                                    //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                 //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (92),
		.PKT_DEST_ID_L             (90),
		.PKT_SRC_ID_H              (89),
		.PKT_SRC_ID_L              (87),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (5),
		.PIPELINED                 (0),
		.ST_DATA_W                 (106),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (6),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) altera_avalon_mm_bridge_avalon_universal_master_0_limiter (
		.clk                    (mm_clk_module_clk_clk),                                                           //       clk.clk
		.reset                  (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                                                //          .valid
		.cmd_sink_data          (router_src_data),                                                                 //          .data
		.cmd_sink_channel       (router_src_channel),                                                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                                                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                                          //          .endofpacket
		.cmd_src_ready          (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                                               //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                                               //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                                             //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                                                //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                                                       //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                                         //          .endofpacket
		.rsp_src_ready          (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_valid_data)         // cmd_valid.data
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (mm_clk_module_clk_clk),                                                           //        clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset),                       //  clk_reset.reset
		.sink_ready         (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_channel),       //           .channel
		.sink_data          (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (altera_avalon_mm_bridge_avalon_universal_master_0_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                                            //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                            //           .valid
		.src0_data          (cmd_demux_src0_data),                                                             //           .data
		.src0_channel       (cmd_demux_src0_channel),                                                          //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                                    //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                                                      //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                                            //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                                            //           .valid
		.src1_data          (cmd_demux_src1_data),                                                             //           .data
		.src1_channel       (cmd_demux_src1_channel),                                                          //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                                                    //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                                                      //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                                                            //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                                                            //           .valid
		.src2_data          (cmd_demux_src2_data),                                                             //           .data
		.src2_channel       (cmd_demux_src2_channel),                                                          //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                                                    //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                                                      //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                                                            //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                                                            //           .valid
		.src3_data          (cmd_demux_src3_data),                                                             //           .data
		.src3_channel       (cmd_demux_src3_channel),                                                          //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                                                    //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                                                      //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                                                            //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                                                            //           .valid
		.src4_data          (cmd_demux_src4_data),                                                             //           .data
		.src4_channel       (cmd_demux_src4_channel),                                                          //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                                                    //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                                                      //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                                                            //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                                                            //           .valid
		.src5_data          (cmd_demux_src5_data),                                                             //           .data
		.src5_channel       (cmd_demux_src5_channel),                                                          //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                                                    //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                                                       //           .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset               (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src0_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                                 //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset               (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src1_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                                 //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset               (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                     //          .valid
		.src_data            (cmd_mux_002_src_data),                                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src2_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                                 //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (tx_clk_module_clk_clk),                            //       clk.clk
		.reset               (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                //          .valid
		.sink0_channel       (crosser_out_channel),                              //          .channel
		.sink0_data          (crosser_out_data),                                 //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                           //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (altera_10gbaser_xgmii_rx_clk_clk),                 //       clk.clk
		.reset               (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                            //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                            //          .valid
		.sink0_channel       (crosser_001_out_channel),                          //          .channel
		.sink0_data          (crosser_001_out_data),                             //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                       //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset               (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                     //          .valid
		.src_data            (cmd_mux_005_src_data),                                      //          .data
		.src_channel         (cmd_mux_005_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src5_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                                 //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                      //      sink.ready
		.sink_channel       (router_001_src_channel),                                    //          .channel
		.sink_data          (router_001_src_data),                                       //          .data
		.sink_startofpacket (router_001_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_001_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                 //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                      //      sink.ready
		.sink_channel       (router_002_src_channel),                                    //          .channel
		.sink_data          (router_002_src_data),                                       //          .data
		.sink_startofpacket (router_002_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_002_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                             //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                      //      sink.ready
		.sink_channel       (router_003_src_channel),                                    //          .channel
		.sink_data          (router_003_src_data),                                       //          .data
		.sink_startofpacket (router_003_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_003_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                             //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (tx_clk_module_clk_clk),                            //       clk.clk
		.reset              (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (altera_10gbaser_xgmii_rx_clk_clk),                 //       clk.clk
		.reset              (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                    //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset              (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                      //      sink.ready
		.sink_channel       (router_006_src_channel),                                    //          .channel
		.sink_data          (router_006_src_data),                                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_006_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                             //          .endofpacket
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (mm_clk_module_clk_clk),                                     //       clk.clk
		.reset               (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                                         //          .valid
		.src_data            (rsp_mux_src_data),                                          //          .data
		.src_channel         (rsp_mux_src_channel),                                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.sink0_data          (rsp_demux_src0_data),                                       //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                   //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                            //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                   //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                            //          .endofpacket
		.sink3_ready         (crosser_002_out_ready),                                     //     sink3.ready
		.sink3_valid         (crosser_002_out_valid),                                     //          .valid
		.sink3_channel       (crosser_002_out_channel),                                   //          .channel
		.sink3_data          (crosser_002_out_data),                                      //          .data
		.sink3_startofpacket (crosser_002_out_startofpacket),                             //          .startofpacket
		.sink3_endofpacket   (crosser_002_out_endofpacket),                               //          .endofpacket
		.sink4_ready         (crosser_003_out_ready),                                     //     sink4.ready
		.sink4_valid         (crosser_003_out_valid),                                     //          .valid
		.sink4_channel       (crosser_003_out_channel),                                   //          .channel
		.sink4_data          (crosser_003_out_data),                                      //          .data
		.sink4_startofpacket (crosser_003_out_startofpacket),                             //          .startofpacket
		.sink4_endofpacket   (crosser_003_out_endofpacket),                               //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                                  //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                                  //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                                //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                                   //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                          //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket)                             //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (mm_clk_module_clk_clk),                                     //        in_clk.clk
		.in_reset          (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (tx_clk_module_clk_clk),                                     //       out_clk.clk
		.out_reset         (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (cmd_demux_src3_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src3_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src3_channel),                                    //              .channel
		.in_data           (cmd_demux_src3_data),                                       //              .data
		.out_ready         (crosser_out_ready),                                         //           out.ready
		.out_valid         (crosser_out_valid),                                         //              .valid
		.out_startofpacket (crosser_out_startofpacket),                                 //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                                   //              .endofpacket
		.out_channel       (crosser_out_channel),                                       //              .channel
		.out_data          (crosser_out_data),                                          //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (mm_clk_module_clk_clk),                                     //        in_clk.clk
		.in_reset          (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (altera_10gbaser_xgmii_rx_clk_clk),                          //       out_clk.clk
		.out_reset         (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset),          // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                      //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                      //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                              //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                                //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                                    //              .channel
		.in_data           (cmd_demux_src4_data),                                       //              .data
		.out_ready         (crosser_001_out_ready),                                     //           out.ready
		.out_valid         (crosser_001_out_valid),                                     //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_001_out_channel),                                   //              .channel
		.out_data          (crosser_001_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (tx_clk_module_clk_clk),                                     //        in_clk.clk
		.in_reset          (tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (mm_clk_module_clk_clk),                                     //       out_clk.clk
		.out_reset         (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_003_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_003_src0_channel),                                //              .channel
		.in_data           (rsp_demux_003_src0_data),                                   //              .data
		.out_ready         (crosser_002_out_ready),                                     //           out.ready
		.out_valid         (crosser_002_out_valid),                                     //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_002_out_channel),                                   //              .channel
		.out_data          (crosser_002_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (106),
		.BITS_PER_SYMBOL     (106),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (6),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (altera_10gbaser_xgmii_rx_clk_clk),                          //        in_clk.clk
		.in_reset          (rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset),          //  in_clk_reset.reset
		.out_clk           (mm_clk_module_clk_clk),                                     //       out_clk.clk
		.out_reset         (altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                                  //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                                  //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                          //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                            //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                                //              .channel
		.in_data           (rsp_demux_004_src0_data),                                   //              .data
		.out_ready         (crosser_003_out_ready),                                     //           out.ready
		.out_valid         (crosser_003_out_valid),                                     //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                             //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                               //              .endofpacket
		.out_channel       (crosser_003_out_channel),                                   //              .channel
		.out_data          (crosser_003_out_data),                                      //              .data
		.in_empty          (1'b0),                                                      //   (terminated)
		.in_error          (1'b0),                                                      //   (terminated)
		.out_empty         (),                                                          //   (terminated)
		.out_error         ()                                                           //   (terminated)
	);

endmodule
