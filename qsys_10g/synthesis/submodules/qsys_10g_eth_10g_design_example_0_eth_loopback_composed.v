// qsys_10g_eth_10g_design_example_0_eth_loopback_composed.v

// This file was auto-generated from altera_eth_loopback_composed_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 205 at 2014.10.27.20:38:55

`timescale 1 ps / 1 ps
module qsys_10g_eth_10g_design_example_0_eth_loopback_composed (
		input  wire        tx_clk_clk,           //          tx_clk.clk
		input  wire        tx_reset_reset_n,     //        tx_reset.reset_n
		input  wire        rx_clk_clk,           //          rx_clk.clk
		input  wire        rx_reset_reset_n,     //        rx_reset.reset_n
		input  wire        csr_clk_clk,          //         csr_clk.clk
		input  wire        csr_reset_reset_n,    //       csr_reset.reset_n
		input  wire [71:0] lb_tx_sink_data_data, // lb_tx_sink_data.data
		output wire [71:0] lb_tx_src_data_data,  //  lb_tx_src_data.data
		input  wire [71:0] lb_rx_sink_data_data, // lb_rx_sink_data.data
		output wire [71:0] lb_rx_src_data_data,  //  lb_rx_src_data.data
		input  wire [3:0]  csr_address,          //             csr.address
		output wire        csr_waitrequest,      //                .waitrequest
		input  wire        csr_read,             //                .read
		output wire [31:0] csr_readdata,         //                .readdata
		input  wire        csr_write,            //                .write
		input  wire [31:0] csr_writedata         //                .writedata
	);

	wire         lc_splitter_timing_adapter_out_valid;                       // lc_splitter_timing_adapter:out_valid -> local_splitter:in0_valid
	wire  [71:0] lc_splitter_timing_adapter_out_data;                        // lc_splitter_timing_adapter:out_data -> local_splitter:in0_data
	wire         lc_splitter_timing_adapter_out_ready;                       // local_splitter:in0_ready -> lc_splitter_timing_adapter:out_ready
	wire         local_splitter_out0_valid;                                  // local_splitter:out0_valid -> line_loopback:in_valid_0
	wire  [71:0] local_splitter_out0_data;                                   // local_splitter:out0_data -> line_loopback:in_data_0
	wire         local_splitter_out0_ready;                                  // line_loopback:in_ready_0 -> local_splitter:out0_ready
	wire         local_splitter_out1_valid;                                  // local_splitter:out1_valid -> dc_fifo_1:in_valid
	wire  [71:0] local_splitter_out1_data;                                   // local_splitter:out1_data -> dc_fifo_1:in_data
	wire         local_splitter_out1_ready;                                  // dc_fifo_1:in_ready -> local_splitter:out1_ready
	wire         dc_fifo_1_out_valid;                                        // dc_fifo_1:out_valid -> local_loopback:in_valid_1
	wire  [71:0] dc_fifo_1_out_data;                                         // dc_fifo_1:out_data -> local_loopback:in_data_1
	wire         dc_fifo_1_out_ready;                                        // local_loopback:in_ready_1 -> dc_fifo_1:out_ready
	wire         line_loopback_avalon_streaming_source_valid;                // line_loopback:out_valid -> line_lb_timing_adapter:in_valid
	wire  [71:0] line_loopback_avalon_streaming_source_data;                 // line_loopback:out_data -> line_lb_timing_adapter:in_data
	wire         line_loopback_avalon_streaming_source_ready;                // line_lb_timing_adapter:in_ready -> line_loopback:out_ready
	wire         line_splitter_timing_adapter_out_valid;                     // line_splitter_timing_adapter:out_valid -> line_splitter:in0_valid
	wire  [71:0] line_splitter_timing_adapter_out_data;                      // line_splitter_timing_adapter:out_data -> line_splitter:in0_data
	wire         line_splitter_timing_adapter_out_ready;                     // line_splitter:in0_ready -> line_splitter_timing_adapter:out_ready
	wire         line_splitter_out0_valid;                                   // line_splitter:out0_valid -> dc_fifo_2:in_valid
	wire  [71:0] line_splitter_out0_data;                                    // line_splitter:out0_data -> dc_fifo_2:in_data
	wire         line_splitter_out0_ready;                                   // dc_fifo_2:in_ready -> line_splitter:out0_ready
	wire         dc_fifo_2_out_valid;                                        // dc_fifo_2:out_valid -> line_loopback:in_valid_1
	wire  [71:0] dc_fifo_2_out_data;                                         // dc_fifo_2:out_data -> line_loopback:in_data_1
	wire         dc_fifo_2_out_ready;                                        // line_loopback:in_ready_1 -> dc_fifo_2:out_ready
	wire         line_splitter_out1_valid;                                   // line_splitter:out1_valid -> local_loopback:in_valid_0
	wire  [71:0] line_splitter_out1_data;                                    // line_splitter:out1_data -> local_loopback:in_data_0
	wire         line_splitter_out1_ready;                                   // local_loopback:in_ready_0 -> line_splitter:out1_ready
	wire         local_loopback_avalon_streaming_source_valid;               // local_loopback:out_valid -> lc_lb_timing_adapter:in_valid
	wire  [71:0] local_loopback_avalon_streaming_source_data;                // local_loopback:out_data -> lc_lb_timing_adapter:in_data
	wire         local_loopback_avalon_streaming_source_ready;               // lc_lb_timing_adapter:in_ready -> local_loopback:out_ready
	wire         mm_pipeline_bridge_avalon_universal_master_0_waitrequest;   // mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_waitrequest -> mm_pipeline_bridge:uav_waitrequest
	wire   [2:0] mm_pipeline_bridge_avalon_universal_master_0_burstcount;    // mm_pipeline_bridge:uav_burstcount -> mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_burstcount
	wire  [31:0] mm_pipeline_bridge_avalon_universal_master_0_writedata;     // mm_pipeline_bridge:uav_writedata -> mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_writedata
	wire   [5:0] mm_pipeline_bridge_avalon_universal_master_0_address;       // mm_pipeline_bridge:uav_address -> mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_address
	wire         mm_pipeline_bridge_avalon_universal_master_0_lock;          // mm_pipeline_bridge:uav_lock -> mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_lock
	wire         mm_pipeline_bridge_avalon_universal_master_0_write;         // mm_pipeline_bridge:uav_write -> mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_write
	wire         mm_pipeline_bridge_avalon_universal_master_0_read;          // mm_pipeline_bridge:uav_read -> mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_read
	wire  [31:0] mm_pipeline_bridge_avalon_universal_master_0_readdata;      // mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_readdata -> mm_pipeline_bridge:uav_readdata
	wire         mm_pipeline_bridge_avalon_universal_master_0_debugaccess;   // mm_pipeline_bridge:uav_debugaccess -> mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_debugaccess
	wire   [3:0] mm_pipeline_bridge_avalon_universal_master_0_byteenable;    // mm_pipeline_bridge:uav_byteenable -> mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_byteenable
	wire         mm_pipeline_bridge_avalon_universal_master_0_readdatavalid; // mm_interconnect_0:mm_pipeline_bridge_avalon_universal_master_0_readdatavalid -> mm_pipeline_bridge:uav_readdatavalid
	wire  [31:0] mm_interconnect_0_local_loopback_control_writedata;         // mm_interconnect_0:local_loopback_control_writedata -> local_loopback:control_writedata
	wire   [0:0] mm_interconnect_0_local_loopback_control_address;           // mm_interconnect_0:local_loopback_control_address -> local_loopback:control_address
	wire         mm_interconnect_0_local_loopback_control_write;             // mm_interconnect_0:local_loopback_control_write -> local_loopback:control_write
	wire         mm_interconnect_0_local_loopback_control_read;              // mm_interconnect_0:local_loopback_control_read -> local_loopback:control_read
	wire  [31:0] mm_interconnect_0_local_loopback_control_readdata;          // local_loopback:control_readdata -> mm_interconnect_0:local_loopback_control_readdata
	wire  [31:0] mm_interconnect_0_line_loopback_control_writedata;          // mm_interconnect_0:line_loopback_control_writedata -> line_loopback:control_writedata
	wire   [0:0] mm_interconnect_0_line_loopback_control_address;            // mm_interconnect_0:line_loopback_control_address -> line_loopback:control_address
	wire         mm_interconnect_0_line_loopback_control_write;              // mm_interconnect_0:line_loopback_control_write -> line_loopback:control_write
	wire         mm_interconnect_0_line_loopback_control_read;               // mm_interconnect_0:line_loopback_control_read -> line_loopback:control_read
	wire  [31:0] mm_interconnect_0_line_loopback_control_readdata;           // line_loopback:control_readdata -> mm_interconnect_0:line_loopback_control_readdata
	wire         rst_controller_reset_out_reset;                             // rst_controller:reset_out -> [dc_fifo_1:in_reset_n, dc_fifo_2:out_reset_n, lc_splitter_timing_adapter:reset_n, line_lb_timing_adapter:reset_n, line_loopback:reset_n, local_splitter:reset, mm_interconnect_0:line_loopback_clock_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;                         // rst_controller_001:reset_out -> [dc_fifo_1:out_reset_n, dc_fifo_2:in_reset_n, lc_lb_timing_adapter:reset_n, line_splitter:reset, line_splitter_timing_adapter:reset_n, local_loopback:reset_n, mm_interconnect_0:local_loopback_clock_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_002_reset_out_reset;                         // rst_controller_002:reset_out -> [mm_interconnect_0:mm_pipeline_bridge_reset_reset_bridge_in_reset_reset, mm_pipeline_bridge:reset]

	qsys_10g_eth_10g_design_example_0_eth_loopback_composed_lc_splitter_timing_adapter lc_splitter_timing_adapter (
		.clk       (tx_clk_clk),                           //   clk.clk
		.reset_n   (~rst_controller_reset_out_reset),      // reset.reset_n
		.in_data   (lb_tx_sink_data_data),                 //    in.data
		.out_data  (lc_splitter_timing_adapter_out_data),  //   out.data
		.out_valid (lc_splitter_timing_adapter_out_valid), //      .valid
		.out_ready (lc_splitter_timing_adapter_out_ready)  //      .ready
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (0),
		.USE_PACKETS       (0),
		.DATA_WIDTH        (72),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (1),
		.BITS_PER_SYMBOL   (72),
		.EMPTY_WIDTH       (1)
	) local_splitter (
		.clk                 (tx_clk_clk),                           //   clk.clk
		.reset               (rst_controller_reset_out_reset),       // reset.reset
		.in0_ready           (lc_splitter_timing_adapter_out_ready), //    in.ready
		.in0_valid           (lc_splitter_timing_adapter_out_valid), //      .valid
		.in0_data            (lc_splitter_timing_adapter_out_data),  //      .data
		.out0_ready          (local_splitter_out0_ready),            //  out0.ready
		.out0_valid          (local_splitter_out0_valid),            //      .valid
		.out0_data           (local_splitter_out0_data),             //      .data
		.out1_ready          (local_splitter_out1_ready),            //  out1.ready
		.out1_valid          (local_splitter_out1_valid),            //      .valid
		.out1_data           (local_splitter_out1_data),             //      .data
		.in0_startofpacket   (1'b0),                                 // (terminated)
		.in0_endofpacket     (1'b0),                                 // (terminated)
		.in0_empty           (1'b0),                                 // (terminated)
		.in0_channel         (1'b0),                                 // (terminated)
		.in0_error           (1'b0),                                 // (terminated)
		.out0_startofpacket  (),                                     // (terminated)
		.out0_endofpacket    (),                                     // (terminated)
		.out0_empty          (),                                     // (terminated)
		.out0_channel        (),                                     // (terminated)
		.out0_error          (),                                     // (terminated)
		.out1_startofpacket  (),                                     // (terminated)
		.out1_endofpacket    (),                                     // (terminated)
		.out1_empty          (),                                     // (terminated)
		.out1_channel        (),                                     // (terminated)
		.out1_error          (),                                     // (terminated)
		.out2_ready          (1'b1),                                 // (terminated)
		.out2_valid          (),                                     // (terminated)
		.out2_startofpacket  (),                                     // (terminated)
		.out2_endofpacket    (),                                     // (terminated)
		.out2_empty          (),                                     // (terminated)
		.out2_channel        (),                                     // (terminated)
		.out2_error          (),                                     // (terminated)
		.out2_data           (),                                     // (terminated)
		.out3_ready          (1'b1),                                 // (terminated)
		.out3_valid          (),                                     // (terminated)
		.out3_startofpacket  (),                                     // (terminated)
		.out3_endofpacket    (),                                     // (terminated)
		.out3_empty          (),                                     // (terminated)
		.out3_channel        (),                                     // (terminated)
		.out3_error          (),                                     // (terminated)
		.out3_data           (),                                     // (terminated)
		.out4_ready          (1'b1),                                 // (terminated)
		.out4_valid          (),                                     // (terminated)
		.out4_startofpacket  (),                                     // (terminated)
		.out4_endofpacket    (),                                     // (terminated)
		.out4_empty          (),                                     // (terminated)
		.out4_channel        (),                                     // (terminated)
		.out4_error          (),                                     // (terminated)
		.out4_data           (),                                     // (terminated)
		.out5_ready          (1'b1),                                 // (terminated)
		.out5_valid          (),                                     // (terminated)
		.out5_startofpacket  (),                                     // (terminated)
		.out5_endofpacket    (),                                     // (terminated)
		.out5_empty          (),                                     // (terminated)
		.out5_channel        (),                                     // (terminated)
		.out5_error          (),                                     // (terminated)
		.out5_data           (),                                     // (terminated)
		.out6_ready          (1'b1),                                 // (terminated)
		.out6_valid          (),                                     // (terminated)
		.out6_startofpacket  (),                                     // (terminated)
		.out6_endofpacket    (),                                     // (terminated)
		.out6_empty          (),                                     // (terminated)
		.out6_channel        (),                                     // (terminated)
		.out6_error          (),                                     // (terminated)
		.out6_data           (),                                     // (terminated)
		.out7_ready          (1'b1),                                 // (terminated)
		.out7_valid          (),                                     // (terminated)
		.out7_startofpacket  (),                                     // (terminated)
		.out7_endofpacket    (),                                     // (terminated)
		.out7_empty          (),                                     // (terminated)
		.out7_channel        (),                                     // (terminated)
		.out7_error          (),                                     // (terminated)
		.out7_data           (),                                     // (terminated)
		.out8_ready          (1'b1),                                 // (terminated)
		.out8_valid          (),                                     // (terminated)
		.out8_startofpacket  (),                                     // (terminated)
		.out8_endofpacket    (),                                     // (terminated)
		.out8_empty          (),                                     // (terminated)
		.out8_channel        (),                                     // (terminated)
		.out8_error          (),                                     // (terminated)
		.out8_data           (),                                     // (terminated)
		.out9_ready          (1'b1),                                 // (terminated)
		.out9_valid          (),                                     // (terminated)
		.out9_startofpacket  (),                                     // (terminated)
		.out9_endofpacket    (),                                     // (terminated)
		.out9_empty          (),                                     // (terminated)
		.out9_channel        (),                                     // (terminated)
		.out9_error          (),                                     // (terminated)
		.out9_data           (),                                     // (terminated)
		.out10_ready         (1'b1),                                 // (terminated)
		.out10_valid         (),                                     // (terminated)
		.out10_startofpacket (),                                     // (terminated)
		.out10_endofpacket   (),                                     // (terminated)
		.out10_empty         (),                                     // (terminated)
		.out10_channel       (),                                     // (terminated)
		.out10_error         (),                                     // (terminated)
		.out10_data          (),                                     // (terminated)
		.out11_ready         (1'b1),                                 // (terminated)
		.out11_valid         (),                                     // (terminated)
		.out11_startofpacket (),                                     // (terminated)
		.out11_endofpacket   (),                                     // (terminated)
		.out11_empty         (),                                     // (terminated)
		.out11_channel       (),                                     // (terminated)
		.out11_error         (),                                     // (terminated)
		.out11_data          (),                                     // (terminated)
		.out12_ready         (1'b1),                                 // (terminated)
		.out12_valid         (),                                     // (terminated)
		.out12_startofpacket (),                                     // (terminated)
		.out12_endofpacket   (),                                     // (terminated)
		.out12_empty         (),                                     // (terminated)
		.out12_channel       (),                                     // (terminated)
		.out12_error         (),                                     // (terminated)
		.out12_data          (),                                     // (terminated)
		.out13_ready         (1'b1),                                 // (terminated)
		.out13_valid         (),                                     // (terminated)
		.out13_startofpacket (),                                     // (terminated)
		.out13_endofpacket   (),                                     // (terminated)
		.out13_empty         (),                                     // (terminated)
		.out13_channel       (),                                     // (terminated)
		.out13_error         (),                                     // (terminated)
		.out13_data          (),                                     // (terminated)
		.out14_ready         (1'b1),                                 // (terminated)
		.out14_valid         (),                                     // (terminated)
		.out14_startofpacket (),                                     // (terminated)
		.out14_endofpacket   (),                                     // (terminated)
		.out14_empty         (),                                     // (terminated)
		.out14_channel       (),                                     // (terminated)
		.out14_error         (),                                     // (terminated)
		.out14_data          (),                                     // (terminated)
		.out15_ready         (1'b1),                                 // (terminated)
		.out15_valid         (),                                     // (terminated)
		.out15_startofpacket (),                                     // (terminated)
		.out15_endofpacket   (),                                     // (terminated)
		.out15_empty         (),                                     // (terminated)
		.out15_channel       (),                                     // (terminated)
		.out15_error         (),                                     // (terminated)
		.out15_data          ()                                      // (terminated)
	);

	altera_eth_loopback #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (72),
		.ERROR_WIDTH      (0),
		.USE_PACKETS      (0),
		.EMPTY_WIDTH      (0)
	) line_loopback (
		.clk               (tx_clk_clk),                                        //                   clock.clk
		.reset_n           (~rst_controller_reset_out_reset),                   //             clock_reset.reset_n
		.control_address   (mm_interconnect_0_line_loopback_control_address),   //                 control.address
		.control_write     (mm_interconnect_0_line_loopback_control_write),     //                        .write
		.control_read      (mm_interconnect_0_line_loopback_control_read),      //                        .read
		.control_readdata  (mm_interconnect_0_line_loopback_control_readdata),  //                        .readdata
		.control_writedata (mm_interconnect_0_line_loopback_control_writedata), //                        .writedata
		.in_data_0         (local_splitter_out0_data),                          //   avalon_streaming_sink.data
		.in_valid_0        (local_splitter_out0_valid),                         //                        .valid
		.in_ready_0        (local_splitter_out0_ready),                         //                        .ready
		.in_data_1         (dc_fifo_2_out_data),                                // avalon_streaming_sink_1.data
		.in_valid_1        (dc_fifo_2_out_valid),                               //                        .valid
		.in_ready_1        (dc_fifo_2_out_ready),                               //                        .ready
		.out_data          (line_loopback_avalon_streaming_source_data),        // avalon_streaming_source.data
		.out_valid         (line_loopback_avalon_streaming_source_valid),       //                        .valid
		.out_ready         (line_loopback_avalon_streaming_source_ready)        //                        .ready
	);

	qsys_10g_eth_10g_design_example_0_eth_loopback_composed_line_lb_timing_adapter line_lb_timing_adapter (
		.clk      (tx_clk_clk),                                  //   clk.clk
		.reset_n  (~rst_controller_reset_out_reset),             // reset.reset_n
		.in_data  (line_loopback_avalon_streaming_source_data),  //    in.data
		.in_valid (line_loopback_avalon_streaming_source_valid), //      .valid
		.in_ready (line_loopback_avalon_streaming_source_ready), //      .ready
		.out_data (lb_tx_src_data_data)                          //   out.data
	);

	qsys_10g_eth_10g_design_example_0_eth_loopback_composed_lc_splitter_timing_adapter line_splitter_timing_adapter (
		.clk       (rx_clk_clk),                             //   clk.clk
		.reset_n   (~rst_controller_001_reset_out_reset),    // reset.reset_n
		.in_data   (lb_rx_sink_data_data),                   //    in.data
		.out_data  (line_splitter_timing_adapter_out_data),  //   out.data
		.out_valid (line_splitter_timing_adapter_out_valid), //      .valid
		.out_ready (line_splitter_timing_adapter_out_ready)  //      .ready
	);

	altera_avalon_st_splitter #(
		.NUMBER_OF_OUTPUTS (2),
		.QUALIFY_VALID_OUT (0),
		.USE_PACKETS       (0),
		.DATA_WIDTH        (72),
		.CHANNEL_WIDTH     (1),
		.ERROR_WIDTH       (1),
		.BITS_PER_SYMBOL   (72),
		.EMPTY_WIDTH       (1)
	) line_splitter (
		.clk                 (rx_clk_clk),                             //   clk.clk
		.reset               (rst_controller_001_reset_out_reset),     // reset.reset
		.in0_ready           (line_splitter_timing_adapter_out_ready), //    in.ready
		.in0_valid           (line_splitter_timing_adapter_out_valid), //      .valid
		.in0_data            (line_splitter_timing_adapter_out_data),  //      .data
		.out0_ready          (line_splitter_out0_ready),               //  out0.ready
		.out0_valid          (line_splitter_out0_valid),               //      .valid
		.out0_data           (line_splitter_out0_data),                //      .data
		.out1_ready          (line_splitter_out1_ready),               //  out1.ready
		.out1_valid          (line_splitter_out1_valid),               //      .valid
		.out1_data           (line_splitter_out1_data),                //      .data
		.in0_startofpacket   (1'b0),                                   // (terminated)
		.in0_endofpacket     (1'b0),                                   // (terminated)
		.in0_empty           (1'b0),                                   // (terminated)
		.in0_channel         (1'b0),                                   // (terminated)
		.in0_error           (1'b0),                                   // (terminated)
		.out0_startofpacket  (),                                       // (terminated)
		.out0_endofpacket    (),                                       // (terminated)
		.out0_empty          (),                                       // (terminated)
		.out0_channel        (),                                       // (terminated)
		.out0_error          (),                                       // (terminated)
		.out1_startofpacket  (),                                       // (terminated)
		.out1_endofpacket    (),                                       // (terminated)
		.out1_empty          (),                                       // (terminated)
		.out1_channel        (),                                       // (terminated)
		.out1_error          (),                                       // (terminated)
		.out2_ready          (1'b1),                                   // (terminated)
		.out2_valid          (),                                       // (terminated)
		.out2_startofpacket  (),                                       // (terminated)
		.out2_endofpacket    (),                                       // (terminated)
		.out2_empty          (),                                       // (terminated)
		.out2_channel        (),                                       // (terminated)
		.out2_error          (),                                       // (terminated)
		.out2_data           (),                                       // (terminated)
		.out3_ready          (1'b1),                                   // (terminated)
		.out3_valid          (),                                       // (terminated)
		.out3_startofpacket  (),                                       // (terminated)
		.out3_endofpacket    (),                                       // (terminated)
		.out3_empty          (),                                       // (terminated)
		.out3_channel        (),                                       // (terminated)
		.out3_error          (),                                       // (terminated)
		.out3_data           (),                                       // (terminated)
		.out4_ready          (1'b1),                                   // (terminated)
		.out4_valid          (),                                       // (terminated)
		.out4_startofpacket  (),                                       // (terminated)
		.out4_endofpacket    (),                                       // (terminated)
		.out4_empty          (),                                       // (terminated)
		.out4_channel        (),                                       // (terminated)
		.out4_error          (),                                       // (terminated)
		.out4_data           (),                                       // (terminated)
		.out5_ready          (1'b1),                                   // (terminated)
		.out5_valid          (),                                       // (terminated)
		.out5_startofpacket  (),                                       // (terminated)
		.out5_endofpacket    (),                                       // (terminated)
		.out5_empty          (),                                       // (terminated)
		.out5_channel        (),                                       // (terminated)
		.out5_error          (),                                       // (terminated)
		.out5_data           (),                                       // (terminated)
		.out6_ready          (1'b1),                                   // (terminated)
		.out6_valid          (),                                       // (terminated)
		.out6_startofpacket  (),                                       // (terminated)
		.out6_endofpacket    (),                                       // (terminated)
		.out6_empty          (),                                       // (terminated)
		.out6_channel        (),                                       // (terminated)
		.out6_error          (),                                       // (terminated)
		.out6_data           (),                                       // (terminated)
		.out7_ready          (1'b1),                                   // (terminated)
		.out7_valid          (),                                       // (terminated)
		.out7_startofpacket  (),                                       // (terminated)
		.out7_endofpacket    (),                                       // (terminated)
		.out7_empty          (),                                       // (terminated)
		.out7_channel        (),                                       // (terminated)
		.out7_error          (),                                       // (terminated)
		.out7_data           (),                                       // (terminated)
		.out8_ready          (1'b1),                                   // (terminated)
		.out8_valid          (),                                       // (terminated)
		.out8_startofpacket  (),                                       // (terminated)
		.out8_endofpacket    (),                                       // (terminated)
		.out8_empty          (),                                       // (terminated)
		.out8_channel        (),                                       // (terminated)
		.out8_error          (),                                       // (terminated)
		.out8_data           (),                                       // (terminated)
		.out9_ready          (1'b1),                                   // (terminated)
		.out9_valid          (),                                       // (terminated)
		.out9_startofpacket  (),                                       // (terminated)
		.out9_endofpacket    (),                                       // (terminated)
		.out9_empty          (),                                       // (terminated)
		.out9_channel        (),                                       // (terminated)
		.out9_error          (),                                       // (terminated)
		.out9_data           (),                                       // (terminated)
		.out10_ready         (1'b1),                                   // (terminated)
		.out10_valid         (),                                       // (terminated)
		.out10_startofpacket (),                                       // (terminated)
		.out10_endofpacket   (),                                       // (terminated)
		.out10_empty         (),                                       // (terminated)
		.out10_channel       (),                                       // (terminated)
		.out10_error         (),                                       // (terminated)
		.out10_data          (),                                       // (terminated)
		.out11_ready         (1'b1),                                   // (terminated)
		.out11_valid         (),                                       // (terminated)
		.out11_startofpacket (),                                       // (terminated)
		.out11_endofpacket   (),                                       // (terminated)
		.out11_empty         (),                                       // (terminated)
		.out11_channel       (),                                       // (terminated)
		.out11_error         (),                                       // (terminated)
		.out11_data          (),                                       // (terminated)
		.out12_ready         (1'b1),                                   // (terminated)
		.out12_valid         (),                                       // (terminated)
		.out12_startofpacket (),                                       // (terminated)
		.out12_endofpacket   (),                                       // (terminated)
		.out12_empty         (),                                       // (terminated)
		.out12_channel       (),                                       // (terminated)
		.out12_error         (),                                       // (terminated)
		.out12_data          (),                                       // (terminated)
		.out13_ready         (1'b1),                                   // (terminated)
		.out13_valid         (),                                       // (terminated)
		.out13_startofpacket (),                                       // (terminated)
		.out13_endofpacket   (),                                       // (terminated)
		.out13_empty         (),                                       // (terminated)
		.out13_channel       (),                                       // (terminated)
		.out13_error         (),                                       // (terminated)
		.out13_data          (),                                       // (terminated)
		.out14_ready         (1'b1),                                   // (terminated)
		.out14_valid         (),                                       // (terminated)
		.out14_startofpacket (),                                       // (terminated)
		.out14_endofpacket   (),                                       // (terminated)
		.out14_empty         (),                                       // (terminated)
		.out14_channel       (),                                       // (terminated)
		.out14_error         (),                                       // (terminated)
		.out14_data          (),                                       // (terminated)
		.out15_ready         (1'b1),                                   // (terminated)
		.out15_valid         (),                                       // (terminated)
		.out15_startofpacket (),                                       // (terminated)
		.out15_endofpacket   (),                                       // (terminated)
		.out15_empty         (),                                       // (terminated)
		.out15_channel       (),                                       // (terminated)
		.out15_error         (),                                       // (terminated)
		.out15_data          ()                                        // (terminated)
	);

	altera_eth_loopback #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (72),
		.ERROR_WIDTH      (0),
		.USE_PACKETS      (0),
		.EMPTY_WIDTH      (0)
	) local_loopback (
		.clk               (rx_clk_clk),                                         //                   clock.clk
		.reset_n           (~rst_controller_001_reset_out_reset),                //             clock_reset.reset_n
		.control_address   (mm_interconnect_0_local_loopback_control_address),   //                 control.address
		.control_write     (mm_interconnect_0_local_loopback_control_write),     //                        .write
		.control_read      (mm_interconnect_0_local_loopback_control_read),      //                        .read
		.control_readdata  (mm_interconnect_0_local_loopback_control_readdata),  //                        .readdata
		.control_writedata (mm_interconnect_0_local_loopback_control_writedata), //                        .writedata
		.in_data_0         (line_splitter_out1_data),                            //   avalon_streaming_sink.data
		.in_valid_0        (line_splitter_out1_valid),                           //                        .valid
		.in_ready_0        (line_splitter_out1_ready),                           //                        .ready
		.in_data_1         (dc_fifo_1_out_data),                                 // avalon_streaming_sink_1.data
		.in_valid_1        (dc_fifo_1_out_valid),                                //                        .valid
		.in_ready_1        (dc_fifo_1_out_ready),                                //                        .ready
		.out_data          (local_loopback_avalon_streaming_source_data),        // avalon_streaming_source.data
		.out_valid         (local_loopback_avalon_streaming_source_valid),       //                        .valid
		.out_ready         (local_loopback_avalon_streaming_source_ready)        //                        .ready
	);

	qsys_10g_eth_10g_design_example_0_eth_loopback_composed_line_lb_timing_adapter lc_lb_timing_adapter (
		.clk      (rx_clk_clk),                                   //   clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),          // reset.reset_n
		.in_data  (local_loopback_avalon_streaming_source_data),  //    in.data
		.in_valid (local_loopback_avalon_streaming_source_valid), //      .valid
		.in_ready (local_loopback_avalon_streaming_source_ready), //      .ready
		.out_data (lb_rx_src_data_data)                           //   out.data
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (72),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (0),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (2),
		.RD_SYNC_DEPTH      (2)
	) dc_fifo_1 (
		.in_clk            (tx_clk_clk),                           //        in_clk.clk
		.in_reset_n        (~rst_controller_reset_out_reset),      //  in_clk_reset.reset_n
		.out_clk           (rx_clk_clk),                           //       out_clk.clk
		.out_reset_n       (~rst_controller_001_reset_out_reset),  // out_clk_reset.reset_n
		.in_data           (local_splitter_out1_data),             //            in.data
		.in_valid          (local_splitter_out1_valid),            //              .valid
		.in_ready          (local_splitter_out1_ready),            //              .ready
		.out_data          (dc_fifo_1_out_data),                   //           out.data
		.out_valid         (dc_fifo_1_out_valid),                  //              .valid
		.out_ready         (dc_fifo_1_out_ready),                  //              .ready
		.in_csr_address    (1'b0),                                 //   (terminated)
		.in_csr_read       (1'b0),                                 //   (terminated)
		.in_csr_write      (1'b0),                                 //   (terminated)
		.in_csr_readdata   (),                                     //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000), //   (terminated)
		.out_csr_address   (1'b0),                                 //   (terminated)
		.out_csr_read      (1'b0),                                 //   (terminated)
		.out_csr_write     (1'b0),                                 //   (terminated)
		.out_csr_readdata  (),                                     //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000), //   (terminated)
		.in_startofpacket  (1'b0),                                 //   (terminated)
		.in_endofpacket    (1'b0),                                 //   (terminated)
		.out_startofpacket (),                                     //   (terminated)
		.out_endofpacket   ()                                      //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (72),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (0),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (2),
		.RD_SYNC_DEPTH      (2)
	) dc_fifo_2 (
		.in_clk            (rx_clk_clk),                           //        in_clk.clk
		.in_reset_n        (~rst_controller_001_reset_out_reset),  //  in_clk_reset.reset_n
		.out_clk           (tx_clk_clk),                           //       out_clk.clk
		.out_reset_n       (~rst_controller_reset_out_reset),      // out_clk_reset.reset_n
		.in_data           (line_splitter_out0_data),              //            in.data
		.in_valid          (line_splitter_out0_valid),             //              .valid
		.in_ready          (line_splitter_out0_ready),             //              .ready
		.out_data          (dc_fifo_2_out_data),                   //           out.data
		.out_valid         (dc_fifo_2_out_valid),                  //              .valid
		.out_ready         (dc_fifo_2_out_ready),                  //              .ready
		.in_csr_address    (1'b0),                                 //   (terminated)
		.in_csr_read       (1'b0),                                 //   (terminated)
		.in_csr_write      (1'b0),                                 //   (terminated)
		.in_csr_readdata   (),                                     //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000), //   (terminated)
		.out_csr_address   (1'b0),                                 //   (terminated)
		.out_csr_read      (1'b0),                                 //   (terminated)
		.out_csr_write     (1'b0),                                 //   (terminated)
		.out_csr_readdata  (),                                     //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000), //   (terminated)
		.in_startofpacket  (1'b0),                                 //   (terminated)
		.in_endofpacket    (1'b0),                                 //   (terminated)
		.out_startofpacket (),                                     //   (terminated)
		.out_endofpacket   ()                                      //   (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (4),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (6),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_pipeline_bridge (
		.clk                      (csr_clk_clk),                                                //                       clk.clk
		.reset                    (rst_controller_002_reset_out_reset),                         //                     reset.reset
		.uav_address              (mm_pipeline_bridge_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_pipeline_bridge_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_pipeline_bridge_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_pipeline_bridge_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_pipeline_bridge_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_pipeline_bridge_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_pipeline_bridge_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_pipeline_bridge_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_pipeline_bridge_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_pipeline_bridge_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_pipeline_bridge_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (csr_address),                                                //      avalon_anti_master_0.address
		.av_waitrequest           (csr_waitrequest),                                            //                          .waitrequest
		.av_read                  (csr_read),                                                   //                          .read
		.av_readdata              (csr_readdata),                                               //                          .readdata
		.av_write                 (csr_write),                                                  //                          .write
		.av_writedata             (csr_writedata),                                              //                          .writedata
		.av_burstcount            (1'b1),                                                       //               (terminated)
		.av_byteenable            (4'b1111),                                                    //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                       //               (terminated)
		.av_begintransfer         (1'b0),                                                       //               (terminated)
		.av_chipselect            (1'b0),                                                       //               (terminated)
		.av_readdatavalid         (),                                                           //               (terminated)
		.av_lock                  (1'b0),                                                       //               (terminated)
		.av_debugaccess           (1'b0),                                                       //               (terminated)
		.uav_clken                (),                                                           //               (terminated)
		.av_clken                 (1'b1),                                                       //               (terminated)
		.uav_response             (2'b00),                                                      //               (terminated)
		.av_response              (),                                                           //               (terminated)
		.uav_writeresponserequest (),                                                           //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                       //               (terminated)
		.av_writeresponserequest  (1'b0),                                                       //               (terminated)
		.av_writeresponsevalid    ()                                                            //               (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_loopback_composed_mm_interconnect_0 mm_interconnect_0 (
		.csr_clk_module_clk_clk                                     (csr_clk_clk),                                                //                               csr_clk_module_clk.clk
		.rx_clk_module_clk_clk                                      (rx_clk_clk),                                                 //                                rx_clk_module_clk.clk
		.tx_clk_module_clk_clk                                      (tx_clk_clk),                                                 //                                tx_clk_module_clk.clk
		.line_loopback_clock_reset_reset_bridge_in_reset_reset      (rst_controller_reset_out_reset),                             //  line_loopback_clock_reset_reset_bridge_in_reset.reset
		.local_loopback_clock_reset_reset_bridge_in_reset_reset     (rst_controller_001_reset_out_reset),                         // local_loopback_clock_reset_reset_bridge_in_reset.reset
		.mm_pipeline_bridge_reset_reset_bridge_in_reset_reset       (rst_controller_002_reset_out_reset),                         //   mm_pipeline_bridge_reset_reset_bridge_in_reset.reset
		.mm_pipeline_bridge_avalon_universal_master_0_address       (mm_pipeline_bridge_avalon_universal_master_0_address),       //     mm_pipeline_bridge_avalon_universal_master_0.address
		.mm_pipeline_bridge_avalon_universal_master_0_waitrequest   (mm_pipeline_bridge_avalon_universal_master_0_waitrequest),   //                                                 .waitrequest
		.mm_pipeline_bridge_avalon_universal_master_0_burstcount    (mm_pipeline_bridge_avalon_universal_master_0_burstcount),    //                                                 .burstcount
		.mm_pipeline_bridge_avalon_universal_master_0_byteenable    (mm_pipeline_bridge_avalon_universal_master_0_byteenable),    //                                                 .byteenable
		.mm_pipeline_bridge_avalon_universal_master_0_read          (mm_pipeline_bridge_avalon_universal_master_0_read),          //                                                 .read
		.mm_pipeline_bridge_avalon_universal_master_0_readdata      (mm_pipeline_bridge_avalon_universal_master_0_readdata),      //                                                 .readdata
		.mm_pipeline_bridge_avalon_universal_master_0_readdatavalid (mm_pipeline_bridge_avalon_universal_master_0_readdatavalid), //                                                 .readdatavalid
		.mm_pipeline_bridge_avalon_universal_master_0_write         (mm_pipeline_bridge_avalon_universal_master_0_write),         //                                                 .write
		.mm_pipeline_bridge_avalon_universal_master_0_writedata     (mm_pipeline_bridge_avalon_universal_master_0_writedata),     //                                                 .writedata
		.mm_pipeline_bridge_avalon_universal_master_0_lock          (mm_pipeline_bridge_avalon_universal_master_0_lock),          //                                                 .lock
		.mm_pipeline_bridge_avalon_universal_master_0_debugaccess   (mm_pipeline_bridge_avalon_universal_master_0_debugaccess),   //                                                 .debugaccess
		.line_loopback_control_address                              (mm_interconnect_0_line_loopback_control_address),            //                            line_loopback_control.address
		.line_loopback_control_write                                (mm_interconnect_0_line_loopback_control_write),              //                                                 .write
		.line_loopback_control_read                                 (mm_interconnect_0_line_loopback_control_read),               //                                                 .read
		.line_loopback_control_readdata                             (mm_interconnect_0_line_loopback_control_readdata),           //                                                 .readdata
		.line_loopback_control_writedata                            (mm_interconnect_0_line_loopback_control_writedata),          //                                                 .writedata
		.local_loopback_control_address                             (mm_interconnect_0_local_loopback_control_address),           //                           local_loopback_control.address
		.local_loopback_control_write                               (mm_interconnect_0_local_loopback_control_write),             //                                                 .write
		.local_loopback_control_read                                (mm_interconnect_0_local_loopback_control_read),              //                                                 .read
		.local_loopback_control_readdata                            (mm_interconnect_0_local_loopback_control_readdata),          //                                                 .readdata
		.local_loopback_control_writedata                           (mm_interconnect_0_local_loopback_control_writedata)          //                                                 .writedata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~tx_reset_reset_n),              // reset_in0.reset
		.clk            (tx_clk_clk),                     //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~rx_reset_reset_n),                  // reset_in0.reset
		.clk            (rx_clk_clk),                         //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~csr_reset_reset_n),                 // reset_in0.reset
		.clk            (csr_clk_clk),                        //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
