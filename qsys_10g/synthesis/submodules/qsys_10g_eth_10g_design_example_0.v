// qsys_10g_eth_10g_design_example_0.v

// This file was auto-generated from altera_eth_10g_design_example_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 205 at 2014.10.27.20:38:43

`timescale 1 ps / 1 ps
module qsys_10g_eth_10g_design_example_0 #(
		parameter starting_channel_number      = 0,
		parameter interface_type               = "Soft XAUI",
		parameter data_rate                    = "3125 Mbps",
		parameter xaui_pll_type                = "AUTO",
		parameter BASE_DATA_RATE               = "",
		parameter en_synce_support             = 0,
		parameter use_control_and_status_ports = 0,
		parameter external_pma_ctrl_reconf     = 0,
		parameter recovered_clk_out            = 0,
		parameter number_of_interfaces         = 1,
		parameter reconfig_interfaces          = 1,
		parameter use_rx_rate_match            = 0,
		parameter tx_termination               = "OCT_100_OHMS",
		parameter tx_vod_selection             = 4,
		parameter tx_preemp_pretap             = 0,
		parameter tx_preemp_pretap_inv         = "false",
		parameter tx_preemp_tap_1              = 0,
		parameter tx_preemp_tap_2              = 0,
		parameter tx_preemp_tap_2_inv          = "false",
		parameter rx_common_mode               = "0.82v",
		parameter rx_termination               = "OCT_100_OHMS",
		parameter rx_eq_dc_gain                = 0,
		parameter rx_eq_ctrl                   = 0,
		parameter pll_external_enable          = 0
	) (
		input  wire         mm_clk_clk,                            //                     mm_clk.clk
		input  wire         mm_reset_reset_n,                      //                   mm_reset.reset_n
		input  wire         tx_clk_clk,                            //                     tx_clk.clk
		input  wire         tx_reset_reset_n,                      //                   tx_reset.reset_n
		input  wire [18:0]  mm_pipeline_bridge_address,            //         mm_pipeline_bridge.address
		output wire         mm_pipeline_bridge_waitrequest,        //                           .waitrequest
		input  wire         mm_pipeline_bridge_read,               //                           .read
		output wire [31:0]  mm_pipeline_bridge_readdata,           //                           .readdata
		input  wire         mm_pipeline_bridge_write,              //                           .write
		input  wire [31:0]  mm_pipeline_bridge_writedata,          //                           .writedata
		input  wire         ref_clk_clk,                           //                    ref_clk.clk
		input  wire         ref_reset_reset_n,                     //                  ref_reset.reset_n
		output wire         xgmii_rx_clk_clk,                      //               xgmii_rx_clk.clk
		input  wire [139:0] reconfig_to_xcvr_reconfig_to_xcvr,     //           reconfig_to_xcvr.reconfig_to_xcvr
		output wire [91:0]  reconfig_from_xcvr_reconfig_from_xcvr, //         reconfig_from_xcvr.reconfig_from_xcvr
		output wire         avalon_st_rxstatus_valid,              //         avalon_st_rxstatus.valid
		output wire [39:0]  avalon_st_rxstatus_data,               //                           .data
		output wire [6:0]   avalon_st_rxstatus_error,              //                           .error
		output wire [1:0]   link_fault_status_xgmii_rx_data,       // link_fault_status_xgmii_rx.data
		input  wire         rx_serial_data_export,                 //             rx_serial_data.export
		output wire [0:0]   tx_serial_data_export,                 //             tx_serial_data.export
		output wire         rx_ready_export,                       //                   rx_ready.export
		output wire [0:0]   rx_data_ready_export,                  //              rx_data_ready.export
		output wire         tx_ready_export,                       //                   tx_ready.export
		input  wire [63:0]  tx_sc_fifo_in_data,                    //              tx_sc_fifo_in.data
		input  wire         tx_sc_fifo_in_valid,                   //                           .valid
		output wire         tx_sc_fifo_in_ready,                   //                           .ready
		input  wire         tx_sc_fifo_in_startofpacket,           //                           .startofpacket
		input  wire         tx_sc_fifo_in_endofpacket,             //                           .endofpacket
		input  wire [2:0]   tx_sc_fifo_in_empty,                   //                           .empty
		input  wire         tx_sc_fifo_in_error,                   //                           .error
		output wire [63:0]  rx_sc_fifo_out_data,                   //             rx_sc_fifo_out.data
		output wire         rx_sc_fifo_out_valid,                  //                           .valid
		input  wire         rx_sc_fifo_out_ready,                  //                           .ready
		output wire         rx_sc_fifo_out_startofpacket,          //                           .startofpacket
		output wire         rx_sc_fifo_out_endofpacket,            //                           .endofpacket
		output wire [2:0]   rx_sc_fifo_out_empty,                  //                           .empty
		output wire [5:0]   rx_sc_fifo_out_error,                  //                           .error
		output wire         mdio_mdc,                              //                       mdio.mdc
		input  wire         mdio_mdio_in,                          //                           .mdio_in
		output wire         mdio_mdio_out,                         //                           .mdio_out
		output wire         mdio_mdio_oen,                         //                           .mdio_oen
		output wire [39:0]  avalon_st_txstatus_data,               //         avalon_st_txstatus.data
		output wire         avalon_st_txstatus_valid,              //                           .valid
		output wire [6:0]   avalon_st_txstatus_error               //                           .error
	);

	wire  [71:0] eth_10g_mac_xgmii_tx_data;                                       // eth_10g_mac:xgmii_tx_data -> eth_loopback_composed:lb_tx_sink_data_data
	wire  [71:0] eth_loopback_composed_lb_rx_src_data_data;                       // eth_loopback_composed:lb_rx_src_data_data -> eth_10g_mac:xgmii_rx_data
	wire         rx_sc_fifo_almost_full_data;                                     // rx_sc_fifo:almost_full_data -> eth_fifo_pause_ctrl_adapter:data_sink_almost_full
	wire         rx_sc_fifo_almost_empty_data;                                    // rx_sc_fifo:almost_empty_data -> eth_fifo_pause_ctrl_adapter:data_sink_almost_empty
	wire   [1:0] eth_fifo_pause_ctrl_adapter_avalon_streaming_source_data;        // eth_fifo_pause_ctrl_adapter:pause_ctrl_src_data -> pa_pg_before_timing_adapter:in_data
	wire         pa_pg_before_timing_adapter_out_valid;                           // pa_pg_before_timing_adapter:out_valid -> dc_fifo_pause_adapt_pause_gen:in_valid
	wire   [1:0] pa_pg_before_timing_adapter_out_data;                            // pa_pg_before_timing_adapter:out_data -> dc_fifo_pause_adapt_pause_gen:in_data
	wire         pa_pg_before_timing_adapter_out_ready;                           // dc_fifo_pause_adapt_pause_gen:in_ready -> pa_pg_before_timing_adapter:out_ready
	wire         dc_fifo_pause_adapt_pause_gen_out_valid;                         // dc_fifo_pause_adapt_pause_gen:out_valid -> pa_pg_after_timing_adapter:in_valid
	wire   [1:0] dc_fifo_pause_adapt_pause_gen_out_data;                          // dc_fifo_pause_adapt_pause_gen:out_data -> pa_pg_after_timing_adapter:in_data
	wire         dc_fifo_pause_adapt_pause_gen_out_ready;                         // pa_pg_after_timing_adapter:in_ready -> dc_fifo_pause_adapt_pause_gen:out_ready
	wire   [1:0] pa_pg_after_timing_adapter_out_data;                             // pa_pg_after_timing_adapter:out_data -> eth_10g_mac:avalon_st_pause_data
	wire  [71:0] altera_10gbaser_xgmii_rx_dc_0_data;                              // altera_10gbaser:xgmii_rx_dc_0 -> eth_loopback_composed:lb_rx_sink_data_data
	wire  [71:0] eth_loopback_composed_lb_tx_src_data_data;                       // eth_loopback_composed:lb_tx_src_data_data -> altera_10gbaser:xgmii_tx_dc_0
	wire         tx_sc_fifo_out_endofpacket;                                      // tx_sc_fifo:out_endofpacket -> eth_10g_mac:avalon_st_tx_endofpacket
	wire         tx_sc_fifo_out_valid;                                            // tx_sc_fifo:out_valid -> eth_10g_mac:avalon_st_tx_valid
	wire         tx_sc_fifo_out_startofpacket;                                    // tx_sc_fifo:out_startofpacket -> eth_10g_mac:avalon_st_tx_startofpacket
	wire         tx_sc_fifo_out_error;                                            // tx_sc_fifo:out_error -> eth_10g_mac:avalon_st_tx_error
	wire   [2:0] tx_sc_fifo_out_empty;                                            // tx_sc_fifo:out_empty -> eth_10g_mac:avalon_st_tx_empty
	wire  [63:0] tx_sc_fifo_out_data;                                             // tx_sc_fifo:out_data -> eth_10g_mac:avalon_st_tx_data
	wire         tx_sc_fifo_out_ready;                                            // eth_10g_mac:avalon_st_tx_ready -> tx_sc_fifo:out_ready
	wire         eth_10g_mac_avalon_st_rx_endofpacket;                            // eth_10g_mac:avalon_st_rx_endofpacket -> rx_sc_fifo:in_endofpacket
	wire         eth_10g_mac_avalon_st_rx_valid;                                  // eth_10g_mac:avalon_st_rx_valid -> rx_sc_fifo:in_valid
	wire         eth_10g_mac_avalon_st_rx_startofpacket;                          // eth_10g_mac:avalon_st_rx_startofpacket -> rx_sc_fifo:in_startofpacket
	wire   [5:0] eth_10g_mac_avalon_st_rx_error;                                  // eth_10g_mac:avalon_st_rx_error -> rx_sc_fifo:in_error
	wire   [2:0] eth_10g_mac_avalon_st_rx_empty;                                  // eth_10g_mac:avalon_st_rx_empty -> rx_sc_fifo:in_empty
	wire  [63:0] eth_10g_mac_avalon_st_rx_data;                                   // eth_10g_mac:avalon_st_rx_data -> rx_sc_fifo:in_data
	wire         eth_10g_mac_avalon_st_rx_ready;                                  // rx_sc_fifo:in_ready -> eth_10g_mac:avalon_st_rx_ready
	wire         altera_avalon_mm_bridge_avalon_universal_master_0_waitrequest;   // mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_waitrequest -> altera_avalon_mm_bridge:uav_waitrequest
	wire   [2:0] altera_avalon_mm_bridge_avalon_universal_master_0_burstcount;    // altera_avalon_mm_bridge:uav_burstcount -> mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_burstcount
	wire  [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_writedata;     // altera_avalon_mm_bridge:uav_writedata -> mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_writedata
	wire  [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_address;       // altera_avalon_mm_bridge:uav_address -> mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_address
	wire         altera_avalon_mm_bridge_avalon_universal_master_0_lock;          // altera_avalon_mm_bridge:uav_lock -> mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_lock
	wire         altera_avalon_mm_bridge_avalon_universal_master_0_write;         // altera_avalon_mm_bridge:uav_write -> mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_write
	wire         altera_avalon_mm_bridge_avalon_universal_master_0_read;          // altera_avalon_mm_bridge:uav_read -> mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_read
	wire  [31:0] altera_avalon_mm_bridge_avalon_universal_master_0_readdata;      // mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_readdata -> altera_avalon_mm_bridge:uav_readdata
	wire         altera_avalon_mm_bridge_avalon_universal_master_0_debugaccess;   // altera_avalon_mm_bridge:uav_debugaccess -> mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_debugaccess
	wire   [3:0] altera_avalon_mm_bridge_avalon_universal_master_0_byteenable;    // altera_avalon_mm_bridge:uav_byteenable -> mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_byteenable
	wire         altera_avalon_mm_bridge_avalon_universal_master_0_readdatavalid; // mm_interconnect_0:altera_avalon_mm_bridge_avalon_universal_master_0_readdatavalid -> altera_avalon_mm_bridge:uav_readdatavalid
	wire         mm_interconnect_0_altera_10gbaser_phy_mgmt_waitrequest;          // altera_10gbaser:phy_mgmt_waitrequest -> mm_interconnect_0:altera_10gbaser_phy_mgmt_waitrequest
	wire  [31:0] mm_interconnect_0_altera_10gbaser_phy_mgmt_writedata;            // mm_interconnect_0:altera_10gbaser_phy_mgmt_writedata -> altera_10gbaser:phy_mgmt_writedata
	wire   [8:0] mm_interconnect_0_altera_10gbaser_phy_mgmt_address;              // mm_interconnect_0:altera_10gbaser_phy_mgmt_address -> altera_10gbaser:phy_mgmt_address
	wire         mm_interconnect_0_altera_10gbaser_phy_mgmt_write;                // mm_interconnect_0:altera_10gbaser_phy_mgmt_write -> altera_10gbaser:phy_mgmt_write
	wire         mm_interconnect_0_altera_10gbaser_phy_mgmt_read;                 // mm_interconnect_0:altera_10gbaser_phy_mgmt_read -> altera_10gbaser:phy_mgmt_read
	wire  [31:0] mm_interconnect_0_altera_10gbaser_phy_mgmt_readdata;             // altera_10gbaser:phy_mgmt_readdata -> mm_interconnect_0:altera_10gbaser_phy_mgmt_readdata
	wire         mm_interconnect_0_eth_10g_mac_csr_waitrequest;                   // eth_10g_mac:csr_waitrequest -> mm_interconnect_0:eth_10g_mac_csr_waitrequest
	wire  [31:0] mm_interconnect_0_eth_10g_mac_csr_writedata;                     // mm_interconnect_0:eth_10g_mac_csr_writedata -> eth_10g_mac:csr_writedata
	wire  [12:0] mm_interconnect_0_eth_10g_mac_csr_address;                       // mm_interconnect_0:eth_10g_mac_csr_address -> eth_10g_mac:csr_address
	wire         mm_interconnect_0_eth_10g_mac_csr_write;                         // mm_interconnect_0:eth_10g_mac_csr_write -> eth_10g_mac:csr_write
	wire         mm_interconnect_0_eth_10g_mac_csr_read;                          // mm_interconnect_0:eth_10g_mac_csr_read -> eth_10g_mac:csr_read
	wire  [31:0] mm_interconnect_0_eth_10g_mac_csr_readdata;                      // eth_10g_mac:csr_readdata -> mm_interconnect_0:eth_10g_mac_csr_readdata
	wire         mm_interconnect_0_eth_loopback_composed_csr_waitrequest;         // eth_loopback_composed:csr_waitrequest -> mm_interconnect_0:eth_loopback_composed_csr_waitrequest
	wire  [31:0] mm_interconnect_0_eth_loopback_composed_csr_writedata;           // mm_interconnect_0:eth_loopback_composed_csr_writedata -> eth_loopback_composed:csr_writedata
	wire   [3:0] mm_interconnect_0_eth_loopback_composed_csr_address;             // mm_interconnect_0:eth_loopback_composed_csr_address -> eth_loopback_composed:csr_address
	wire         mm_interconnect_0_eth_loopback_composed_csr_write;               // mm_interconnect_0:eth_loopback_composed_csr_write -> eth_loopback_composed:csr_write
	wire         mm_interconnect_0_eth_loopback_composed_csr_read;                // mm_interconnect_0:eth_loopback_composed_csr_read -> eth_loopback_composed:csr_read
	wire  [31:0] mm_interconnect_0_eth_loopback_composed_csr_readdata;            // eth_loopback_composed:csr_readdata -> mm_interconnect_0:eth_loopback_composed_csr_readdata
	wire  [31:0] mm_interconnect_0_tx_sc_fifo_csr_writedata;                      // mm_interconnect_0:tx_sc_fifo_csr_writedata -> tx_sc_fifo:csr_writedata
	wire   [2:0] mm_interconnect_0_tx_sc_fifo_csr_address;                        // mm_interconnect_0:tx_sc_fifo_csr_address -> tx_sc_fifo:csr_address
	wire         mm_interconnect_0_tx_sc_fifo_csr_write;                          // mm_interconnect_0:tx_sc_fifo_csr_write -> tx_sc_fifo:csr_write
	wire         mm_interconnect_0_tx_sc_fifo_csr_read;                           // mm_interconnect_0:tx_sc_fifo_csr_read -> tx_sc_fifo:csr_read
	wire  [31:0] mm_interconnect_0_tx_sc_fifo_csr_readdata;                       // tx_sc_fifo:csr_readdata -> mm_interconnect_0:tx_sc_fifo_csr_readdata
	wire  [31:0] mm_interconnect_0_rx_sc_fifo_csr_writedata;                      // mm_interconnect_0:rx_sc_fifo_csr_writedata -> rx_sc_fifo:csr_writedata
	wire   [2:0] mm_interconnect_0_rx_sc_fifo_csr_address;                        // mm_interconnect_0:rx_sc_fifo_csr_address -> rx_sc_fifo:csr_address
	wire         mm_interconnect_0_rx_sc_fifo_csr_write;                          // mm_interconnect_0:rx_sc_fifo_csr_write -> rx_sc_fifo:csr_write
	wire         mm_interconnect_0_rx_sc_fifo_csr_read;                           // mm_interconnect_0:rx_sc_fifo_csr_read -> rx_sc_fifo:csr_read
	wire  [31:0] mm_interconnect_0_rx_sc_fifo_csr_readdata;                       // rx_sc_fifo:csr_readdata -> mm_interconnect_0:rx_sc_fifo_csr_readdata
	wire         mm_interconnect_0_eth_mdio_csr_waitrequest;                      // eth_mdio:csr_waitrequest -> mm_interconnect_0:eth_mdio_csr_waitrequest
	wire  [31:0] mm_interconnect_0_eth_mdio_csr_writedata;                        // mm_interconnect_0:eth_mdio_csr_writedata -> eth_mdio:csr_writedata
	wire   [5:0] mm_interconnect_0_eth_mdio_csr_address;                          // mm_interconnect_0:eth_mdio_csr_address -> eth_mdio:csr_address
	wire         mm_interconnect_0_eth_mdio_csr_write;                            // mm_interconnect_0:eth_mdio_csr_write -> eth_mdio:csr_write
	wire         mm_interconnect_0_eth_mdio_csr_read;                             // mm_interconnect_0:eth_mdio_csr_read -> eth_mdio:csr_read
	wire  [31:0] mm_interconnect_0_eth_mdio_csr_readdata;                         // eth_mdio:csr_readdata -> mm_interconnect_0:eth_mdio_csr_readdata
	wire         rst_controller_reset_out_reset;                                  // rst_controller:reset_out -> [altera_10gbaser:phy_mgmt_clk_reset, altera_avalon_mm_bridge:reset, eth_mdio:reset, mm_interconnect_0:altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset, mm_interconnect_0:eth_10g_mac_csr_reset_reset_bridge_in_reset_reset]
	wire         rst_controller_001_reset_out_reset;                              // rst_controller_001:reset_out -> [dc_fifo_pause_adapt_pause_gen:out_reset_n, mm_interconnect_0:tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset, pa_pg_after_timing_adapter:reset_n, tx_sc_fifo:reset]
	wire         rst_controller_002_reset_out_reset;                              // rst_controller_002:reset_out -> [dc_fifo_pause_adapt_pause_gen:in_reset_n, eth_fifo_pause_ctrl_adapter:reset, mm_interconnect_0:rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset, pa_pg_before_timing_adapter:reset_n, rx_sc_fifo:reset]
	wire   [0:0] altera_10gbaser_tx_serial_data;                                  // port fragment
	wire  [71:0] altera_10gbaser_xgmii_rx_dc;                                     // port fragment

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (starting_channel_number != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					starting_channel_number_check ( .error(1'b1) );
		end
		if (interface_type != "Soft XAUI")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					interface_type_check ( .error(1'b1) );
		end
		if (data_rate != "3125 Mbps")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					data_rate_check ( .error(1'b1) );
		end
		if (xaui_pll_type != "AUTO")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					xaui_pll_type_check ( .error(1'b1) );
		end
		if (BASE_DATA_RATE != "")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					base_data_rate_check ( .error(1'b1) );
		end
		if (en_synce_support != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					en_synce_support_check ( .error(1'b1) );
		end
		if (use_control_and_status_ports != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					use_control_and_status_ports_check ( .error(1'b1) );
		end
		if (external_pma_ctrl_reconf != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					external_pma_ctrl_reconf_check ( .error(1'b1) );
		end
		if (recovered_clk_out != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					recovered_clk_out_check ( .error(1'b1) );
		end
		if (number_of_interfaces != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					number_of_interfaces_check ( .error(1'b1) );
		end
		if (reconfig_interfaces != 1)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					reconfig_interfaces_check ( .error(1'b1) );
		end
		if (use_rx_rate_match != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					use_rx_rate_match_check ( .error(1'b1) );
		end
		if (tx_termination != "OCT_100_OHMS")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_termination_check ( .error(1'b1) );
		end
		if (tx_vod_selection != 4)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_vod_selection_check ( .error(1'b1) );
		end
		if (tx_preemp_pretap != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_preemp_pretap_check ( .error(1'b1) );
		end
		if (tx_preemp_pretap_inv != "false")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_preemp_pretap_inv_check ( .error(1'b1) );
		end
		if (tx_preemp_tap_1 != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_preemp_tap_1_check ( .error(1'b1) );
		end
		if (tx_preemp_tap_2 != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_preemp_tap_2_check ( .error(1'b1) );
		end
		if (tx_preemp_tap_2_inv != "false")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					tx_preemp_tap_2_inv_check ( .error(1'b1) );
		end
		if (rx_common_mode != "0.82v")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_common_mode_check ( .error(1'b1) );
		end
		if (rx_termination != "OCT_100_OHMS")
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_termination_check ( .error(1'b1) );
		end
		if (rx_eq_dc_gain != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_eq_dc_gain_check ( .error(1'b1) );
		end
		if (rx_eq_ctrl != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					rx_eq_ctrl_check ( .error(1'b1) );
		end
		if (pll_external_enable != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					pll_external_enable_check ( .error(1'b1) );
		end
	endgenerate

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (19),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (1),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) altera_avalon_mm_bridge (
		.clk                      (mm_clk_clk),                                                      //                       clk.clk
		.reset                    (rst_controller_reset_out_reset),                                  //                     reset.reset
		.uav_address              (altera_avalon_mm_bridge_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (altera_avalon_mm_bridge_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (altera_avalon_mm_bridge_avalon_universal_master_0_read),          //                          .read
		.uav_write                (altera_avalon_mm_bridge_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (altera_avalon_mm_bridge_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (altera_avalon_mm_bridge_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (altera_avalon_mm_bridge_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (altera_avalon_mm_bridge_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (altera_avalon_mm_bridge_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (altera_avalon_mm_bridge_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (altera_avalon_mm_bridge_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_pipeline_bridge_address),                                      //      avalon_anti_master_0.address
		.av_waitrequest           (mm_pipeline_bridge_waitrequest),                                  //                          .waitrequest
		.av_read                  (mm_pipeline_bridge_read),                                         //                          .read
		.av_readdata              (mm_pipeline_bridge_readdata),                                     //                          .readdata
		.av_write                 (mm_pipeline_bridge_write),                                        //                          .write
		.av_writedata             (mm_pipeline_bridge_writedata),                                    //                          .writedata
		.av_burstcount            (3'b001),                                                          //               (terminated)
		.av_byteenable            (4'b1111),                                                         //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                            //               (terminated)
		.av_begintransfer         (1'b0),                                                            //               (terminated)
		.av_chipselect            (1'b0),                                                            //               (terminated)
		.av_readdatavalid         (),                                                                //               (terminated)
		.av_lock                  (1'b0),                                                            //               (terminated)
		.av_debugaccess           (1'b0),                                                            //               (terminated)
		.uav_clken                (),                                                                //               (terminated)
		.av_clken                 (1'b1),                                                            //               (terminated)
		.uav_response             (2'b00),                                                           //               (terminated)
		.av_response              (),                                                                //               (terminated)
		.uav_writeresponserequest (),                                                                //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                            //               (terminated)
		.av_writeresponserequest  (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid    ()                                                                 //               (terminated)
	);

	altera_xcvr_10gbaser #(
		.device_family            ("Arria V"),
		.num_channels             (1),
		.operation_mode           ("duplex"),
		.external_pma_ctrl_config (0),
		.control_pin_out          (0),
		.recovered_clk_out        (0),
		.pll_locked_out           (0),
		.ref_clk_freq             ("322.265625 MHz"),
		.pll_type                 ("CMU"),
		.starting_channel_number  (0),
		.reconfig_interfaces      (2),
		.rx_use_coreclk           (0),
		.embedded_reset           (1),
		.latadj                   (0),
		.high_precision_latadj    (1),
		.tx_termination           ("OCT_100_OHMS"),
		.tx_vod_selection         (7),
		.tx_preemp_pretap         (0),
		.tx_preemp_pretap_inv     (0),
		.tx_preemp_tap_1          (29),
		.tx_preemp_tap_2          (0),
		.tx_preemp_tap_2_inv      (0),
		.rx_common_mode           ("0.82v"),
		.rx_termination           ("OCT_100_OHMS"),
		.rx_eq_dc_gain            (0),
		.rx_eq_ctrl               (0),
		.mgmt_clk_in_mhz          (150)
	) altera_10gbaser (
		.pll_ref_clk          (ref_clk_clk),                                            //        pll_ref_clk.clk
		.xgmii_rx_clk         (xgmii_rx_clk_clk),                                       //       xgmii_rx_clk.clk
		.tx_ready             (tx_ready_export),                                        //           tx_ready.export
		.xgmii_tx_clk         (tx_clk_clk),                                             //       xgmii_tx_clk.clk
		.rx_ready             (rx_ready_export),                                        //           rx_ready.export
		.rx_data_ready        (rx_data_ready_export),                                   //      rx_data_ready.export
		.xgmii_rx_dc          (altera_10gbaser_xgmii_rx_dc),                            //      xgmii_rx_dc_0.data
		.rx_serial_data       ({rx_serial_data_export}),                                //   rx_serial_data_0.export
		.xgmii_tx_dc          ({eth_loopback_composed_lb_tx_src_data_data[71:0]}),      //      xgmii_tx_dc_0.data
		.tx_serial_data       (altera_10gbaser_tx_serial_data),                         //   tx_serial_data_0.export
		.reconfig_from_xcvr   (reconfig_from_xcvr_reconfig_from_xcvr),                  // reconfig_from_xcvr.reconfig_from_xcvr
		.reconfig_to_xcvr     (reconfig_to_xcvr_reconfig_to_xcvr),                      //   reconfig_to_xcvr.reconfig_to_xcvr
		.phy_mgmt_clk         (mm_clk_clk),                                             //       phy_mgmt_clk.clk
		.phy_mgmt_clk_reset   (rst_controller_reset_out_reset),                         // phy_mgmt_clk_reset.reset
		.phy_mgmt_address     (mm_interconnect_0_altera_10gbaser_phy_mgmt_address),     //           phy_mgmt.address
		.phy_mgmt_read        (mm_interconnect_0_altera_10gbaser_phy_mgmt_read),        //                   .read
		.phy_mgmt_readdata    (mm_interconnect_0_altera_10gbaser_phy_mgmt_readdata),    //                   .readdata
		.phy_mgmt_write       (mm_interconnect_0_altera_10gbaser_phy_mgmt_write),       //                   .write
		.phy_mgmt_writedata   (mm_interconnect_0_altera_10gbaser_phy_mgmt_writedata),   //                   .writedata
		.phy_mgmt_waitrequest (mm_interconnect_0_altera_10gbaser_phy_mgmt_waitrequest), //                   .waitrequest
		.rx_block_lock        (),                                                       //        (terminated)
		.rx_hi_ber            (),                                                       //        (terminated)
		.rx_recovered_clk     (),                                                       //        (terminated)
		.rx_coreclkin         (1'b0),                                                   //        (terminated)
		.pll_locked           (),                                                       //        (terminated)
		.gxb_pdn              (1'b0),                                                   //        (terminated)
		.pll_pdn              (1'b0),                                                   //        (terminated)
		.cal_blk_pdn          (1'b0),                                                   //        (terminated)
		.cal_blk_clk          (1'b0),                                                   //        (terminated)
		.tx_digitalreset      (1'b0),                                                   //        (terminated)
		.tx_analogreset       (1'b0),                                                   //        (terminated)
		.tx_cal_busy          (),                                                       //        (terminated)
		.pll_powerdown        (1'b0),                                                   //        (terminated)
		.rx_digitalreset      (1'b0),                                                   //        (terminated)
		.rx_analogreset       (1'b0),                                                   //        (terminated)
		.rx_cal_busy          (),                                                       //        (terminated)
		.rx_is_lockedtodata   (),                                                       //        (terminated)
		.rx_latency_adj       (),                                                       //        (terminated)
		.tx_latency_adj       ()                                                        //        (terminated)
	);

	qsys_10g_eth_10g_design_example_0_eth_10g_mac eth_10g_mac (
		.csr_clk_clk                     (mm_clk_clk),                                    //                    csr_clk.clk
		.csr_reset_reset_n               (mm_reset_reset_n),                              //                  csr_reset.reset_n
		.csr_address                     (mm_interconnect_0_eth_10g_mac_csr_address),     //                        csr.address
		.csr_waitrequest                 (mm_interconnect_0_eth_10g_mac_csr_waitrequest), //                           .waitrequest
		.csr_read                        (mm_interconnect_0_eth_10g_mac_csr_read),        //                           .read
		.csr_readdata                    (mm_interconnect_0_eth_10g_mac_csr_readdata),    //                           .readdata
		.csr_write                       (mm_interconnect_0_eth_10g_mac_csr_write),       //                           .write
		.csr_writedata                   (mm_interconnect_0_eth_10g_mac_csr_writedata),   //                           .writedata
		.tx_clk_clk                      (tx_clk_clk),                                    //                     tx_clk.clk
		.tx_reset_reset_n                (tx_reset_reset_n),                              //                   tx_reset.reset_n
		.avalon_st_tx_startofpacket      (tx_sc_fifo_out_startofpacket),                  //               avalon_st_tx.startofpacket
		.avalon_st_tx_valid              (tx_sc_fifo_out_valid),                          //                           .valid
		.avalon_st_tx_data               (tx_sc_fifo_out_data),                           //                           .data
		.avalon_st_tx_empty              (tx_sc_fifo_out_empty),                          //                           .empty
		.avalon_st_tx_ready              (tx_sc_fifo_out_ready),                          //                           .ready
		.avalon_st_tx_error              (tx_sc_fifo_out_error),                          //                           .error
		.avalon_st_tx_endofpacket        (tx_sc_fifo_out_endofpacket),                    //                           .endofpacket
		.avalon_st_pause_data            (pa_pg_after_timing_adapter_out_data),           //            avalon_st_pause.data
		.xgmii_tx_data                   (eth_10g_mac_xgmii_tx_data),                     //                   xgmii_tx.data
		.avalon_st_txstatus_data         (avalon_st_txstatus_data),                       //         avalon_st_txstatus.data
		.avalon_st_txstatus_valid        (avalon_st_txstatus_valid),                      //                           .valid
		.avalon_st_txstatus_error        (avalon_st_txstatus_error),                      //                           .error
		.rx_clk_clk                      (xgmii_rx_clk_clk),                              //                     rx_clk.clk
		.rx_reset_reset_n                (ref_reset_reset_n),                             //                   rx_reset.reset_n
		.xgmii_rx_data                   (eth_loopback_composed_lb_rx_src_data_data),     //                   xgmii_rx.data
		.avalon_st_rx_startofpacket      (eth_10g_mac_avalon_st_rx_startofpacket),        //               avalon_st_rx.startofpacket
		.avalon_st_rx_endofpacket        (eth_10g_mac_avalon_st_rx_endofpacket),          //                           .endofpacket
		.avalon_st_rx_valid              (eth_10g_mac_avalon_st_rx_valid),                //                           .valid
		.avalon_st_rx_ready              (eth_10g_mac_avalon_st_rx_ready),                //                           .ready
		.avalon_st_rx_data               (eth_10g_mac_avalon_st_rx_data),                 //                           .data
		.avalon_st_rx_empty              (eth_10g_mac_avalon_st_rx_empty),                //                           .empty
		.avalon_st_rx_error              (eth_10g_mac_avalon_st_rx_error),                //                           .error
		.avalon_st_rxstatus_valid        (avalon_st_rxstatus_valid),                      //         avalon_st_rxstatus.valid
		.avalon_st_rxstatus_data         (avalon_st_rxstatus_data),                       //                           .data
		.avalon_st_rxstatus_error        (avalon_st_rxstatus_error),                      //                           .error
		.link_fault_status_xgmii_rx_data (link_fault_status_xgmii_rx_data)                // link_fault_status_xgmii_rx.data
	);

	qsys_10g_eth_10g_design_example_0_eth_loopback_composed eth_loopback_composed (
		.tx_clk_clk           (tx_clk_clk),                                              //          tx_clk.clk
		.tx_reset_reset_n     (tx_reset_reset_n),                                        //        tx_reset.reset_n
		.rx_clk_clk           (xgmii_rx_clk_clk),                                        //          rx_clk.clk
		.rx_reset_reset_n     (ref_reset_reset_n),                                       //        rx_reset.reset_n
		.csr_clk_clk          (mm_clk_clk),                                              //         csr_clk.clk
		.csr_reset_reset_n    (mm_reset_reset_n),                                        //       csr_reset.reset_n
		.lb_tx_sink_data_data (eth_10g_mac_xgmii_tx_data),                               // lb_tx_sink_data.data
		.lb_tx_src_data_data  (eth_loopback_composed_lb_tx_src_data_data),               //  lb_tx_src_data.data
		.lb_rx_sink_data_data (altera_10gbaser_xgmii_rx_dc_0_data),                      // lb_rx_sink_data.data
		.lb_rx_src_data_data  (eth_loopback_composed_lb_rx_src_data_data),               //  lb_rx_src_data.data
		.csr_address          (mm_interconnect_0_eth_loopback_composed_csr_address),     //             csr.address
		.csr_waitrequest      (mm_interconnect_0_eth_loopback_composed_csr_waitrequest), //                .waitrequest
		.csr_read             (mm_interconnect_0_eth_loopback_composed_csr_read),        //                .read
		.csr_readdata         (mm_interconnect_0_eth_loopback_composed_csr_readdata),    //                .readdata
		.csr_write            (mm_interconnect_0_eth_loopback_composed_csr_write),       //                .write
		.csr_writedata        (mm_interconnect_0_eth_loopback_composed_csr_writedata)    //                .writedata
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (8),
		.BITS_PER_SYMBOL     (8),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (1),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (1),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (1),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tx_sc_fifo (
		.clk               (tx_clk_clk),                                 //       clk.clk
		.reset             (rst_controller_001_reset_out_reset),         // clk_reset.reset
		.csr_address       (mm_interconnect_0_tx_sc_fifo_csr_address),   //       csr.address
		.csr_read          (mm_interconnect_0_tx_sc_fifo_csr_read),      //          .read
		.csr_write         (mm_interconnect_0_tx_sc_fifo_csr_write),     //          .write
		.csr_readdata      (mm_interconnect_0_tx_sc_fifo_csr_readdata),  //          .readdata
		.csr_writedata     (mm_interconnect_0_tx_sc_fifo_csr_writedata), //          .writedata
		.in_data           (tx_sc_fifo_in_data),                         //        in.data
		.in_valid          (tx_sc_fifo_in_valid),                        //          .valid
		.in_ready          (tx_sc_fifo_in_ready),                        //          .ready
		.in_startofpacket  (tx_sc_fifo_in_startofpacket),                //          .startofpacket
		.in_endofpacket    (tx_sc_fifo_in_endofpacket),                  //          .endofpacket
		.in_empty          (tx_sc_fifo_in_empty),                        //          .empty
		.in_error          (tx_sc_fifo_in_error),                        //          .error
		.out_data          (tx_sc_fifo_out_data),                        //       out.data
		.out_valid         (tx_sc_fifo_out_valid),                       //          .valid
		.out_ready         (tx_sc_fifo_out_ready),                       //          .ready
		.out_startofpacket (tx_sc_fifo_out_startofpacket),               //          .startofpacket
		.out_endofpacket   (tx_sc_fifo_out_endofpacket),                 //          .endofpacket
		.out_empty         (tx_sc_fifo_out_empty),                       //          .empty
		.out_error         (tx_sc_fifo_out_error),                       //          .error
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (8),
		.BITS_PER_SYMBOL     (8),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (6),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (1),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (1),
		.USE_ALMOST_FULL_IF  (1),
		.USE_ALMOST_EMPTY_IF (1)
	) rx_sc_fifo (
		.clk               (xgmii_rx_clk_clk),                           //          clk.clk
		.reset             (rst_controller_002_reset_out_reset),         //    clk_reset.reset
		.csr_address       (mm_interconnect_0_rx_sc_fifo_csr_address),   //          csr.address
		.csr_read          (mm_interconnect_0_rx_sc_fifo_csr_read),      //             .read
		.csr_write         (mm_interconnect_0_rx_sc_fifo_csr_write),     //             .write
		.csr_readdata      (mm_interconnect_0_rx_sc_fifo_csr_readdata),  //             .readdata
		.csr_writedata     (mm_interconnect_0_rx_sc_fifo_csr_writedata), //             .writedata
		.almost_full_data  (rx_sc_fifo_almost_full_data),                //  almost_full.data
		.almost_empty_data (rx_sc_fifo_almost_empty_data),               // almost_empty.data
		.in_data           (eth_10g_mac_avalon_st_rx_data),              //           in.data
		.in_valid          (eth_10g_mac_avalon_st_rx_valid),             //             .valid
		.in_ready          (eth_10g_mac_avalon_st_rx_ready),             //             .ready
		.in_startofpacket  (eth_10g_mac_avalon_st_rx_startofpacket),     //             .startofpacket
		.in_endofpacket    (eth_10g_mac_avalon_st_rx_endofpacket),       //             .endofpacket
		.in_empty          (eth_10g_mac_avalon_st_rx_empty),             //             .empty
		.in_error          (eth_10g_mac_avalon_st_rx_error),             //             .error
		.out_data          (rx_sc_fifo_out_data),                        //          out.data
		.out_valid         (rx_sc_fifo_out_valid),                       //             .valid
		.out_ready         (rx_sc_fifo_out_ready),                       //             .ready
		.out_startofpacket (rx_sc_fifo_out_startofpacket),               //             .startofpacket
		.out_endofpacket   (rx_sc_fifo_out_endofpacket),                 //             .endofpacket
		.out_empty         (rx_sc_fifo_out_empty),                       //             .empty
		.out_error         (rx_sc_fifo_out_error),                       //             .error
		.in_channel        (1'b0),                                       //  (terminated)
		.out_channel       ()                                            //  (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (2),
		.FIFO_DEPTH         (16),
		.CHANNEL_WIDTH      (0),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (0),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (2),
		.RD_SYNC_DEPTH      (2)
	) dc_fifo_pause_adapt_pause_gen (
		.in_clk            (xgmii_rx_clk_clk),                        //        in_clk.clk
		.in_reset_n        (~rst_controller_002_reset_out_reset),     //  in_clk_reset.reset_n
		.out_clk           (tx_clk_clk),                              //       out_clk.clk
		.out_reset_n       (~rst_controller_001_reset_out_reset),     // out_clk_reset.reset_n
		.in_data           (pa_pg_before_timing_adapter_out_data),    //            in.data
		.in_valid          (pa_pg_before_timing_adapter_out_valid),   //              .valid
		.in_ready          (pa_pg_before_timing_adapter_out_ready),   //              .ready
		.out_data          (dc_fifo_pause_adapt_pause_gen_out_data),  //           out.data
		.out_valid         (dc_fifo_pause_adapt_pause_gen_out_valid), //              .valid
		.out_ready         (dc_fifo_pause_adapt_pause_gen_out_ready), //              .ready
		.in_csr_address    (1'b0),                                    //   (terminated)
		.in_csr_read       (1'b0),                                    //   (terminated)
		.in_csr_write      (1'b0),                                    //   (terminated)
		.in_csr_readdata   (),                                        //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),    //   (terminated)
		.out_csr_address   (1'b0),                                    //   (terminated)
		.out_csr_read      (1'b0),                                    //   (terminated)
		.out_csr_write     (1'b0),                                    //   (terminated)
		.out_csr_readdata  (),                                        //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),    //   (terminated)
		.in_startofpacket  (1'b0),                                    //   (terminated)
		.in_endofpacket    (1'b0),                                    //   (terminated)
		.out_startofpacket (),                                        //   (terminated)
		.out_endofpacket   ()                                         //   (terminated)
	);

	qsys_10g_eth_10g_design_example_0_pa_pg_before_timing_adapter pa_pg_before_timing_adapter (
		.clk       (xgmii_rx_clk_clk),                                         //   clk.clk
		.reset_n   (~rst_controller_002_reset_out_reset),                      // reset.reset_n
		.in_data   (eth_fifo_pause_ctrl_adapter_avalon_streaming_source_data), //    in.data
		.out_data  (pa_pg_before_timing_adapter_out_data),                     //   out.data
		.out_valid (pa_pg_before_timing_adapter_out_valid),                    //      .valid
		.out_ready (pa_pg_before_timing_adapter_out_ready)                     //      .ready
	);

	qsys_10g_eth_10g_design_example_0_pa_pg_after_timing_adapter pa_pg_after_timing_adapter (
		.clk      (tx_clk_clk),                              //   clk.clk
		.reset_n  (~rst_controller_001_reset_out_reset),     // reset.reset_n
		.in_data  (dc_fifo_pause_adapt_pause_gen_out_data),  //    in.data
		.in_valid (dc_fifo_pause_adapt_pause_gen_out_valid), //      .valid
		.in_ready (dc_fifo_pause_adapt_pause_gen_out_ready), //      .ready
		.out_data (pa_pg_after_timing_adapter_out_data)      //   out.data
	);

	altera_eth_fifo_pause_ctrl_adapter eth_fifo_pause_ctrl_adapter (
		.clk                    (xgmii_rx_clk_clk),                                         //                              clock.clk
		.reset                  (rst_controller_002_reset_out_reset),                       //                        clock_reset.reset
		.data_sink_almost_full  (rx_sc_fifo_almost_full_data),                              //  avalon_streaming_sink_almost_full.data
		.data_sink_almost_empty (rx_sc_fifo_almost_empty_data),                             // avalon_streaming_sink_almost_empty.data
		.pause_ctrl_src_data    (eth_fifo_pause_ctrl_adapter_avalon_streaming_source_data)  //            avalon_streaming_source.data
	);

	altera_eth_mdio #(
		.MDC_DIVISOR (64)
	) eth_mdio (
		.clk             (mm_clk_clk),                                 //       clock.clk
		.reset           (rst_controller_reset_out_reset),             // clock_reset.reset
		.csr_write       (mm_interconnect_0_eth_mdio_csr_write),       //         csr.write
		.csr_read        (mm_interconnect_0_eth_mdio_csr_read),        //            .read
		.csr_address     (mm_interconnect_0_eth_mdio_csr_address),     //            .address
		.csr_writedata   (mm_interconnect_0_eth_mdio_csr_writedata),   //            .writedata
		.csr_readdata    (mm_interconnect_0_eth_mdio_csr_readdata),    //            .readdata
		.csr_waitrequest (mm_interconnect_0_eth_mdio_csr_waitrequest), //            .waitrequest
		.mdc             (mdio_mdc),                                   //        mdio.export
		.mdio_in         (mdio_mdio_in),                               //            .export
		.mdio_out        (mdio_mdio_out),                              //            .export
		.mdio_oen        (mdio_mdio_oen)                               //            .export
	);

	qsys_10g_eth_10g_design_example_0_mm_interconnect_0 mm_interconnect_0 (
		.altera_10gbaser_xgmii_rx_clk_clk                                (xgmii_rx_clk_clk),                                                //                        altera_10gbaser_xgmii_rx_clk.clk
		.mm_clk_module_clk_clk                                           (mm_clk_clk),                                                      //                                   mm_clk_module_clk.clk
		.tx_clk_module_clk_clk                                           (tx_clk_clk),                                                      //                                   tx_clk_module_clk.clk
		.altera_avalon_mm_bridge_reset_reset_bridge_in_reset_reset       (rst_controller_reset_out_reset),                                  // altera_avalon_mm_bridge_reset_reset_bridge_in_reset.reset
		.eth_10g_mac_csr_reset_reset_bridge_in_reset_reset               (rst_controller_reset_out_reset),                                  //         eth_10g_mac_csr_reset_reset_bridge_in_reset.reset
		.rx_sc_fifo_clk_reset_reset_bridge_in_reset_reset                (rst_controller_002_reset_out_reset),                              //          rx_sc_fifo_clk_reset_reset_bridge_in_reset.reset
		.tx_sc_fifo_clk_reset_reset_bridge_in_reset_reset                (rst_controller_001_reset_out_reset),                              //          tx_sc_fifo_clk_reset_reset_bridge_in_reset.reset
		.altera_avalon_mm_bridge_avalon_universal_master_0_address       (altera_avalon_mm_bridge_avalon_universal_master_0_address),       //   altera_avalon_mm_bridge_avalon_universal_master_0.address
		.altera_avalon_mm_bridge_avalon_universal_master_0_waitrequest   (altera_avalon_mm_bridge_avalon_universal_master_0_waitrequest),   //                                                    .waitrequest
		.altera_avalon_mm_bridge_avalon_universal_master_0_burstcount    (altera_avalon_mm_bridge_avalon_universal_master_0_burstcount),    //                                                    .burstcount
		.altera_avalon_mm_bridge_avalon_universal_master_0_byteenable    (altera_avalon_mm_bridge_avalon_universal_master_0_byteenable),    //                                                    .byteenable
		.altera_avalon_mm_bridge_avalon_universal_master_0_read          (altera_avalon_mm_bridge_avalon_universal_master_0_read),          //                                                    .read
		.altera_avalon_mm_bridge_avalon_universal_master_0_readdata      (altera_avalon_mm_bridge_avalon_universal_master_0_readdata),      //                                                    .readdata
		.altera_avalon_mm_bridge_avalon_universal_master_0_readdatavalid (altera_avalon_mm_bridge_avalon_universal_master_0_readdatavalid), //                                                    .readdatavalid
		.altera_avalon_mm_bridge_avalon_universal_master_0_write         (altera_avalon_mm_bridge_avalon_universal_master_0_write),         //                                                    .write
		.altera_avalon_mm_bridge_avalon_universal_master_0_writedata     (altera_avalon_mm_bridge_avalon_universal_master_0_writedata),     //                                                    .writedata
		.altera_avalon_mm_bridge_avalon_universal_master_0_lock          (altera_avalon_mm_bridge_avalon_universal_master_0_lock),          //                                                    .lock
		.altera_avalon_mm_bridge_avalon_universal_master_0_debugaccess   (altera_avalon_mm_bridge_avalon_universal_master_0_debugaccess),   //                                                    .debugaccess
		.altera_10gbaser_phy_mgmt_address                                (mm_interconnect_0_altera_10gbaser_phy_mgmt_address),              //                            altera_10gbaser_phy_mgmt.address
		.altera_10gbaser_phy_mgmt_write                                  (mm_interconnect_0_altera_10gbaser_phy_mgmt_write),                //                                                    .write
		.altera_10gbaser_phy_mgmt_read                                   (mm_interconnect_0_altera_10gbaser_phy_mgmt_read),                 //                                                    .read
		.altera_10gbaser_phy_mgmt_readdata                               (mm_interconnect_0_altera_10gbaser_phy_mgmt_readdata),             //                                                    .readdata
		.altera_10gbaser_phy_mgmt_writedata                              (mm_interconnect_0_altera_10gbaser_phy_mgmt_writedata),            //                                                    .writedata
		.altera_10gbaser_phy_mgmt_waitrequest                            (mm_interconnect_0_altera_10gbaser_phy_mgmt_waitrequest),          //                                                    .waitrequest
		.eth_10g_mac_csr_address                                         (mm_interconnect_0_eth_10g_mac_csr_address),                       //                                     eth_10g_mac_csr.address
		.eth_10g_mac_csr_write                                           (mm_interconnect_0_eth_10g_mac_csr_write),                         //                                                    .write
		.eth_10g_mac_csr_read                                            (mm_interconnect_0_eth_10g_mac_csr_read),                          //                                                    .read
		.eth_10g_mac_csr_readdata                                        (mm_interconnect_0_eth_10g_mac_csr_readdata),                      //                                                    .readdata
		.eth_10g_mac_csr_writedata                                       (mm_interconnect_0_eth_10g_mac_csr_writedata),                     //                                                    .writedata
		.eth_10g_mac_csr_waitrequest                                     (mm_interconnect_0_eth_10g_mac_csr_waitrequest),                   //                                                    .waitrequest
		.eth_loopback_composed_csr_address                               (mm_interconnect_0_eth_loopback_composed_csr_address),             //                           eth_loopback_composed_csr.address
		.eth_loopback_composed_csr_write                                 (mm_interconnect_0_eth_loopback_composed_csr_write),               //                                                    .write
		.eth_loopback_composed_csr_read                                  (mm_interconnect_0_eth_loopback_composed_csr_read),                //                                                    .read
		.eth_loopback_composed_csr_readdata                              (mm_interconnect_0_eth_loopback_composed_csr_readdata),            //                                                    .readdata
		.eth_loopback_composed_csr_writedata                             (mm_interconnect_0_eth_loopback_composed_csr_writedata),           //                                                    .writedata
		.eth_loopback_composed_csr_waitrequest                           (mm_interconnect_0_eth_loopback_composed_csr_waitrequest),         //                                                    .waitrequest
		.eth_mdio_csr_address                                            (mm_interconnect_0_eth_mdio_csr_address),                          //                                        eth_mdio_csr.address
		.eth_mdio_csr_write                                              (mm_interconnect_0_eth_mdio_csr_write),                            //                                                    .write
		.eth_mdio_csr_read                                               (mm_interconnect_0_eth_mdio_csr_read),                             //                                                    .read
		.eth_mdio_csr_readdata                                           (mm_interconnect_0_eth_mdio_csr_readdata),                         //                                                    .readdata
		.eth_mdio_csr_writedata                                          (mm_interconnect_0_eth_mdio_csr_writedata),                        //                                                    .writedata
		.eth_mdio_csr_waitrequest                                        (mm_interconnect_0_eth_mdio_csr_waitrequest),                      //                                                    .waitrequest
		.rx_sc_fifo_csr_address                                          (mm_interconnect_0_rx_sc_fifo_csr_address),                        //                                      rx_sc_fifo_csr.address
		.rx_sc_fifo_csr_write                                            (mm_interconnect_0_rx_sc_fifo_csr_write),                          //                                                    .write
		.rx_sc_fifo_csr_read                                             (mm_interconnect_0_rx_sc_fifo_csr_read),                           //                                                    .read
		.rx_sc_fifo_csr_readdata                                         (mm_interconnect_0_rx_sc_fifo_csr_readdata),                       //                                                    .readdata
		.rx_sc_fifo_csr_writedata                                        (mm_interconnect_0_rx_sc_fifo_csr_writedata),                      //                                                    .writedata
		.tx_sc_fifo_csr_address                                          (mm_interconnect_0_tx_sc_fifo_csr_address),                        //                                      tx_sc_fifo_csr.address
		.tx_sc_fifo_csr_write                                            (mm_interconnect_0_tx_sc_fifo_csr_write),                          //                                                    .write
		.tx_sc_fifo_csr_read                                             (mm_interconnect_0_tx_sc_fifo_csr_read),                           //                                                    .read
		.tx_sc_fifo_csr_readdata                                         (mm_interconnect_0_tx_sc_fifo_csr_readdata),                       //                                                    .readdata
		.tx_sc_fifo_csr_writedata                                        (mm_interconnect_0_tx_sc_fifo_csr_writedata)                       //                                                    .writedata
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~mm_reset_reset_n),              // reset_in0.reset
		.clk            (mm_clk_clk),                     //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_001 (
		.reset_in0      (~tx_reset_reset_n),                  // reset_in0.reset
		.clk            (tx_clk_clk),                         //       clk.clk
		.reset_out      (rst_controller_001_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller_002 (
		.reset_in0      (~ref_reset_reset_n),                 // reset_in0.reset
		.clk            (xgmii_rx_clk_clk),                   //       clk.clk
		.reset_out      (rst_controller_002_reset_out_reset), // reset_out.reset
		.reset_req      (),                                   // (terminated)
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_in1      (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

	assign tx_serial_data_export = { altera_10gbaser_tx_serial_data[0:0] };

	assign altera_10gbaser_xgmii_rx_dc_0_data = { altera_10gbaser_xgmii_rx_dc[71:0] };

endmodule
