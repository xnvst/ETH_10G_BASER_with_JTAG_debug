// jtag_system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 205 at 2014.11.09.00:39:15

`timescale 1 ps / 1 ps
module jtag_system_mm_interconnect_1 (
		input  wire        clk_clk_clk,                                        //                                      clk_clk.clk
		input  wire        mm_bridge_master_reset_reset_bridge_in_reset_reset, // mm_bridge_master_reset_reset_bridge_in_reset.reset
		input  wire [31:0] mm_bridge_master_m0_address,                        //                          mm_bridge_master_m0.address
		output wire        mm_bridge_master_m0_waitrequest,                    //                                             .waitrequest
		input  wire [3:0]  mm_bridge_master_m0_burstcount,                     //                                             .burstcount
		input  wire [3:0]  mm_bridge_master_m0_byteenable,                     //                                             .byteenable
		input  wire        mm_bridge_master_m0_read,                           //                                             .read
		output wire [31:0] mm_bridge_master_m0_readdata,                       //                                             .readdata
		output wire        mm_bridge_master_m0_readdatavalid,                  //                                             .readdatavalid
		input  wire        mm_bridge_master_m0_write,                          //                                             .write
		input  wire [31:0] mm_bridge_master_m0_writedata,                      //                                             .writedata
		input  wire        mm_bridge_master_m0_debugaccess,                    //                                             .debugaccess
		output wire [23:0] mm_bridge_s0_s0_address,                            //                              mm_bridge_s0_s0.address
		output wire        mm_bridge_s0_s0_write,                              //                                             .write
		output wire        mm_bridge_s0_s0_read,                               //                                             .read
		input  wire [31:0] mm_bridge_s0_s0_readdata,                           //                                             .readdata
		output wire [31:0] mm_bridge_s0_s0_writedata,                          //                                             .writedata
		output wire [3:0]  mm_bridge_s0_s0_burstcount,                         //                                             .burstcount
		output wire [3:0]  mm_bridge_s0_s0_byteenable,                         //                                             .byteenable
		input  wire        mm_bridge_s0_s0_readdatavalid,                      //                                             .readdatavalid
		input  wire        mm_bridge_s0_s0_waitrequest,                        //                                             .waitrequest
		output wire        mm_bridge_s0_s0_debugaccess,                        //                                             .debugaccess
		output wire [17:0] mm_bridge_s1_s0_address,                            //                              mm_bridge_s1_s0.address
		output wire        mm_bridge_s1_s0_write,                              //                                             .write
		output wire        mm_bridge_s1_s0_read,                               //                                             .read
		input  wire [31:0] mm_bridge_s1_s0_readdata,                           //                                             .readdata
		output wire [31:0] mm_bridge_s1_s0_writedata,                          //                                             .writedata
		output wire [3:0]  mm_bridge_s1_s0_burstcount,                         //                                             .burstcount
		output wire [3:0]  mm_bridge_s1_s0_byteenable,                         //                                             .byteenable
		input  wire        mm_bridge_s1_s0_readdatavalid,                      //                                             .readdatavalid
		input  wire        mm_bridge_s1_s0_waitrequest,                        //                                             .waitrequest
		output wire        mm_bridge_s1_s0_debugaccess,                        //                                             .debugaccess
		output wire [17:0] mm_bridge_s2_s0_address,                            //                              mm_bridge_s2_s0.address
		output wire        mm_bridge_s2_s0_write,                              //                                             .write
		output wire        mm_bridge_s2_s0_read,                               //                                             .read
		input  wire [31:0] mm_bridge_s2_s0_readdata,                           //                                             .readdata
		output wire [31:0] mm_bridge_s2_s0_writedata,                          //                                             .writedata
		output wire [3:0]  mm_bridge_s2_s0_burstcount,                         //                                             .burstcount
		output wire [3:0]  mm_bridge_s2_s0_byteenable,                         //                                             .byteenable
		input  wire        mm_bridge_s2_s0_readdatavalid,                      //                                             .readdatavalid
		input  wire        mm_bridge_s2_s0_waitrequest,                        //                                             .waitrequest
		output wire        mm_bridge_s2_s0_debugaccess,                        //                                             .debugaccess
		output wire [23:0] mm_bridge_s3_s0_address,                            //                              mm_bridge_s3_s0.address
		output wire        mm_bridge_s3_s0_write,                              //                                             .write
		output wire        mm_bridge_s3_s0_read,                               //                                             .read
		input  wire [31:0] mm_bridge_s3_s0_readdata,                           //                                             .readdata
		output wire [31:0] mm_bridge_s3_s0_writedata,                          //                                             .writedata
		output wire [3:0]  mm_bridge_s3_s0_burstcount,                         //                                             .burstcount
		output wire [3:0]  mm_bridge_s3_s0_byteenable,                         //                                             .byteenable
		input  wire        mm_bridge_s3_s0_readdatavalid,                      //                                             .readdatavalid
		input  wire        mm_bridge_s3_s0_waitrequest,                        //                                             .waitrequest
		output wire        mm_bridge_s3_s0_debugaccess,                        //                                             .debugaccess
		output wire [17:0] mm_bridge_s4_s0_address,                            //                              mm_bridge_s4_s0.address
		output wire        mm_bridge_s4_s0_write,                              //                                             .write
		output wire        mm_bridge_s4_s0_read,                               //                                             .read
		input  wire [31:0] mm_bridge_s4_s0_readdata,                           //                                             .readdata
		output wire [31:0] mm_bridge_s4_s0_writedata,                          //                                             .writedata
		output wire [3:0]  mm_bridge_s4_s0_burstcount,                         //                                             .burstcount
		output wire [3:0]  mm_bridge_s4_s0_byteenable,                         //                                             .byteenable
		input  wire        mm_bridge_s4_s0_readdatavalid,                      //                                             .readdatavalid
		input  wire        mm_bridge_s4_s0_waitrequest,                        //                                             .waitrequest
		output wire        mm_bridge_s4_s0_debugaccess,                        //                                             .debugaccess
		output wire [17:0] mm_bridge_s5_s0_address,                            //                              mm_bridge_s5_s0.address
		output wire        mm_bridge_s5_s0_write,                              //                                             .write
		output wire        mm_bridge_s5_s0_read,                               //                                             .read
		input  wire [31:0] mm_bridge_s5_s0_readdata,                           //                                             .readdata
		output wire [31:0] mm_bridge_s5_s0_writedata,                          //                                             .writedata
		output wire [3:0]  mm_bridge_s5_s0_burstcount,                         //                                             .burstcount
		output wire [3:0]  mm_bridge_s5_s0_byteenable,                         //                                             .byteenable
		input  wire        mm_bridge_s5_s0_readdatavalid,                      //                                             .readdatavalid
		input  wire        mm_bridge_s5_s0_waitrequest,                        //                                             .waitrequest
		output wire        mm_bridge_s5_s0_debugaccess,                        //                                             .debugaccess
		output wire [17:0] mm_bridge_s6_s0_address,                            //                              mm_bridge_s6_s0.address
		output wire        mm_bridge_s6_s0_write,                              //                                             .write
		output wire        mm_bridge_s6_s0_read,                               //                                             .read
		input  wire [31:0] mm_bridge_s6_s0_readdata,                           //                                             .readdata
		output wire [31:0] mm_bridge_s6_s0_writedata,                          //                                             .writedata
		output wire [3:0]  mm_bridge_s6_s0_burstcount,                         //                                             .burstcount
		output wire [3:0]  mm_bridge_s6_s0_byteenable,                         //                                             .byteenable
		input  wire        mm_bridge_s6_s0_readdatavalid,                      //                                             .readdatavalid
		input  wire        mm_bridge_s6_s0_waitrequest,                        //                                             .waitrequest
		output wire        mm_bridge_s6_s0_debugaccess                         //                                             .debugaccess
	);

	wire          mm_bridge_master_m0_translator_avalon_universal_master_0_waitrequest;   // mm_bridge_master_m0_agent:av_waitrequest -> mm_bridge_master_m0_translator:uav_waitrequest
	wire    [5:0] mm_bridge_master_m0_translator_avalon_universal_master_0_burstcount;    // mm_bridge_master_m0_translator:uav_burstcount -> mm_bridge_master_m0_agent:av_burstcount
	wire   [31:0] mm_bridge_master_m0_translator_avalon_universal_master_0_writedata;     // mm_bridge_master_m0_translator:uav_writedata -> mm_bridge_master_m0_agent:av_writedata
	wire   [31:0] mm_bridge_master_m0_translator_avalon_universal_master_0_address;       // mm_bridge_master_m0_translator:uav_address -> mm_bridge_master_m0_agent:av_address
	wire          mm_bridge_master_m0_translator_avalon_universal_master_0_lock;          // mm_bridge_master_m0_translator:uav_lock -> mm_bridge_master_m0_agent:av_lock
	wire          mm_bridge_master_m0_translator_avalon_universal_master_0_write;         // mm_bridge_master_m0_translator:uav_write -> mm_bridge_master_m0_agent:av_write
	wire          mm_bridge_master_m0_translator_avalon_universal_master_0_read;          // mm_bridge_master_m0_translator:uav_read -> mm_bridge_master_m0_agent:av_read
	wire   [31:0] mm_bridge_master_m0_translator_avalon_universal_master_0_readdata;      // mm_bridge_master_m0_agent:av_readdata -> mm_bridge_master_m0_translator:uav_readdata
	wire          mm_bridge_master_m0_translator_avalon_universal_master_0_debugaccess;   // mm_bridge_master_m0_translator:uav_debugaccess -> mm_bridge_master_m0_agent:av_debugaccess
	wire    [3:0] mm_bridge_master_m0_translator_avalon_universal_master_0_byteenable;    // mm_bridge_master_m0_translator:uav_byteenable -> mm_bridge_master_m0_agent:av_byteenable
	wire          mm_bridge_master_m0_translator_avalon_universal_master_0_readdatavalid; // mm_bridge_master_m0_agent:av_readdatavalid -> mm_bridge_master_m0_translator:uav_readdatavalid
	wire          mm_bridge_s0_s0_agent_m0_waitrequest;                                   // mm_bridge_s0_s0_translator:uav_waitrequest -> mm_bridge_s0_s0_agent:m0_waitrequest
	wire    [5:0] mm_bridge_s0_s0_agent_m0_burstcount;                                    // mm_bridge_s0_s0_agent:m0_burstcount -> mm_bridge_s0_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_s0_s0_agent_m0_writedata;                                     // mm_bridge_s0_s0_agent:m0_writedata -> mm_bridge_s0_s0_translator:uav_writedata
	wire   [31:0] mm_bridge_s0_s0_agent_m0_address;                                       // mm_bridge_s0_s0_agent:m0_address -> mm_bridge_s0_s0_translator:uav_address
	wire          mm_bridge_s0_s0_agent_m0_write;                                         // mm_bridge_s0_s0_agent:m0_write -> mm_bridge_s0_s0_translator:uav_write
	wire          mm_bridge_s0_s0_agent_m0_lock;                                          // mm_bridge_s0_s0_agent:m0_lock -> mm_bridge_s0_s0_translator:uav_lock
	wire          mm_bridge_s0_s0_agent_m0_read;                                          // mm_bridge_s0_s0_agent:m0_read -> mm_bridge_s0_s0_translator:uav_read
	wire   [31:0] mm_bridge_s0_s0_agent_m0_readdata;                                      // mm_bridge_s0_s0_translator:uav_readdata -> mm_bridge_s0_s0_agent:m0_readdata
	wire          mm_bridge_s0_s0_agent_m0_readdatavalid;                                 // mm_bridge_s0_s0_translator:uav_readdatavalid -> mm_bridge_s0_s0_agent:m0_readdatavalid
	wire          mm_bridge_s0_s0_agent_m0_debugaccess;                                   // mm_bridge_s0_s0_agent:m0_debugaccess -> mm_bridge_s0_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_s0_s0_agent_m0_byteenable;                                    // mm_bridge_s0_s0_agent:m0_byteenable -> mm_bridge_s0_s0_translator:uav_byteenable
	wire          mm_bridge_s0_s0_agent_rf_source_endofpacket;                            // mm_bridge_s0_s0_agent:rf_source_endofpacket -> mm_bridge_s0_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_s0_s0_agent_rf_source_valid;                                  // mm_bridge_s0_s0_agent:rf_source_valid -> mm_bridge_s0_s0_agent_rsp_fifo:in_valid
	wire          mm_bridge_s0_s0_agent_rf_source_startofpacket;                          // mm_bridge_s0_s0_agent:rf_source_startofpacket -> mm_bridge_s0_s0_agent_rsp_fifo:in_startofpacket
	wire  [109:0] mm_bridge_s0_s0_agent_rf_source_data;                                   // mm_bridge_s0_s0_agent:rf_source_data -> mm_bridge_s0_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_s0_s0_agent_rf_source_ready;                                  // mm_bridge_s0_s0_agent_rsp_fifo:in_ready -> mm_bridge_s0_s0_agent:rf_source_ready
	wire          mm_bridge_s0_s0_agent_rsp_fifo_out_endofpacket;                         // mm_bridge_s0_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_s0_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_s0_s0_agent_rsp_fifo_out_valid;                               // mm_bridge_s0_s0_agent_rsp_fifo:out_valid -> mm_bridge_s0_s0_agent:rf_sink_valid
	wire          mm_bridge_s0_s0_agent_rsp_fifo_out_startofpacket;                       // mm_bridge_s0_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_s0_s0_agent:rf_sink_startofpacket
	wire  [109:0] mm_bridge_s0_s0_agent_rsp_fifo_out_data;                                // mm_bridge_s0_s0_agent_rsp_fifo:out_data -> mm_bridge_s0_s0_agent:rf_sink_data
	wire          mm_bridge_s0_s0_agent_rsp_fifo_out_ready;                               // mm_bridge_s0_s0_agent:rf_sink_ready -> mm_bridge_s0_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_s0_s0_agent_rdata_fifo_src_valid;                             // mm_bridge_s0_s0_agent:rdata_fifo_src_valid -> mm_bridge_s0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_s0_s0_agent_rdata_fifo_src_data;                              // mm_bridge_s0_s0_agent:rdata_fifo_src_data -> mm_bridge_s0_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_s0_s0_agent_rdata_fifo_src_ready;                             // mm_bridge_s0_s0_agent:rdata_fifo_sink_ready -> mm_bridge_s0_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_endofpacket;                                                // cmd_mux:src_endofpacket -> mm_bridge_s0_s0_agent:cp_endofpacket
	wire          cmd_mux_src_valid;                                                      // cmd_mux:src_valid -> mm_bridge_s0_s0_agent:cp_valid
	wire          cmd_mux_src_startofpacket;                                              // cmd_mux:src_startofpacket -> mm_bridge_s0_s0_agent:cp_startofpacket
	wire  [108:0] cmd_mux_src_data;                                                       // cmd_mux:src_data -> mm_bridge_s0_s0_agent:cp_data
	wire    [6:0] cmd_mux_src_channel;                                                    // cmd_mux:src_channel -> mm_bridge_s0_s0_agent:cp_channel
	wire          cmd_mux_src_ready;                                                      // mm_bridge_s0_s0_agent:cp_ready -> cmd_mux:src_ready
	wire          mm_bridge_s1_s0_agent_m0_waitrequest;                                   // mm_bridge_s1_s0_translator:uav_waitrequest -> mm_bridge_s1_s0_agent:m0_waitrequest
	wire    [5:0] mm_bridge_s1_s0_agent_m0_burstcount;                                    // mm_bridge_s1_s0_agent:m0_burstcount -> mm_bridge_s1_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_s1_s0_agent_m0_writedata;                                     // mm_bridge_s1_s0_agent:m0_writedata -> mm_bridge_s1_s0_translator:uav_writedata
	wire   [31:0] mm_bridge_s1_s0_agent_m0_address;                                       // mm_bridge_s1_s0_agent:m0_address -> mm_bridge_s1_s0_translator:uav_address
	wire          mm_bridge_s1_s0_agent_m0_write;                                         // mm_bridge_s1_s0_agent:m0_write -> mm_bridge_s1_s0_translator:uav_write
	wire          mm_bridge_s1_s0_agent_m0_lock;                                          // mm_bridge_s1_s0_agent:m0_lock -> mm_bridge_s1_s0_translator:uav_lock
	wire          mm_bridge_s1_s0_agent_m0_read;                                          // mm_bridge_s1_s0_agent:m0_read -> mm_bridge_s1_s0_translator:uav_read
	wire   [31:0] mm_bridge_s1_s0_agent_m0_readdata;                                      // mm_bridge_s1_s0_translator:uav_readdata -> mm_bridge_s1_s0_agent:m0_readdata
	wire          mm_bridge_s1_s0_agent_m0_readdatavalid;                                 // mm_bridge_s1_s0_translator:uav_readdatavalid -> mm_bridge_s1_s0_agent:m0_readdatavalid
	wire          mm_bridge_s1_s0_agent_m0_debugaccess;                                   // mm_bridge_s1_s0_agent:m0_debugaccess -> mm_bridge_s1_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_s1_s0_agent_m0_byteenable;                                    // mm_bridge_s1_s0_agent:m0_byteenable -> mm_bridge_s1_s0_translator:uav_byteenable
	wire          mm_bridge_s1_s0_agent_rf_source_endofpacket;                            // mm_bridge_s1_s0_agent:rf_source_endofpacket -> mm_bridge_s1_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_s1_s0_agent_rf_source_valid;                                  // mm_bridge_s1_s0_agent:rf_source_valid -> mm_bridge_s1_s0_agent_rsp_fifo:in_valid
	wire          mm_bridge_s1_s0_agent_rf_source_startofpacket;                          // mm_bridge_s1_s0_agent:rf_source_startofpacket -> mm_bridge_s1_s0_agent_rsp_fifo:in_startofpacket
	wire  [109:0] mm_bridge_s1_s0_agent_rf_source_data;                                   // mm_bridge_s1_s0_agent:rf_source_data -> mm_bridge_s1_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_s1_s0_agent_rf_source_ready;                                  // mm_bridge_s1_s0_agent_rsp_fifo:in_ready -> mm_bridge_s1_s0_agent:rf_source_ready
	wire          mm_bridge_s1_s0_agent_rsp_fifo_out_endofpacket;                         // mm_bridge_s1_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_s1_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_s1_s0_agent_rsp_fifo_out_valid;                               // mm_bridge_s1_s0_agent_rsp_fifo:out_valid -> mm_bridge_s1_s0_agent:rf_sink_valid
	wire          mm_bridge_s1_s0_agent_rsp_fifo_out_startofpacket;                       // mm_bridge_s1_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_s1_s0_agent:rf_sink_startofpacket
	wire  [109:0] mm_bridge_s1_s0_agent_rsp_fifo_out_data;                                // mm_bridge_s1_s0_agent_rsp_fifo:out_data -> mm_bridge_s1_s0_agent:rf_sink_data
	wire          mm_bridge_s1_s0_agent_rsp_fifo_out_ready;                               // mm_bridge_s1_s0_agent:rf_sink_ready -> mm_bridge_s1_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_s1_s0_agent_rdata_fifo_src_valid;                             // mm_bridge_s1_s0_agent:rdata_fifo_src_valid -> mm_bridge_s1_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_s1_s0_agent_rdata_fifo_src_data;                              // mm_bridge_s1_s0_agent:rdata_fifo_src_data -> mm_bridge_s1_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_s1_s0_agent_rdata_fifo_src_ready;                             // mm_bridge_s1_s0_agent:rdata_fifo_sink_ready -> mm_bridge_s1_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_001_src_endofpacket;                                            // cmd_mux_001:src_endofpacket -> mm_bridge_s1_s0_agent:cp_endofpacket
	wire          cmd_mux_001_src_valid;                                                  // cmd_mux_001:src_valid -> mm_bridge_s1_s0_agent:cp_valid
	wire          cmd_mux_001_src_startofpacket;                                          // cmd_mux_001:src_startofpacket -> mm_bridge_s1_s0_agent:cp_startofpacket
	wire  [108:0] cmd_mux_001_src_data;                                                   // cmd_mux_001:src_data -> mm_bridge_s1_s0_agent:cp_data
	wire    [6:0] cmd_mux_001_src_channel;                                                // cmd_mux_001:src_channel -> mm_bridge_s1_s0_agent:cp_channel
	wire          cmd_mux_001_src_ready;                                                  // mm_bridge_s1_s0_agent:cp_ready -> cmd_mux_001:src_ready
	wire          mm_bridge_s2_s0_agent_m0_waitrequest;                                   // mm_bridge_s2_s0_translator:uav_waitrequest -> mm_bridge_s2_s0_agent:m0_waitrequest
	wire    [5:0] mm_bridge_s2_s0_agent_m0_burstcount;                                    // mm_bridge_s2_s0_agent:m0_burstcount -> mm_bridge_s2_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_s2_s0_agent_m0_writedata;                                     // mm_bridge_s2_s0_agent:m0_writedata -> mm_bridge_s2_s0_translator:uav_writedata
	wire   [31:0] mm_bridge_s2_s0_agent_m0_address;                                       // mm_bridge_s2_s0_agent:m0_address -> mm_bridge_s2_s0_translator:uav_address
	wire          mm_bridge_s2_s0_agent_m0_write;                                         // mm_bridge_s2_s0_agent:m0_write -> mm_bridge_s2_s0_translator:uav_write
	wire          mm_bridge_s2_s0_agent_m0_lock;                                          // mm_bridge_s2_s0_agent:m0_lock -> mm_bridge_s2_s0_translator:uav_lock
	wire          mm_bridge_s2_s0_agent_m0_read;                                          // mm_bridge_s2_s0_agent:m0_read -> mm_bridge_s2_s0_translator:uav_read
	wire   [31:0] mm_bridge_s2_s0_agent_m0_readdata;                                      // mm_bridge_s2_s0_translator:uav_readdata -> mm_bridge_s2_s0_agent:m0_readdata
	wire          mm_bridge_s2_s0_agent_m0_readdatavalid;                                 // mm_bridge_s2_s0_translator:uav_readdatavalid -> mm_bridge_s2_s0_agent:m0_readdatavalid
	wire          mm_bridge_s2_s0_agent_m0_debugaccess;                                   // mm_bridge_s2_s0_agent:m0_debugaccess -> mm_bridge_s2_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_s2_s0_agent_m0_byteenable;                                    // mm_bridge_s2_s0_agent:m0_byteenable -> mm_bridge_s2_s0_translator:uav_byteenable
	wire          mm_bridge_s2_s0_agent_rf_source_endofpacket;                            // mm_bridge_s2_s0_agent:rf_source_endofpacket -> mm_bridge_s2_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_s2_s0_agent_rf_source_valid;                                  // mm_bridge_s2_s0_agent:rf_source_valid -> mm_bridge_s2_s0_agent_rsp_fifo:in_valid
	wire          mm_bridge_s2_s0_agent_rf_source_startofpacket;                          // mm_bridge_s2_s0_agent:rf_source_startofpacket -> mm_bridge_s2_s0_agent_rsp_fifo:in_startofpacket
	wire  [109:0] mm_bridge_s2_s0_agent_rf_source_data;                                   // mm_bridge_s2_s0_agent:rf_source_data -> mm_bridge_s2_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_s2_s0_agent_rf_source_ready;                                  // mm_bridge_s2_s0_agent_rsp_fifo:in_ready -> mm_bridge_s2_s0_agent:rf_source_ready
	wire          mm_bridge_s2_s0_agent_rsp_fifo_out_endofpacket;                         // mm_bridge_s2_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_s2_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_s2_s0_agent_rsp_fifo_out_valid;                               // mm_bridge_s2_s0_agent_rsp_fifo:out_valid -> mm_bridge_s2_s0_agent:rf_sink_valid
	wire          mm_bridge_s2_s0_agent_rsp_fifo_out_startofpacket;                       // mm_bridge_s2_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_s2_s0_agent:rf_sink_startofpacket
	wire  [109:0] mm_bridge_s2_s0_agent_rsp_fifo_out_data;                                // mm_bridge_s2_s0_agent_rsp_fifo:out_data -> mm_bridge_s2_s0_agent:rf_sink_data
	wire          mm_bridge_s2_s0_agent_rsp_fifo_out_ready;                               // mm_bridge_s2_s0_agent:rf_sink_ready -> mm_bridge_s2_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_s2_s0_agent_rdata_fifo_src_valid;                             // mm_bridge_s2_s0_agent:rdata_fifo_src_valid -> mm_bridge_s2_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_s2_s0_agent_rdata_fifo_src_data;                              // mm_bridge_s2_s0_agent:rdata_fifo_src_data -> mm_bridge_s2_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_s2_s0_agent_rdata_fifo_src_ready;                             // mm_bridge_s2_s0_agent:rdata_fifo_sink_ready -> mm_bridge_s2_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_endofpacket;                                            // cmd_mux_002:src_endofpacket -> mm_bridge_s2_s0_agent:cp_endofpacket
	wire          cmd_mux_002_src_valid;                                                  // cmd_mux_002:src_valid -> mm_bridge_s2_s0_agent:cp_valid
	wire          cmd_mux_002_src_startofpacket;                                          // cmd_mux_002:src_startofpacket -> mm_bridge_s2_s0_agent:cp_startofpacket
	wire  [108:0] cmd_mux_002_src_data;                                                   // cmd_mux_002:src_data -> mm_bridge_s2_s0_agent:cp_data
	wire    [6:0] cmd_mux_002_src_channel;                                                // cmd_mux_002:src_channel -> mm_bridge_s2_s0_agent:cp_channel
	wire          cmd_mux_002_src_ready;                                                  // mm_bridge_s2_s0_agent:cp_ready -> cmd_mux_002:src_ready
	wire          mm_bridge_s3_s0_agent_m0_waitrequest;                                   // mm_bridge_s3_s0_translator:uav_waitrequest -> mm_bridge_s3_s0_agent:m0_waitrequest
	wire    [5:0] mm_bridge_s3_s0_agent_m0_burstcount;                                    // mm_bridge_s3_s0_agent:m0_burstcount -> mm_bridge_s3_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_s3_s0_agent_m0_writedata;                                     // mm_bridge_s3_s0_agent:m0_writedata -> mm_bridge_s3_s0_translator:uav_writedata
	wire   [31:0] mm_bridge_s3_s0_agent_m0_address;                                       // mm_bridge_s3_s0_agent:m0_address -> mm_bridge_s3_s0_translator:uav_address
	wire          mm_bridge_s3_s0_agent_m0_write;                                         // mm_bridge_s3_s0_agent:m0_write -> mm_bridge_s3_s0_translator:uav_write
	wire          mm_bridge_s3_s0_agent_m0_lock;                                          // mm_bridge_s3_s0_agent:m0_lock -> mm_bridge_s3_s0_translator:uav_lock
	wire          mm_bridge_s3_s0_agent_m0_read;                                          // mm_bridge_s3_s0_agent:m0_read -> mm_bridge_s3_s0_translator:uav_read
	wire   [31:0] mm_bridge_s3_s0_agent_m0_readdata;                                      // mm_bridge_s3_s0_translator:uav_readdata -> mm_bridge_s3_s0_agent:m0_readdata
	wire          mm_bridge_s3_s0_agent_m0_readdatavalid;                                 // mm_bridge_s3_s0_translator:uav_readdatavalid -> mm_bridge_s3_s0_agent:m0_readdatavalid
	wire          mm_bridge_s3_s0_agent_m0_debugaccess;                                   // mm_bridge_s3_s0_agent:m0_debugaccess -> mm_bridge_s3_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_s3_s0_agent_m0_byteenable;                                    // mm_bridge_s3_s0_agent:m0_byteenable -> mm_bridge_s3_s0_translator:uav_byteenable
	wire          mm_bridge_s3_s0_agent_rf_source_endofpacket;                            // mm_bridge_s3_s0_agent:rf_source_endofpacket -> mm_bridge_s3_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_s3_s0_agent_rf_source_valid;                                  // mm_bridge_s3_s0_agent:rf_source_valid -> mm_bridge_s3_s0_agent_rsp_fifo:in_valid
	wire          mm_bridge_s3_s0_agent_rf_source_startofpacket;                          // mm_bridge_s3_s0_agent:rf_source_startofpacket -> mm_bridge_s3_s0_agent_rsp_fifo:in_startofpacket
	wire  [109:0] mm_bridge_s3_s0_agent_rf_source_data;                                   // mm_bridge_s3_s0_agent:rf_source_data -> mm_bridge_s3_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_s3_s0_agent_rf_source_ready;                                  // mm_bridge_s3_s0_agent_rsp_fifo:in_ready -> mm_bridge_s3_s0_agent:rf_source_ready
	wire          mm_bridge_s3_s0_agent_rsp_fifo_out_endofpacket;                         // mm_bridge_s3_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_s3_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_s3_s0_agent_rsp_fifo_out_valid;                               // mm_bridge_s3_s0_agent_rsp_fifo:out_valid -> mm_bridge_s3_s0_agent:rf_sink_valid
	wire          mm_bridge_s3_s0_agent_rsp_fifo_out_startofpacket;                       // mm_bridge_s3_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_s3_s0_agent:rf_sink_startofpacket
	wire  [109:0] mm_bridge_s3_s0_agent_rsp_fifo_out_data;                                // mm_bridge_s3_s0_agent_rsp_fifo:out_data -> mm_bridge_s3_s0_agent:rf_sink_data
	wire          mm_bridge_s3_s0_agent_rsp_fifo_out_ready;                               // mm_bridge_s3_s0_agent:rf_sink_ready -> mm_bridge_s3_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_s3_s0_agent_rdata_fifo_src_valid;                             // mm_bridge_s3_s0_agent:rdata_fifo_src_valid -> mm_bridge_s3_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_s3_s0_agent_rdata_fifo_src_data;                              // mm_bridge_s3_s0_agent:rdata_fifo_src_data -> mm_bridge_s3_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_s3_s0_agent_rdata_fifo_src_ready;                             // mm_bridge_s3_s0_agent:rdata_fifo_sink_ready -> mm_bridge_s3_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_endofpacket;                                            // cmd_mux_003:src_endofpacket -> mm_bridge_s3_s0_agent:cp_endofpacket
	wire          cmd_mux_003_src_valid;                                                  // cmd_mux_003:src_valid -> mm_bridge_s3_s0_agent:cp_valid
	wire          cmd_mux_003_src_startofpacket;                                          // cmd_mux_003:src_startofpacket -> mm_bridge_s3_s0_agent:cp_startofpacket
	wire  [108:0] cmd_mux_003_src_data;                                                   // cmd_mux_003:src_data -> mm_bridge_s3_s0_agent:cp_data
	wire    [6:0] cmd_mux_003_src_channel;                                                // cmd_mux_003:src_channel -> mm_bridge_s3_s0_agent:cp_channel
	wire          cmd_mux_003_src_ready;                                                  // mm_bridge_s3_s0_agent:cp_ready -> cmd_mux_003:src_ready
	wire          mm_bridge_s4_s0_agent_m0_waitrequest;                                   // mm_bridge_s4_s0_translator:uav_waitrequest -> mm_bridge_s4_s0_agent:m0_waitrequest
	wire    [5:0] mm_bridge_s4_s0_agent_m0_burstcount;                                    // mm_bridge_s4_s0_agent:m0_burstcount -> mm_bridge_s4_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_s4_s0_agent_m0_writedata;                                     // mm_bridge_s4_s0_agent:m0_writedata -> mm_bridge_s4_s0_translator:uav_writedata
	wire   [31:0] mm_bridge_s4_s0_agent_m0_address;                                       // mm_bridge_s4_s0_agent:m0_address -> mm_bridge_s4_s0_translator:uav_address
	wire          mm_bridge_s4_s0_agent_m0_write;                                         // mm_bridge_s4_s0_agent:m0_write -> mm_bridge_s4_s0_translator:uav_write
	wire          mm_bridge_s4_s0_agent_m0_lock;                                          // mm_bridge_s4_s0_agent:m0_lock -> mm_bridge_s4_s0_translator:uav_lock
	wire          mm_bridge_s4_s0_agent_m0_read;                                          // mm_bridge_s4_s0_agent:m0_read -> mm_bridge_s4_s0_translator:uav_read
	wire   [31:0] mm_bridge_s4_s0_agent_m0_readdata;                                      // mm_bridge_s4_s0_translator:uav_readdata -> mm_bridge_s4_s0_agent:m0_readdata
	wire          mm_bridge_s4_s0_agent_m0_readdatavalid;                                 // mm_bridge_s4_s0_translator:uav_readdatavalid -> mm_bridge_s4_s0_agent:m0_readdatavalid
	wire          mm_bridge_s4_s0_agent_m0_debugaccess;                                   // mm_bridge_s4_s0_agent:m0_debugaccess -> mm_bridge_s4_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_s4_s0_agent_m0_byteenable;                                    // mm_bridge_s4_s0_agent:m0_byteenable -> mm_bridge_s4_s0_translator:uav_byteenable
	wire          mm_bridge_s4_s0_agent_rf_source_endofpacket;                            // mm_bridge_s4_s0_agent:rf_source_endofpacket -> mm_bridge_s4_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_s4_s0_agent_rf_source_valid;                                  // mm_bridge_s4_s0_agent:rf_source_valid -> mm_bridge_s4_s0_agent_rsp_fifo:in_valid
	wire          mm_bridge_s4_s0_agent_rf_source_startofpacket;                          // mm_bridge_s4_s0_agent:rf_source_startofpacket -> mm_bridge_s4_s0_agent_rsp_fifo:in_startofpacket
	wire  [109:0] mm_bridge_s4_s0_agent_rf_source_data;                                   // mm_bridge_s4_s0_agent:rf_source_data -> mm_bridge_s4_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_s4_s0_agent_rf_source_ready;                                  // mm_bridge_s4_s0_agent_rsp_fifo:in_ready -> mm_bridge_s4_s0_agent:rf_source_ready
	wire          mm_bridge_s4_s0_agent_rsp_fifo_out_endofpacket;                         // mm_bridge_s4_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_s4_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_s4_s0_agent_rsp_fifo_out_valid;                               // mm_bridge_s4_s0_agent_rsp_fifo:out_valid -> mm_bridge_s4_s0_agent:rf_sink_valid
	wire          mm_bridge_s4_s0_agent_rsp_fifo_out_startofpacket;                       // mm_bridge_s4_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_s4_s0_agent:rf_sink_startofpacket
	wire  [109:0] mm_bridge_s4_s0_agent_rsp_fifo_out_data;                                // mm_bridge_s4_s0_agent_rsp_fifo:out_data -> mm_bridge_s4_s0_agent:rf_sink_data
	wire          mm_bridge_s4_s0_agent_rsp_fifo_out_ready;                               // mm_bridge_s4_s0_agent:rf_sink_ready -> mm_bridge_s4_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_s4_s0_agent_rdata_fifo_src_valid;                             // mm_bridge_s4_s0_agent:rdata_fifo_src_valid -> mm_bridge_s4_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_s4_s0_agent_rdata_fifo_src_data;                              // mm_bridge_s4_s0_agent:rdata_fifo_src_data -> mm_bridge_s4_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_s4_s0_agent_rdata_fifo_src_ready;                             // mm_bridge_s4_s0_agent:rdata_fifo_sink_ready -> mm_bridge_s4_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_endofpacket;                                            // cmd_mux_004:src_endofpacket -> mm_bridge_s4_s0_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                  // cmd_mux_004:src_valid -> mm_bridge_s4_s0_agent:cp_valid
	wire          cmd_mux_004_src_startofpacket;                                          // cmd_mux_004:src_startofpacket -> mm_bridge_s4_s0_agent:cp_startofpacket
	wire  [108:0] cmd_mux_004_src_data;                                                   // cmd_mux_004:src_data -> mm_bridge_s4_s0_agent:cp_data
	wire    [6:0] cmd_mux_004_src_channel;                                                // cmd_mux_004:src_channel -> mm_bridge_s4_s0_agent:cp_channel
	wire          cmd_mux_004_src_ready;                                                  // mm_bridge_s4_s0_agent:cp_ready -> cmd_mux_004:src_ready
	wire          mm_bridge_s5_s0_agent_m0_waitrequest;                                   // mm_bridge_s5_s0_translator:uav_waitrequest -> mm_bridge_s5_s0_agent:m0_waitrequest
	wire    [5:0] mm_bridge_s5_s0_agent_m0_burstcount;                                    // mm_bridge_s5_s0_agent:m0_burstcount -> mm_bridge_s5_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_s5_s0_agent_m0_writedata;                                     // mm_bridge_s5_s0_agent:m0_writedata -> mm_bridge_s5_s0_translator:uav_writedata
	wire   [31:0] mm_bridge_s5_s0_agent_m0_address;                                       // mm_bridge_s5_s0_agent:m0_address -> mm_bridge_s5_s0_translator:uav_address
	wire          mm_bridge_s5_s0_agent_m0_write;                                         // mm_bridge_s5_s0_agent:m0_write -> mm_bridge_s5_s0_translator:uav_write
	wire          mm_bridge_s5_s0_agent_m0_lock;                                          // mm_bridge_s5_s0_agent:m0_lock -> mm_bridge_s5_s0_translator:uav_lock
	wire          mm_bridge_s5_s0_agent_m0_read;                                          // mm_bridge_s5_s0_agent:m0_read -> mm_bridge_s5_s0_translator:uav_read
	wire   [31:0] mm_bridge_s5_s0_agent_m0_readdata;                                      // mm_bridge_s5_s0_translator:uav_readdata -> mm_bridge_s5_s0_agent:m0_readdata
	wire          mm_bridge_s5_s0_agent_m0_readdatavalid;                                 // mm_bridge_s5_s0_translator:uav_readdatavalid -> mm_bridge_s5_s0_agent:m0_readdatavalid
	wire          mm_bridge_s5_s0_agent_m0_debugaccess;                                   // mm_bridge_s5_s0_agent:m0_debugaccess -> mm_bridge_s5_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_s5_s0_agent_m0_byteenable;                                    // mm_bridge_s5_s0_agent:m0_byteenable -> mm_bridge_s5_s0_translator:uav_byteenable
	wire          mm_bridge_s5_s0_agent_rf_source_endofpacket;                            // mm_bridge_s5_s0_agent:rf_source_endofpacket -> mm_bridge_s5_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_s5_s0_agent_rf_source_valid;                                  // mm_bridge_s5_s0_agent:rf_source_valid -> mm_bridge_s5_s0_agent_rsp_fifo:in_valid
	wire          mm_bridge_s5_s0_agent_rf_source_startofpacket;                          // mm_bridge_s5_s0_agent:rf_source_startofpacket -> mm_bridge_s5_s0_agent_rsp_fifo:in_startofpacket
	wire  [109:0] mm_bridge_s5_s0_agent_rf_source_data;                                   // mm_bridge_s5_s0_agent:rf_source_data -> mm_bridge_s5_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_s5_s0_agent_rf_source_ready;                                  // mm_bridge_s5_s0_agent_rsp_fifo:in_ready -> mm_bridge_s5_s0_agent:rf_source_ready
	wire          mm_bridge_s5_s0_agent_rsp_fifo_out_endofpacket;                         // mm_bridge_s5_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_s5_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_s5_s0_agent_rsp_fifo_out_valid;                               // mm_bridge_s5_s0_agent_rsp_fifo:out_valid -> mm_bridge_s5_s0_agent:rf_sink_valid
	wire          mm_bridge_s5_s0_agent_rsp_fifo_out_startofpacket;                       // mm_bridge_s5_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_s5_s0_agent:rf_sink_startofpacket
	wire  [109:0] mm_bridge_s5_s0_agent_rsp_fifo_out_data;                                // mm_bridge_s5_s0_agent_rsp_fifo:out_data -> mm_bridge_s5_s0_agent:rf_sink_data
	wire          mm_bridge_s5_s0_agent_rsp_fifo_out_ready;                               // mm_bridge_s5_s0_agent:rf_sink_ready -> mm_bridge_s5_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_s5_s0_agent_rdata_fifo_src_valid;                             // mm_bridge_s5_s0_agent:rdata_fifo_src_valid -> mm_bridge_s5_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_s5_s0_agent_rdata_fifo_src_data;                              // mm_bridge_s5_s0_agent:rdata_fifo_src_data -> mm_bridge_s5_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_s5_s0_agent_rdata_fifo_src_ready;                             // mm_bridge_s5_s0_agent:rdata_fifo_sink_ready -> mm_bridge_s5_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_endofpacket;                                            // cmd_mux_005:src_endofpacket -> mm_bridge_s5_s0_agent:cp_endofpacket
	wire          cmd_mux_005_src_valid;                                                  // cmd_mux_005:src_valid -> mm_bridge_s5_s0_agent:cp_valid
	wire          cmd_mux_005_src_startofpacket;                                          // cmd_mux_005:src_startofpacket -> mm_bridge_s5_s0_agent:cp_startofpacket
	wire  [108:0] cmd_mux_005_src_data;                                                   // cmd_mux_005:src_data -> mm_bridge_s5_s0_agent:cp_data
	wire    [6:0] cmd_mux_005_src_channel;                                                // cmd_mux_005:src_channel -> mm_bridge_s5_s0_agent:cp_channel
	wire          cmd_mux_005_src_ready;                                                  // mm_bridge_s5_s0_agent:cp_ready -> cmd_mux_005:src_ready
	wire          mm_bridge_s6_s0_agent_m0_waitrequest;                                   // mm_bridge_s6_s0_translator:uav_waitrequest -> mm_bridge_s6_s0_agent:m0_waitrequest
	wire    [5:0] mm_bridge_s6_s0_agent_m0_burstcount;                                    // mm_bridge_s6_s0_agent:m0_burstcount -> mm_bridge_s6_s0_translator:uav_burstcount
	wire   [31:0] mm_bridge_s6_s0_agent_m0_writedata;                                     // mm_bridge_s6_s0_agent:m0_writedata -> mm_bridge_s6_s0_translator:uav_writedata
	wire   [31:0] mm_bridge_s6_s0_agent_m0_address;                                       // mm_bridge_s6_s0_agent:m0_address -> mm_bridge_s6_s0_translator:uav_address
	wire          mm_bridge_s6_s0_agent_m0_write;                                         // mm_bridge_s6_s0_agent:m0_write -> mm_bridge_s6_s0_translator:uav_write
	wire          mm_bridge_s6_s0_agent_m0_lock;                                          // mm_bridge_s6_s0_agent:m0_lock -> mm_bridge_s6_s0_translator:uav_lock
	wire          mm_bridge_s6_s0_agent_m0_read;                                          // mm_bridge_s6_s0_agent:m0_read -> mm_bridge_s6_s0_translator:uav_read
	wire   [31:0] mm_bridge_s6_s0_agent_m0_readdata;                                      // mm_bridge_s6_s0_translator:uav_readdata -> mm_bridge_s6_s0_agent:m0_readdata
	wire          mm_bridge_s6_s0_agent_m0_readdatavalid;                                 // mm_bridge_s6_s0_translator:uav_readdatavalid -> mm_bridge_s6_s0_agent:m0_readdatavalid
	wire          mm_bridge_s6_s0_agent_m0_debugaccess;                                   // mm_bridge_s6_s0_agent:m0_debugaccess -> mm_bridge_s6_s0_translator:uav_debugaccess
	wire    [3:0] mm_bridge_s6_s0_agent_m0_byteenable;                                    // mm_bridge_s6_s0_agent:m0_byteenable -> mm_bridge_s6_s0_translator:uav_byteenable
	wire          mm_bridge_s6_s0_agent_rf_source_endofpacket;                            // mm_bridge_s6_s0_agent:rf_source_endofpacket -> mm_bridge_s6_s0_agent_rsp_fifo:in_endofpacket
	wire          mm_bridge_s6_s0_agent_rf_source_valid;                                  // mm_bridge_s6_s0_agent:rf_source_valid -> mm_bridge_s6_s0_agent_rsp_fifo:in_valid
	wire          mm_bridge_s6_s0_agent_rf_source_startofpacket;                          // mm_bridge_s6_s0_agent:rf_source_startofpacket -> mm_bridge_s6_s0_agent_rsp_fifo:in_startofpacket
	wire  [109:0] mm_bridge_s6_s0_agent_rf_source_data;                                   // mm_bridge_s6_s0_agent:rf_source_data -> mm_bridge_s6_s0_agent_rsp_fifo:in_data
	wire          mm_bridge_s6_s0_agent_rf_source_ready;                                  // mm_bridge_s6_s0_agent_rsp_fifo:in_ready -> mm_bridge_s6_s0_agent:rf_source_ready
	wire          mm_bridge_s6_s0_agent_rsp_fifo_out_endofpacket;                         // mm_bridge_s6_s0_agent_rsp_fifo:out_endofpacket -> mm_bridge_s6_s0_agent:rf_sink_endofpacket
	wire          mm_bridge_s6_s0_agent_rsp_fifo_out_valid;                               // mm_bridge_s6_s0_agent_rsp_fifo:out_valid -> mm_bridge_s6_s0_agent:rf_sink_valid
	wire          mm_bridge_s6_s0_agent_rsp_fifo_out_startofpacket;                       // mm_bridge_s6_s0_agent_rsp_fifo:out_startofpacket -> mm_bridge_s6_s0_agent:rf_sink_startofpacket
	wire  [109:0] mm_bridge_s6_s0_agent_rsp_fifo_out_data;                                // mm_bridge_s6_s0_agent_rsp_fifo:out_data -> mm_bridge_s6_s0_agent:rf_sink_data
	wire          mm_bridge_s6_s0_agent_rsp_fifo_out_ready;                               // mm_bridge_s6_s0_agent:rf_sink_ready -> mm_bridge_s6_s0_agent_rsp_fifo:out_ready
	wire          mm_bridge_s6_s0_agent_rdata_fifo_src_valid;                             // mm_bridge_s6_s0_agent:rdata_fifo_src_valid -> mm_bridge_s6_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] mm_bridge_s6_s0_agent_rdata_fifo_src_data;                              // mm_bridge_s6_s0_agent:rdata_fifo_src_data -> mm_bridge_s6_s0_agent:rdata_fifo_sink_data
	wire          mm_bridge_s6_s0_agent_rdata_fifo_src_ready;                             // mm_bridge_s6_s0_agent:rdata_fifo_sink_ready -> mm_bridge_s6_s0_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_endofpacket;                                            // cmd_mux_006:src_endofpacket -> mm_bridge_s6_s0_agent:cp_endofpacket
	wire          cmd_mux_006_src_valid;                                                  // cmd_mux_006:src_valid -> mm_bridge_s6_s0_agent:cp_valid
	wire          cmd_mux_006_src_startofpacket;                                          // cmd_mux_006:src_startofpacket -> mm_bridge_s6_s0_agent:cp_startofpacket
	wire  [108:0] cmd_mux_006_src_data;                                                   // cmd_mux_006:src_data -> mm_bridge_s6_s0_agent:cp_data
	wire    [6:0] cmd_mux_006_src_channel;                                                // cmd_mux_006:src_channel -> mm_bridge_s6_s0_agent:cp_channel
	wire          cmd_mux_006_src_ready;                                                  // mm_bridge_s6_s0_agent:cp_ready -> cmd_mux_006:src_ready
	wire          mm_bridge_master_m0_agent_cp_endofpacket;                               // mm_bridge_master_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          mm_bridge_master_m0_agent_cp_valid;                                     // mm_bridge_master_m0_agent:cp_valid -> router:sink_valid
	wire          mm_bridge_master_m0_agent_cp_startofpacket;                             // mm_bridge_master_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [108:0] mm_bridge_master_m0_agent_cp_data;                                      // mm_bridge_master_m0_agent:cp_data -> router:sink_data
	wire          mm_bridge_master_m0_agent_cp_ready;                                     // router:sink_ready -> mm_bridge_master_m0_agent:cp_ready
	wire          mm_bridge_s0_s0_agent_rp_endofpacket;                                   // mm_bridge_s0_s0_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire          mm_bridge_s0_s0_agent_rp_valid;                                         // mm_bridge_s0_s0_agent:rp_valid -> router_001:sink_valid
	wire          mm_bridge_s0_s0_agent_rp_startofpacket;                                 // mm_bridge_s0_s0_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire  [108:0] mm_bridge_s0_s0_agent_rp_data;                                          // mm_bridge_s0_s0_agent:rp_data -> router_001:sink_data
	wire          mm_bridge_s0_s0_agent_rp_ready;                                         // router_001:sink_ready -> mm_bridge_s0_s0_agent:rp_ready
	wire          router_001_src_endofpacket;                                             // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_001_src_valid;                                                   // router_001:src_valid -> rsp_demux:sink_valid
	wire          router_001_src_startofpacket;                                           // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [108:0] router_001_src_data;                                                    // router_001:src_data -> rsp_demux:sink_data
	wire    [6:0] router_001_src_channel;                                                 // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_ready;                                                   // rsp_demux:sink_ready -> router_001:src_ready
	wire          mm_bridge_s1_s0_agent_rp_endofpacket;                                   // mm_bridge_s1_s0_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire          mm_bridge_s1_s0_agent_rp_valid;                                         // mm_bridge_s1_s0_agent:rp_valid -> router_002:sink_valid
	wire          mm_bridge_s1_s0_agent_rp_startofpacket;                                 // mm_bridge_s1_s0_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [108:0] mm_bridge_s1_s0_agent_rp_data;                                          // mm_bridge_s1_s0_agent:rp_data -> router_002:sink_data
	wire          mm_bridge_s1_s0_agent_rp_ready;                                         // router_002:sink_ready -> mm_bridge_s1_s0_agent:rp_ready
	wire          router_002_src_endofpacket;                                             // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_002_src_valid;                                                   // router_002:src_valid -> rsp_demux_001:sink_valid
	wire          router_002_src_startofpacket;                                           // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [108:0] router_002_src_data;                                                    // router_002:src_data -> rsp_demux_001:sink_data
	wire    [6:0] router_002_src_channel;                                                 // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_ready;                                                   // rsp_demux_001:sink_ready -> router_002:src_ready
	wire          mm_bridge_s2_s0_agent_rp_endofpacket;                                   // mm_bridge_s2_s0_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire          mm_bridge_s2_s0_agent_rp_valid;                                         // mm_bridge_s2_s0_agent:rp_valid -> router_003:sink_valid
	wire          mm_bridge_s2_s0_agent_rp_startofpacket;                                 // mm_bridge_s2_s0_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [108:0] mm_bridge_s2_s0_agent_rp_data;                                          // mm_bridge_s2_s0_agent:rp_data -> router_003:sink_data
	wire          mm_bridge_s2_s0_agent_rp_ready;                                         // router_003:sink_ready -> mm_bridge_s2_s0_agent:rp_ready
	wire          router_003_src_endofpacket;                                             // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_003_src_valid;                                                   // router_003:src_valid -> rsp_demux_002:sink_valid
	wire          router_003_src_startofpacket;                                           // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [108:0] router_003_src_data;                                                    // router_003:src_data -> rsp_demux_002:sink_data
	wire    [6:0] router_003_src_channel;                                                 // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_ready;                                                   // rsp_demux_002:sink_ready -> router_003:src_ready
	wire          mm_bridge_s3_s0_agent_rp_endofpacket;                                   // mm_bridge_s3_s0_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire          mm_bridge_s3_s0_agent_rp_valid;                                         // mm_bridge_s3_s0_agent:rp_valid -> router_004:sink_valid
	wire          mm_bridge_s3_s0_agent_rp_startofpacket;                                 // mm_bridge_s3_s0_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [108:0] mm_bridge_s3_s0_agent_rp_data;                                          // mm_bridge_s3_s0_agent:rp_data -> router_004:sink_data
	wire          mm_bridge_s3_s0_agent_rp_ready;                                         // router_004:sink_ready -> mm_bridge_s3_s0_agent:rp_ready
	wire          router_004_src_endofpacket;                                             // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_004_src_valid;                                                   // router_004:src_valid -> rsp_demux_003:sink_valid
	wire          router_004_src_startofpacket;                                           // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [108:0] router_004_src_data;                                                    // router_004:src_data -> rsp_demux_003:sink_data
	wire    [6:0] router_004_src_channel;                                                 // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_ready;                                                   // rsp_demux_003:sink_ready -> router_004:src_ready
	wire          mm_bridge_s4_s0_agent_rp_endofpacket;                                   // mm_bridge_s4_s0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          mm_bridge_s4_s0_agent_rp_valid;                                         // mm_bridge_s4_s0_agent:rp_valid -> router_005:sink_valid
	wire          mm_bridge_s4_s0_agent_rp_startofpacket;                                 // mm_bridge_s4_s0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [108:0] mm_bridge_s4_s0_agent_rp_data;                                          // mm_bridge_s4_s0_agent:rp_data -> router_005:sink_data
	wire          mm_bridge_s4_s0_agent_rp_ready;                                         // router_005:sink_ready -> mm_bridge_s4_s0_agent:rp_ready
	wire          router_005_src_endofpacket;                                             // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_005_src_valid;                                                   // router_005:src_valid -> rsp_demux_004:sink_valid
	wire          router_005_src_startofpacket;                                           // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [108:0] router_005_src_data;                                                    // router_005:src_data -> rsp_demux_004:sink_data
	wire    [6:0] router_005_src_channel;                                                 // router_005:src_channel -> rsp_demux_004:sink_channel
	wire          router_005_src_ready;                                                   // rsp_demux_004:sink_ready -> router_005:src_ready
	wire          mm_bridge_s5_s0_agent_rp_endofpacket;                                   // mm_bridge_s5_s0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          mm_bridge_s5_s0_agent_rp_valid;                                         // mm_bridge_s5_s0_agent:rp_valid -> router_006:sink_valid
	wire          mm_bridge_s5_s0_agent_rp_startofpacket;                                 // mm_bridge_s5_s0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [108:0] mm_bridge_s5_s0_agent_rp_data;                                          // mm_bridge_s5_s0_agent:rp_data -> router_006:sink_data
	wire          mm_bridge_s5_s0_agent_rp_ready;                                         // router_006:sink_ready -> mm_bridge_s5_s0_agent:rp_ready
	wire          router_006_src_endofpacket;                                             // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          router_006_src_valid;                                                   // router_006:src_valid -> rsp_demux_005:sink_valid
	wire          router_006_src_startofpacket;                                           // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [108:0] router_006_src_data;                                                    // router_006:src_data -> rsp_demux_005:sink_data
	wire    [6:0] router_006_src_channel;                                                 // router_006:src_channel -> rsp_demux_005:sink_channel
	wire          router_006_src_ready;                                                   // rsp_demux_005:sink_ready -> router_006:src_ready
	wire          mm_bridge_s6_s0_agent_rp_endofpacket;                                   // mm_bridge_s6_s0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          mm_bridge_s6_s0_agent_rp_valid;                                         // mm_bridge_s6_s0_agent:rp_valid -> router_007:sink_valid
	wire          mm_bridge_s6_s0_agent_rp_startofpacket;                                 // mm_bridge_s6_s0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [108:0] mm_bridge_s6_s0_agent_rp_data;                                          // mm_bridge_s6_s0_agent:rp_data -> router_007:sink_data
	wire          mm_bridge_s6_s0_agent_rp_ready;                                         // router_007:sink_ready -> mm_bridge_s6_s0_agent:rp_ready
	wire          router_007_src_endofpacket;                                             // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_007_src_valid;                                                   // router_007:src_valid -> rsp_demux_006:sink_valid
	wire          router_007_src_startofpacket;                                           // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [108:0] router_007_src_data;                                                    // router_007:src_data -> rsp_demux_006:sink_data
	wire    [6:0] router_007_src_channel;                                                 // router_007:src_channel -> rsp_demux_006:sink_channel
	wire          router_007_src_ready;                                                   // rsp_demux_006:sink_ready -> router_007:src_ready
	wire          router_src_endofpacket;                                                 // router:src_endofpacket -> mm_bridge_master_m0_limiter:cmd_sink_endofpacket
	wire          router_src_valid;                                                       // router:src_valid -> mm_bridge_master_m0_limiter:cmd_sink_valid
	wire          router_src_startofpacket;                                               // router:src_startofpacket -> mm_bridge_master_m0_limiter:cmd_sink_startofpacket
	wire  [108:0] router_src_data;                                                        // router:src_data -> mm_bridge_master_m0_limiter:cmd_sink_data
	wire    [6:0] router_src_channel;                                                     // router:src_channel -> mm_bridge_master_m0_limiter:cmd_sink_channel
	wire          router_src_ready;                                                       // mm_bridge_master_m0_limiter:cmd_sink_ready -> router:src_ready
	wire          mm_bridge_master_m0_limiter_cmd_src_endofpacket;                        // mm_bridge_master_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire          mm_bridge_master_m0_limiter_cmd_src_startofpacket;                      // mm_bridge_master_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [108:0] mm_bridge_master_m0_limiter_cmd_src_data;                               // mm_bridge_master_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire    [6:0] mm_bridge_master_m0_limiter_cmd_src_channel;                            // mm_bridge_master_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire          mm_bridge_master_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> mm_bridge_master_m0_limiter:cmd_src_ready
	wire          rsp_mux_src_endofpacket;                                                // rsp_mux:src_endofpacket -> mm_bridge_master_m0_limiter:rsp_sink_endofpacket
	wire          rsp_mux_src_valid;                                                      // rsp_mux:src_valid -> mm_bridge_master_m0_limiter:rsp_sink_valid
	wire          rsp_mux_src_startofpacket;                                              // rsp_mux:src_startofpacket -> mm_bridge_master_m0_limiter:rsp_sink_startofpacket
	wire  [108:0] rsp_mux_src_data;                                                       // rsp_mux:src_data -> mm_bridge_master_m0_limiter:rsp_sink_data
	wire    [6:0] rsp_mux_src_channel;                                                    // rsp_mux:src_channel -> mm_bridge_master_m0_limiter:rsp_sink_channel
	wire          rsp_mux_src_ready;                                                      // mm_bridge_master_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire          mm_bridge_master_m0_limiter_rsp_src_endofpacket;                        // mm_bridge_master_m0_limiter:rsp_src_endofpacket -> mm_bridge_master_m0_agent:rp_endofpacket
	wire          mm_bridge_master_m0_limiter_rsp_src_valid;                              // mm_bridge_master_m0_limiter:rsp_src_valid -> mm_bridge_master_m0_agent:rp_valid
	wire          mm_bridge_master_m0_limiter_rsp_src_startofpacket;                      // mm_bridge_master_m0_limiter:rsp_src_startofpacket -> mm_bridge_master_m0_agent:rp_startofpacket
	wire  [108:0] mm_bridge_master_m0_limiter_rsp_src_data;                               // mm_bridge_master_m0_limiter:rsp_src_data -> mm_bridge_master_m0_agent:rp_data
	wire    [6:0] mm_bridge_master_m0_limiter_rsp_src_channel;                            // mm_bridge_master_m0_limiter:rsp_src_channel -> mm_bridge_master_m0_agent:rp_channel
	wire          mm_bridge_master_m0_limiter_rsp_src_ready;                              // mm_bridge_master_m0_agent:rp_ready -> mm_bridge_master_m0_limiter:rsp_src_ready
	wire          cmd_demux_src0_endofpacket;                                             // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src0_valid;                                                   // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire          cmd_demux_src0_startofpacket;                                           // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [108:0] cmd_demux_src0_data;                                                    // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire    [6:0] cmd_demux_src0_channel;                                                 // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_ready;                                                   // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire          cmd_demux_src1_endofpacket;                                             // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                   // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire          cmd_demux_src1_startofpacket;                                           // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [108:0] cmd_demux_src1_data;                                                    // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire    [6:0] cmd_demux_src1_channel;                                                 // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_ready;                                                   // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire          cmd_demux_src2_endofpacket;                                             // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                   // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire          cmd_demux_src2_startofpacket;                                           // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [108:0] cmd_demux_src2_data;                                                    // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire    [6:0] cmd_demux_src2_channel;                                                 // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_ready;                                                   // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire          cmd_demux_src3_endofpacket;                                             // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                   // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire          cmd_demux_src3_startofpacket;                                           // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [108:0] cmd_demux_src3_data;                                                    // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire    [6:0] cmd_demux_src3_channel;                                                 // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_ready;                                                   // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire          cmd_demux_src4_endofpacket;                                             // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                   // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire          cmd_demux_src4_startofpacket;                                           // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [108:0] cmd_demux_src4_data;                                                    // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire    [6:0] cmd_demux_src4_channel;                                                 // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_ready;                                                   // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire          cmd_demux_src5_endofpacket;                                             // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                   // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire          cmd_demux_src5_startofpacket;                                           // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [108:0] cmd_demux_src5_data;                                                    // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire    [6:0] cmd_demux_src5_channel;                                                 // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_ready;                                                   // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire          cmd_demux_src6_endofpacket;                                             // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                   // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire          cmd_demux_src6_startofpacket;                                           // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [108:0] cmd_demux_src6_data;                                                    // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire    [6:0] cmd_demux_src6_channel;                                                 // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_ready;                                                   // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire          rsp_demux_src0_endofpacket;                                             // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                   // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire          rsp_demux_src0_startofpacket;                                           // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [108:0] rsp_demux_src0_data;                                                    // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire    [6:0] rsp_demux_src0_channel;                                                 // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_ready;                                                   // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire          rsp_demux_001_src0_endofpacket;                                         // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src0_valid;                                               // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire          rsp_demux_001_src0_startofpacket;                                       // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [108:0] rsp_demux_001_src0_data;                                                // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire    [6:0] rsp_demux_001_src0_channel;                                             // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_ready;                                               // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire          rsp_demux_002_src0_endofpacket;                                         // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_002_src0_valid;                                               // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire          rsp_demux_002_src0_startofpacket;                                       // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire  [108:0] rsp_demux_002_src0_data;                                                // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire    [6:0] rsp_demux_002_src0_channel;                                             // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_ready;                                               // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire          rsp_demux_003_src0_endofpacket;                                         // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_003_src0_valid;                                               // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire          rsp_demux_003_src0_startofpacket;                                       // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire  [108:0] rsp_demux_003_src0_data;                                                // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire    [6:0] rsp_demux_003_src0_channel;                                             // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_ready;                                               // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire          rsp_demux_004_src0_endofpacket;                                         // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_004_src0_valid;                                               // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire          rsp_demux_004_src0_startofpacket;                                       // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire  [108:0] rsp_demux_004_src0_data;                                                // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire    [6:0] rsp_demux_004_src0_channel;                                             // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_ready;                                               // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire          rsp_demux_005_src0_endofpacket;                                         // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src0_valid;                                               // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire          rsp_demux_005_src0_startofpacket;                                       // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire  [108:0] rsp_demux_005_src0_data;                                                // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire    [6:0] rsp_demux_005_src0_channel;                                             // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_ready;                                               // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire          rsp_demux_006_src0_endofpacket;                                         // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_006_src0_valid;                                               // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire          rsp_demux_006_src0_startofpacket;                                       // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire  [108:0] rsp_demux_006_src0_data;                                                // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire    [6:0] rsp_demux_006_src0_channel;                                             // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_ready;                                               // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire    [6:0] mm_bridge_master_m0_limiter_cmd_valid_data;                             // mm_bridge_master_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_master_m0_translator (
		.clk                      (clk_clk_clk),                                                            //                       clk.clk
		.reset                    (mm_bridge_master_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address              (mm_bridge_master_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (mm_bridge_master_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (mm_bridge_master_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (mm_bridge_master_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (mm_bridge_master_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (mm_bridge_master_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (mm_bridge_master_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (mm_bridge_master_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (mm_bridge_master_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (mm_bridge_master_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (mm_bridge_master_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (mm_bridge_master_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (mm_bridge_master_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount            (mm_bridge_master_m0_burstcount),                                         //                          .burstcount
		.av_byteenable            (mm_bridge_master_m0_byteenable),                                         //                          .byteenable
		.av_read                  (mm_bridge_master_m0_read),                                               //                          .read
		.av_readdata              (mm_bridge_master_m0_readdata),                                           //                          .readdata
		.av_readdatavalid         (mm_bridge_master_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (mm_bridge_master_m0_write),                                              //                          .write
		.av_writedata             (mm_bridge_master_m0_writedata),                                          //                          .writedata
		.av_debugaccess           (mm_bridge_master_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer    (1'b0),                                                                   //               (terminated)
		.av_begintransfer         (1'b0),                                                                   //               (terminated)
		.av_chipselect            (1'b0),                                                                   //               (terminated)
		.av_lock                  (1'b0),                                                                   //               (terminated)
		.uav_clken                (),                                                                       //               (terminated)
		.av_clken                 (1'b1),                                                                   //               (terminated)
		.uav_response             (2'b00),                                                                  //               (terminated)
		.av_response              (),                                                                       //               (terminated)
		.uav_writeresponserequest (),                                                                       //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                   //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                   //               (terminated)
		.av_writeresponsevalid    ()                                                                        //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_s0_s0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (mm_bridge_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_bridge_s0_s0_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_s0_s0_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (mm_bridge_s0_s0_agent_m0_read),                      //                         .read
		.uav_write                (mm_bridge_s0_s0_agent_m0_write),                     //                         .write
		.uav_waitrequest          (mm_bridge_s0_s0_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_s0_s0_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (mm_bridge_s0_s0_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (mm_bridge_s0_s0_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (mm_bridge_s0_s0_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (mm_bridge_s0_s0_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (mm_bridge_s0_s0_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (mm_bridge_s0_s0_address),                            //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_s0_s0_write),                              //                         .write
		.av_read                  (mm_bridge_s0_s0_read),                               //                         .read
		.av_readdata              (mm_bridge_s0_s0_readdata),                           //                         .readdata
		.av_writedata             (mm_bridge_s0_s0_writedata),                          //                         .writedata
		.av_burstcount            (mm_bridge_s0_s0_burstcount),                         //                         .burstcount
		.av_byteenable            (mm_bridge_s0_s0_byteenable),                         //                         .byteenable
		.av_readdatavalid         (mm_bridge_s0_s0_readdatavalid),                      //                         .readdatavalid
		.av_waitrequest           (mm_bridge_s0_s0_waitrequest),                        //                         .waitrequest
		.av_debugaccess           (mm_bridge_s0_s0_debugaccess),                        //                         .debugaccess
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_chipselect            (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_s1_s0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (mm_bridge_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_bridge_s1_s0_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_s1_s0_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (mm_bridge_s1_s0_agent_m0_read),                      //                         .read
		.uav_write                (mm_bridge_s1_s0_agent_m0_write),                     //                         .write
		.uav_waitrequest          (mm_bridge_s1_s0_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_s1_s0_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (mm_bridge_s1_s0_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (mm_bridge_s1_s0_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (mm_bridge_s1_s0_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (mm_bridge_s1_s0_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (mm_bridge_s1_s0_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (mm_bridge_s1_s0_address),                            //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_s1_s0_write),                              //                         .write
		.av_read                  (mm_bridge_s1_s0_read),                               //                         .read
		.av_readdata              (mm_bridge_s1_s0_readdata),                           //                         .readdata
		.av_writedata             (mm_bridge_s1_s0_writedata),                          //                         .writedata
		.av_burstcount            (mm_bridge_s1_s0_burstcount),                         //                         .burstcount
		.av_byteenable            (mm_bridge_s1_s0_byteenable),                         //                         .byteenable
		.av_readdatavalid         (mm_bridge_s1_s0_readdatavalid),                      //                         .readdatavalid
		.av_waitrequest           (mm_bridge_s1_s0_waitrequest),                        //                         .waitrequest
		.av_debugaccess           (mm_bridge_s1_s0_debugaccess),                        //                         .debugaccess
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_chipselect            (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_s2_s0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (mm_bridge_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_bridge_s2_s0_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_s2_s0_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (mm_bridge_s2_s0_agent_m0_read),                      //                         .read
		.uav_write                (mm_bridge_s2_s0_agent_m0_write),                     //                         .write
		.uav_waitrequest          (mm_bridge_s2_s0_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_s2_s0_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (mm_bridge_s2_s0_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (mm_bridge_s2_s0_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (mm_bridge_s2_s0_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (mm_bridge_s2_s0_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (mm_bridge_s2_s0_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (mm_bridge_s2_s0_address),                            //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_s2_s0_write),                              //                         .write
		.av_read                  (mm_bridge_s2_s0_read),                               //                         .read
		.av_readdata              (mm_bridge_s2_s0_readdata),                           //                         .readdata
		.av_writedata             (mm_bridge_s2_s0_writedata),                          //                         .writedata
		.av_burstcount            (mm_bridge_s2_s0_burstcount),                         //                         .burstcount
		.av_byteenable            (mm_bridge_s2_s0_byteenable),                         //                         .byteenable
		.av_readdatavalid         (mm_bridge_s2_s0_readdatavalid),                      //                         .readdatavalid
		.av_waitrequest           (mm_bridge_s2_s0_waitrequest),                        //                         .waitrequest
		.av_debugaccess           (mm_bridge_s2_s0_debugaccess),                        //                         .debugaccess
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_chipselect            (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_s3_s0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (mm_bridge_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_bridge_s3_s0_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_s3_s0_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (mm_bridge_s3_s0_agent_m0_read),                      //                         .read
		.uav_write                (mm_bridge_s3_s0_agent_m0_write),                     //                         .write
		.uav_waitrequest          (mm_bridge_s3_s0_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_s3_s0_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (mm_bridge_s3_s0_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (mm_bridge_s3_s0_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (mm_bridge_s3_s0_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (mm_bridge_s3_s0_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (mm_bridge_s3_s0_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (mm_bridge_s3_s0_address),                            //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_s3_s0_write),                              //                         .write
		.av_read                  (mm_bridge_s3_s0_read),                               //                         .read
		.av_readdata              (mm_bridge_s3_s0_readdata),                           //                         .readdata
		.av_writedata             (mm_bridge_s3_s0_writedata),                          //                         .writedata
		.av_burstcount            (mm_bridge_s3_s0_burstcount),                         //                         .burstcount
		.av_byteenable            (mm_bridge_s3_s0_byteenable),                         //                         .byteenable
		.av_readdatavalid         (mm_bridge_s3_s0_readdatavalid),                      //                         .readdatavalid
		.av_waitrequest           (mm_bridge_s3_s0_waitrequest),                        //                         .waitrequest
		.av_debugaccess           (mm_bridge_s3_s0_debugaccess),                        //                         .debugaccess
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_chipselect            (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_s4_s0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (mm_bridge_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_bridge_s4_s0_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_s4_s0_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (mm_bridge_s4_s0_agent_m0_read),                      //                         .read
		.uav_write                (mm_bridge_s4_s0_agent_m0_write),                     //                         .write
		.uav_waitrequest          (mm_bridge_s4_s0_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_s4_s0_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (mm_bridge_s4_s0_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (mm_bridge_s4_s0_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (mm_bridge_s4_s0_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (mm_bridge_s4_s0_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (mm_bridge_s4_s0_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (mm_bridge_s4_s0_address),                            //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_s4_s0_write),                              //                         .write
		.av_read                  (mm_bridge_s4_s0_read),                               //                         .read
		.av_readdata              (mm_bridge_s4_s0_readdata),                           //                         .readdata
		.av_writedata             (mm_bridge_s4_s0_writedata),                          //                         .writedata
		.av_burstcount            (mm_bridge_s4_s0_burstcount),                         //                         .burstcount
		.av_byteenable            (mm_bridge_s4_s0_byteenable),                         //                         .byteenable
		.av_readdatavalid         (mm_bridge_s4_s0_readdatavalid),                      //                         .readdatavalid
		.av_waitrequest           (mm_bridge_s4_s0_waitrequest),                        //                         .waitrequest
		.av_debugaccess           (mm_bridge_s4_s0_debugaccess),                        //                         .debugaccess
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_chipselect            (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_s5_s0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (mm_bridge_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_bridge_s5_s0_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_s5_s0_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (mm_bridge_s5_s0_agent_m0_read),                      //                         .read
		.uav_write                (mm_bridge_s5_s0_agent_m0_write),                     //                         .write
		.uav_waitrequest          (mm_bridge_s5_s0_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_s5_s0_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (mm_bridge_s5_s0_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (mm_bridge_s5_s0_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (mm_bridge_s5_s0_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (mm_bridge_s5_s0_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (mm_bridge_s5_s0_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (mm_bridge_s5_s0_address),                            //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_s5_s0_write),                              //                         .write
		.av_read                  (mm_bridge_s5_s0_read),                               //                         .read
		.av_readdata              (mm_bridge_s5_s0_readdata),                           //                         .readdata
		.av_writedata             (mm_bridge_s5_s0_writedata),                          //                         .writedata
		.av_burstcount            (mm_bridge_s5_s0_burstcount),                         //                         .burstcount
		.av_byteenable            (mm_bridge_s5_s0_byteenable),                         //                         .byteenable
		.av_readdatavalid         (mm_bridge_s5_s0_readdatavalid),                      //                         .readdatavalid
		.av_waitrequest           (mm_bridge_s5_s0_waitrequest),                        //                         .waitrequest
		.av_debugaccess           (mm_bridge_s5_s0_debugaccess),                        //                         .debugaccess
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_chipselect            (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (18),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (4),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (6),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mm_bridge_s6_s0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (mm_bridge_master_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (mm_bridge_s6_s0_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount           (mm_bridge_s6_s0_agent_m0_burstcount),                //                         .burstcount
		.uav_read                 (mm_bridge_s6_s0_agent_m0_read),                      //                         .read
		.uav_write                (mm_bridge_s6_s0_agent_m0_write),                     //                         .write
		.uav_waitrequest          (mm_bridge_s6_s0_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid        (mm_bridge_s6_s0_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable           (mm_bridge_s6_s0_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata             (mm_bridge_s6_s0_agent_m0_readdata),                  //                         .readdata
		.uav_writedata            (mm_bridge_s6_s0_agent_m0_writedata),                 //                         .writedata
		.uav_lock                 (mm_bridge_s6_s0_agent_m0_lock),                      //                         .lock
		.uav_debugaccess          (mm_bridge_s6_s0_agent_m0_debugaccess),               //                         .debugaccess
		.av_address               (mm_bridge_s6_s0_address),                            //      avalon_anti_slave_0.address
		.av_write                 (mm_bridge_s6_s0_write),                              //                         .write
		.av_read                  (mm_bridge_s6_s0_read),                               //                         .read
		.av_readdata              (mm_bridge_s6_s0_readdata),                           //                         .readdata
		.av_writedata             (mm_bridge_s6_s0_writedata),                          //                         .writedata
		.av_burstcount            (mm_bridge_s6_s0_burstcount),                         //                         .burstcount
		.av_byteenable            (mm_bridge_s6_s0_byteenable),                         //                         .byteenable
		.av_readdatavalid         (mm_bridge_s6_s0_readdatavalid),                      //                         .readdatavalid
		.av_waitrequest           (mm_bridge_s6_s0_waitrequest),                        //                         .waitrequest
		.av_debugaccess           (mm_bridge_s6_s0_debugaccess),                        //                         .debugaccess
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_chipselect            (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_BEGIN_BURST           (88),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_BURST_TYPE_H          (85),
		.PKT_BURST_TYPE_L          (84),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_THREAD_ID_H           (96),
		.PKT_THREAD_ID_L           (96),
		.PKT_CACHE_H               (103),
		.PKT_CACHE_L               (100),
		.PKT_DATA_SIDEBAND_H       (87),
		.PKT_DATA_SIDEBAND_L       (87),
		.PKT_QOS_H                 (89),
		.PKT_QOS_L                 (89),
		.PKT_ADDR_SIDEBAND_H       (86),
		.PKT_ADDR_SIDEBAND_L       (86),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (7),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_master_m0_agent (
		.clk                     (clk_clk_clk),                                                            //       clk.clk
		.reset                   (mm_bridge_master_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address              (mm_bridge_master_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (mm_bridge_master_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (mm_bridge_master_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (mm_bridge_master_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (mm_bridge_master_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (mm_bridge_master_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (mm_bridge_master_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (mm_bridge_master_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (mm_bridge_master_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (mm_bridge_master_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (mm_bridge_master_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (mm_bridge_master_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (mm_bridge_master_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket        (mm_bridge_master_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (mm_bridge_master_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (mm_bridge_master_m0_agent_cp_ready),                                     //          .ready
		.rp_valid                (mm_bridge_master_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (mm_bridge_master_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel              (mm_bridge_master_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (mm_bridge_master_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (mm_bridge_master_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (mm_bridge_master_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                       // (terminated)
		.av_writeresponserequest (1'b0),                                                                   // (terminated)
		.av_writeresponsevalid   ()                                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (88),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_s0_s0_agent (
		.clk                     (clk_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_bridge_s0_s0_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mm_bridge_s0_s0_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mm_bridge_s0_s0_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mm_bridge_s0_s0_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mm_bridge_s0_s0_agent_m0_lock),                      //                .lock
		.m0_readdata             (mm_bridge_s0_s0_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mm_bridge_s0_s0_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mm_bridge_s0_s0_agent_m0_read),                      //                .read
		.m0_waitrequest          (mm_bridge_s0_s0_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mm_bridge_s0_s0_agent_m0_writedata),                 //                .writedata
		.m0_write                (mm_bridge_s0_s0_agent_m0_write),                     //                .write
		.rp_endofpacket          (mm_bridge_s0_s0_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mm_bridge_s0_s0_agent_rp_ready),                     //                .ready
		.rp_valid                (mm_bridge_s0_s0_agent_rp_valid),                     //                .valid
		.rp_data                 (mm_bridge_s0_s0_agent_rp_data),                      //                .data
		.rp_startofpacket        (mm_bridge_s0_s0_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                //                .channel
		.rf_sink_ready           (mm_bridge_s0_s0_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_s0_s0_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mm_bridge_s0_s0_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_s0_s0_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mm_bridge_s0_s0_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mm_bridge_s0_s0_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mm_bridge_s0_s0_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mm_bridge_s0_s0_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_s0_s0_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mm_bridge_s0_s0_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (mm_bridge_s0_s0_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_s0_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (mm_bridge_s0_s0_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (mm_bridge_s0_s0_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_s0_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mm_bridge_s0_s0_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_s0_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                        //       clk.clk
		.reset             (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_s0_s0_agent_rf_source_data),               //        in.data
		.in_valid          (mm_bridge_s0_s0_agent_rf_source_valid),              //          .valid
		.in_ready          (mm_bridge_s0_s0_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mm_bridge_s0_s0_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mm_bridge_s0_s0_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mm_bridge_s0_s0_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mm_bridge_s0_s0_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mm_bridge_s0_s0_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mm_bridge_s0_s0_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mm_bridge_s0_s0_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (88),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_s1_s0_agent (
		.clk                     (clk_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_bridge_s1_s0_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mm_bridge_s1_s0_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mm_bridge_s1_s0_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mm_bridge_s1_s0_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mm_bridge_s1_s0_agent_m0_lock),                      //                .lock
		.m0_readdata             (mm_bridge_s1_s0_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mm_bridge_s1_s0_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mm_bridge_s1_s0_agent_m0_read),                      //                .read
		.m0_waitrequest          (mm_bridge_s1_s0_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mm_bridge_s1_s0_agent_m0_writedata),                 //                .writedata
		.m0_write                (mm_bridge_s1_s0_agent_m0_write),                     //                .write
		.rp_endofpacket          (mm_bridge_s1_s0_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mm_bridge_s1_s0_agent_rp_ready),                     //                .ready
		.rp_valid                (mm_bridge_s1_s0_agent_rp_valid),                     //                .valid
		.rp_data                 (mm_bridge_s1_s0_agent_rp_data),                      //                .data
		.rp_startofpacket        (mm_bridge_s1_s0_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_001_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                            //                .channel
		.rf_sink_ready           (mm_bridge_s1_s0_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_s1_s0_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mm_bridge_s1_s0_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_s1_s0_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mm_bridge_s1_s0_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mm_bridge_s1_s0_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mm_bridge_s1_s0_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mm_bridge_s1_s0_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_s1_s0_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mm_bridge_s1_s0_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (mm_bridge_s1_s0_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_s1_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (mm_bridge_s1_s0_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (mm_bridge_s1_s0_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_s1_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mm_bridge_s1_s0_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_s1_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                        //       clk.clk
		.reset             (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_s1_s0_agent_rf_source_data),               //        in.data
		.in_valid          (mm_bridge_s1_s0_agent_rf_source_valid),              //          .valid
		.in_ready          (mm_bridge_s1_s0_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mm_bridge_s1_s0_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mm_bridge_s1_s0_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mm_bridge_s1_s0_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mm_bridge_s1_s0_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mm_bridge_s1_s0_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mm_bridge_s1_s0_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mm_bridge_s1_s0_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (88),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_s2_s0_agent (
		.clk                     (clk_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_bridge_s2_s0_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mm_bridge_s2_s0_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mm_bridge_s2_s0_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mm_bridge_s2_s0_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mm_bridge_s2_s0_agent_m0_lock),                      //                .lock
		.m0_readdata             (mm_bridge_s2_s0_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mm_bridge_s2_s0_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mm_bridge_s2_s0_agent_m0_read),                      //                .read
		.m0_waitrequest          (mm_bridge_s2_s0_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mm_bridge_s2_s0_agent_m0_writedata),                 //                .writedata
		.m0_write                (mm_bridge_s2_s0_agent_m0_write),                     //                .write
		.rp_endofpacket          (mm_bridge_s2_s0_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mm_bridge_s2_s0_agent_rp_ready),                     //                .ready
		.rp_valid                (mm_bridge_s2_s0_agent_rp_valid),                     //                .valid
		.rp_data                 (mm_bridge_s2_s0_agent_rp_data),                      //                .data
		.rp_startofpacket        (mm_bridge_s2_s0_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_002_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                            //                .channel
		.rf_sink_ready           (mm_bridge_s2_s0_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_s2_s0_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mm_bridge_s2_s0_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_s2_s0_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mm_bridge_s2_s0_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mm_bridge_s2_s0_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mm_bridge_s2_s0_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mm_bridge_s2_s0_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_s2_s0_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mm_bridge_s2_s0_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (mm_bridge_s2_s0_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_s2_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (mm_bridge_s2_s0_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (mm_bridge_s2_s0_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_s2_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mm_bridge_s2_s0_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_s2_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                        //       clk.clk
		.reset             (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_s2_s0_agent_rf_source_data),               //        in.data
		.in_valid          (mm_bridge_s2_s0_agent_rf_source_valid),              //          .valid
		.in_ready          (mm_bridge_s2_s0_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mm_bridge_s2_s0_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mm_bridge_s2_s0_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mm_bridge_s2_s0_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mm_bridge_s2_s0_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mm_bridge_s2_s0_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mm_bridge_s2_s0_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mm_bridge_s2_s0_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (88),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_s3_s0_agent (
		.clk                     (clk_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_bridge_s3_s0_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mm_bridge_s3_s0_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mm_bridge_s3_s0_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mm_bridge_s3_s0_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mm_bridge_s3_s0_agent_m0_lock),                      //                .lock
		.m0_readdata             (mm_bridge_s3_s0_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mm_bridge_s3_s0_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mm_bridge_s3_s0_agent_m0_read),                      //                .read
		.m0_waitrequest          (mm_bridge_s3_s0_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mm_bridge_s3_s0_agent_m0_writedata),                 //                .writedata
		.m0_write                (mm_bridge_s3_s0_agent_m0_write),                     //                .write
		.rp_endofpacket          (mm_bridge_s3_s0_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mm_bridge_s3_s0_agent_rp_ready),                     //                .ready
		.rp_valid                (mm_bridge_s3_s0_agent_rp_valid),                     //                .valid
		.rp_data                 (mm_bridge_s3_s0_agent_rp_data),                      //                .data
		.rp_startofpacket        (mm_bridge_s3_s0_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_003_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                            //                .channel
		.rf_sink_ready           (mm_bridge_s3_s0_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_s3_s0_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mm_bridge_s3_s0_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_s3_s0_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mm_bridge_s3_s0_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mm_bridge_s3_s0_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mm_bridge_s3_s0_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mm_bridge_s3_s0_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_s3_s0_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mm_bridge_s3_s0_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (mm_bridge_s3_s0_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_s3_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (mm_bridge_s3_s0_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (mm_bridge_s3_s0_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_s3_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mm_bridge_s3_s0_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_s3_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                        //       clk.clk
		.reset             (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_s3_s0_agent_rf_source_data),               //        in.data
		.in_valid          (mm_bridge_s3_s0_agent_rf_source_valid),              //          .valid
		.in_ready          (mm_bridge_s3_s0_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mm_bridge_s3_s0_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mm_bridge_s3_s0_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mm_bridge_s3_s0_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mm_bridge_s3_s0_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mm_bridge_s3_s0_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mm_bridge_s3_s0_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mm_bridge_s3_s0_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (88),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_s4_s0_agent (
		.clk                     (clk_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_bridge_s4_s0_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mm_bridge_s4_s0_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mm_bridge_s4_s0_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mm_bridge_s4_s0_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mm_bridge_s4_s0_agent_m0_lock),                      //                .lock
		.m0_readdata             (mm_bridge_s4_s0_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mm_bridge_s4_s0_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mm_bridge_s4_s0_agent_m0_read),                      //                .read
		.m0_waitrequest          (mm_bridge_s4_s0_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mm_bridge_s4_s0_agent_m0_writedata),                 //                .writedata
		.m0_write                (mm_bridge_s4_s0_agent_m0_write),                     //                .write
		.rp_endofpacket          (mm_bridge_s4_s0_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mm_bridge_s4_s0_agent_rp_ready),                     //                .ready
		.rp_valid                (mm_bridge_s4_s0_agent_rp_valid),                     //                .valid
		.rp_data                 (mm_bridge_s4_s0_agent_rp_data),                      //                .data
		.rp_startofpacket        (mm_bridge_s4_s0_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_004_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                            //                .channel
		.rf_sink_ready           (mm_bridge_s4_s0_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_s4_s0_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mm_bridge_s4_s0_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_s4_s0_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mm_bridge_s4_s0_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mm_bridge_s4_s0_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mm_bridge_s4_s0_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mm_bridge_s4_s0_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_s4_s0_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mm_bridge_s4_s0_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (mm_bridge_s4_s0_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_s4_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (mm_bridge_s4_s0_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (mm_bridge_s4_s0_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_s4_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mm_bridge_s4_s0_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_s4_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                        //       clk.clk
		.reset             (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_s4_s0_agent_rf_source_data),               //        in.data
		.in_valid          (mm_bridge_s4_s0_agent_rf_source_valid),              //          .valid
		.in_ready          (mm_bridge_s4_s0_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mm_bridge_s4_s0_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mm_bridge_s4_s0_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mm_bridge_s4_s0_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mm_bridge_s4_s0_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mm_bridge_s4_s0_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mm_bridge_s4_s0_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mm_bridge_s4_s0_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (88),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_s5_s0_agent (
		.clk                     (clk_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_bridge_s5_s0_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mm_bridge_s5_s0_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mm_bridge_s5_s0_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mm_bridge_s5_s0_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mm_bridge_s5_s0_agent_m0_lock),                      //                .lock
		.m0_readdata             (mm_bridge_s5_s0_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mm_bridge_s5_s0_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mm_bridge_s5_s0_agent_m0_read),                      //                .read
		.m0_waitrequest          (mm_bridge_s5_s0_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mm_bridge_s5_s0_agent_m0_writedata),                 //                .writedata
		.m0_write                (mm_bridge_s5_s0_agent_m0_write),                     //                .write
		.rp_endofpacket          (mm_bridge_s5_s0_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mm_bridge_s5_s0_agent_rp_ready),                     //                .ready
		.rp_valid                (mm_bridge_s5_s0_agent_rp_valid),                     //                .valid
		.rp_data                 (mm_bridge_s5_s0_agent_rp_data),                      //                .data
		.rp_startofpacket        (mm_bridge_s5_s0_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_005_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                            //                .channel
		.rf_sink_ready           (mm_bridge_s5_s0_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_s5_s0_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mm_bridge_s5_s0_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_s5_s0_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mm_bridge_s5_s0_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mm_bridge_s5_s0_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mm_bridge_s5_s0_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mm_bridge_s5_s0_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_s5_s0_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mm_bridge_s5_s0_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (mm_bridge_s5_s0_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_s5_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (mm_bridge_s5_s0_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (mm_bridge_s5_s0_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_s5_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mm_bridge_s5_s0_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_s5_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                        //       clk.clk
		.reset             (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_s5_s0_agent_rf_source_data),               //        in.data
		.in_valid          (mm_bridge_s5_s0_agent_rf_source_valid),              //          .valid
		.in_ready          (mm_bridge_s5_s0_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mm_bridge_s5_s0_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mm_bridge_s5_s0_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mm_bridge_s5_s0_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mm_bridge_s5_s0_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mm_bridge_s5_s0_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mm_bridge_s5_s0_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mm_bridge_s5_s0_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (88),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_TRANS_LOCK            (72),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_BURSTWRAP_H           (80),
		.PKT_BURSTWRAP_L           (80),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_PROTECTION_H          (99),
		.PKT_PROTECTION_L          (97),
		.PKT_RESPONSE_STATUS_H     (105),
		.PKT_RESPONSE_STATUS_L     (104),
		.PKT_BURST_SIZE_H          (83),
		.PKT_BURST_SIZE_L          (81),
		.PKT_ORI_BURST_SIZE_L      (106),
		.PKT_ORI_BURST_SIZE_H      (108),
		.ST_CHANNEL_W              (7),
		.ST_DATA_W                 (109),
		.AVS_BURSTCOUNT_W          (6),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_s6_s0_agent (
		.clk                     (clk_clk_clk),                                        //             clk.clk
		.reset                   (mm_bridge_master_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (mm_bridge_s6_s0_agent_m0_address),                   //              m0.address
		.m0_burstcount           (mm_bridge_s6_s0_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (mm_bridge_s6_s0_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (mm_bridge_s6_s0_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (mm_bridge_s6_s0_agent_m0_lock),                      //                .lock
		.m0_readdata             (mm_bridge_s6_s0_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (mm_bridge_s6_s0_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (mm_bridge_s6_s0_agent_m0_read),                      //                .read
		.m0_waitrequest          (mm_bridge_s6_s0_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (mm_bridge_s6_s0_agent_m0_writedata),                 //                .writedata
		.m0_write                (mm_bridge_s6_s0_agent_m0_write),                     //                .write
		.rp_endofpacket          (mm_bridge_s6_s0_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (mm_bridge_s6_s0_agent_rp_ready),                     //                .ready
		.rp_valid                (mm_bridge_s6_s0_agent_rp_valid),                     //                .valid
		.rp_data                 (mm_bridge_s6_s0_agent_rp_data),                      //                .data
		.rp_startofpacket        (mm_bridge_s6_s0_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_006_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                            //                .channel
		.rf_sink_ready           (mm_bridge_s6_s0_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (mm_bridge_s6_s0_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (mm_bridge_s6_s0_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (mm_bridge_s6_s0_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (mm_bridge_s6_s0_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (mm_bridge_s6_s0_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (mm_bridge_s6_s0_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (mm_bridge_s6_s0_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (mm_bridge_s6_s0_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (mm_bridge_s6_s0_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (mm_bridge_s6_s0_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (mm_bridge_s6_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (mm_bridge_s6_s0_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (mm_bridge_s6_s0_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mm_bridge_s6_s0_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (mm_bridge_s6_s0_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponserequest (),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (110),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mm_bridge_s6_s0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                        //       clk.clk
		.reset             (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (mm_bridge_s6_s0_agent_rf_source_data),               //        in.data
		.in_valid          (mm_bridge_s6_s0_agent_rf_source_valid),              //          .valid
		.in_ready          (mm_bridge_s6_s0_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (mm_bridge_s6_s0_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (mm_bridge_s6_s0_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (mm_bridge_s6_s0_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (mm_bridge_s6_s0_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (mm_bridge_s6_s0_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (mm_bridge_s6_s0_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (mm_bridge_s6_s0_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	jtag_system_mm_interconnect_1_router router (
		.sink_ready         (mm_bridge_master_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (mm_bridge_master_m0_agent_cp_valid),                 //          .valid
		.sink_data          (mm_bridge_master_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (mm_bridge_master_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (mm_bridge_master_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                   //       src.ready
		.src_valid          (router_src_valid),                                   //          .valid
		.src_data           (router_src_data),                                    //          .data
		.src_channel        (router_src_channel),                                 //          .channel
		.src_startofpacket  (router_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                              //          .endofpacket
	);

	jtag_system_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (mm_bridge_s0_s0_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mm_bridge_s0_s0_agent_rp_valid),                     //          .valid
		.sink_data          (mm_bridge_s0_s0_agent_rp_data),                      //          .data
		.sink_startofpacket (mm_bridge_s0_s0_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_bridge_s0_s0_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                               //       src.ready
		.src_valid          (router_001_src_valid),                               //          .valid
		.src_data           (router_001_src_data),                                //          .data
		.src_channel        (router_001_src_channel),                             //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (mm_bridge_s1_s0_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mm_bridge_s1_s0_agent_rp_valid),                     //          .valid
		.sink_data          (mm_bridge_s1_s0_agent_rp_data),                      //          .data
		.sink_startofpacket (mm_bridge_s1_s0_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_bridge_s1_s0_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                               //       src.ready
		.src_valid          (router_002_src_valid),                               //          .valid
		.src_data           (router_002_src_data),                                //          .data
		.src_channel        (router_002_src_channel),                             //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (mm_bridge_s2_s0_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mm_bridge_s2_s0_agent_rp_valid),                     //          .valid
		.sink_data          (mm_bridge_s2_s0_agent_rp_data),                      //          .data
		.sink_startofpacket (mm_bridge_s2_s0_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_bridge_s2_s0_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                               //       src.ready
		.src_valid          (router_003_src_valid),                               //          .valid
		.src_data           (router_003_src_data),                                //          .data
		.src_channel        (router_003_src_channel),                             //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (mm_bridge_s3_s0_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mm_bridge_s3_s0_agent_rp_valid),                     //          .valid
		.sink_data          (mm_bridge_s3_s0_agent_rp_data),                      //          .data
		.sink_startofpacket (mm_bridge_s3_s0_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_bridge_s3_s0_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                               //       src.ready
		.src_valid          (router_004_src_valid),                               //          .valid
		.src_data           (router_004_src_data),                                //          .data
		.src_channel        (router_004_src_channel),                             //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (mm_bridge_s4_s0_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mm_bridge_s4_s0_agent_rp_valid),                     //          .valid
		.sink_data          (mm_bridge_s4_s0_agent_rp_data),                      //          .data
		.sink_startofpacket (mm_bridge_s4_s0_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_bridge_s4_s0_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                               //       src.ready
		.src_valid          (router_005_src_valid),                               //          .valid
		.src_data           (router_005_src_data),                                //          .data
		.src_channel        (router_005_src_channel),                             //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (mm_bridge_s5_s0_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mm_bridge_s5_s0_agent_rp_valid),                     //          .valid
		.sink_data          (mm_bridge_s5_s0_agent_rp_data),                      //          .data
		.sink_startofpacket (mm_bridge_s5_s0_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_bridge_s5_s0_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                               //       src.ready
		.src_valid          (router_006_src_valid),                               //          .valid
		.src_data           (router_006_src_data),                                //          .data
		.src_channel        (router_006_src_channel),                             //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_router_001 router_007 (
		.sink_ready         (mm_bridge_s6_s0_agent_rp_ready),                     //      sink.ready
		.sink_valid         (mm_bridge_s6_s0_agent_rp_valid),                     //          .valid
		.sink_data          (mm_bridge_s6_s0_agent_rp_data),                      //          .data
		.sink_startofpacket (mm_bridge_s6_s0_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (mm_bridge_s6_s0_agent_rp_endofpacket),               //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                               //       src.ready
		.src_valid          (router_007_src_valid),                               //          .valid
		.src_data           (router_007_src_data),                                //          .data
		.src_channel        (router_007_src_channel),                             //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                          //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (95),
		.PKT_DEST_ID_L             (93),
		.PKT_SRC_ID_H              (92),
		.PKT_SRC_ID_L              (90),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (109),
		.ST_CHANNEL_W              (7),
		.VALID_WIDTH               (7),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (79),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) mm_bridge_master_m0_limiter (
		.clk                    (clk_clk_clk),                                        //       clk.clk
		.reset                  (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                   //          .valid
		.cmd_sink_data          (router_src_data),                                    //          .data
		.cmd_sink_channel       (router_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (mm_bridge_master_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (mm_bridge_master_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (mm_bridge_master_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (mm_bridge_master_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_master_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                  //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                  //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                   //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                          //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                            //          .endofpacket
		.rsp_src_ready          (mm_bridge_master_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_master_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (mm_bridge_master_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (mm_bridge_master_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (mm_bridge_master_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_master_m0_limiter_rsp_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (mm_bridge_master_m0_limiter_cmd_valid_data)          // cmd_valid.data
	);

	jtag_system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                                        //        clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready         (mm_bridge_master_m0_limiter_cmd_src_ready),          //       sink.ready
		.sink_channel       (mm_bridge_master_m0_limiter_cmd_src_channel),        //           .channel
		.sink_data          (mm_bridge_master_m0_limiter_cmd_src_data),           //           .data
		.sink_startofpacket (mm_bridge_master_m0_limiter_cmd_src_startofpacket),  //           .startofpacket
		.sink_endofpacket   (mm_bridge_master_m0_limiter_cmd_src_endofpacket),    //           .endofpacket
		.sink_valid         (mm_bridge_master_m0_limiter_cmd_valid_data),         // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                               //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                               //           .valid
		.src0_data          (cmd_demux_src0_data),                                //           .data
		.src0_channel       (cmd_demux_src0_channel),                             //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                       //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                         //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                               //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                               //           .valid
		.src1_data          (cmd_demux_src1_data),                                //           .data
		.src1_channel       (cmd_demux_src1_channel),                             //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                       //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                         //           .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                               //       src2.ready
		.src2_valid         (cmd_demux_src2_valid),                               //           .valid
		.src2_data          (cmd_demux_src2_data),                                //           .data
		.src2_channel       (cmd_demux_src2_channel),                             //           .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                       //           .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                         //           .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                               //       src3.ready
		.src3_valid         (cmd_demux_src3_valid),                               //           .valid
		.src3_data          (cmd_demux_src3_data),                                //           .data
		.src3_channel       (cmd_demux_src3_channel),                             //           .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                       //           .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                         //           .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                               //       src4.ready
		.src4_valid         (cmd_demux_src4_valid),                               //           .valid
		.src4_data          (cmd_demux_src4_data),                                //           .data
		.src4_channel       (cmd_demux_src4_channel),                             //           .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                       //           .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                         //           .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                               //       src5.ready
		.src5_valid         (cmd_demux_src5_valid),                               //           .valid
		.src5_data          (cmd_demux_src5_data),                                //           .data
		.src5_channel       (cmd_demux_src5_channel),                             //           .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                       //           .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                         //           .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                               //       src6.ready
		.src6_valid         (cmd_demux_src6_valid),                               //           .valid
		.src6_data          (cmd_demux_src6_data),                                //           .data
		.src6_channel       (cmd_demux_src6_channel),                             //           .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),                       //           .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket)                          //           .endofpacket
	);

	jtag_system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                                        //       clk.clk
		.reset               (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_src_valid),                                  //          .valid
		.src_data            (cmd_mux_src_data),                                   //          .data
		.src_channel         (cmd_mux_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                             //          .channel
		.sink0_data          (cmd_demux_src0_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (clk_clk_clk),                                        //       clk.clk
		.reset               (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                              //          .valid
		.src_data            (cmd_mux_001_src_data),                               //          .data
		.src_channel         (cmd_mux_001_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                             //          .channel
		.sink0_data          (cmd_demux_src1_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (clk_clk_clk),                                        //       clk.clk
		.reset               (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                              //          .valid
		.src_data            (cmd_mux_002_src_data),                               //          .data
		.src_channel         (cmd_mux_002_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                             //          .channel
		.sink0_data          (cmd_demux_src2_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (clk_clk_clk),                                        //       clk.clk
		.reset               (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                              //          .valid
		.src_data            (cmd_mux_003_src_data),                               //          .data
		.src_channel         (cmd_mux_003_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                             //          .channel
		.sink0_data          (cmd_demux_src3_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (clk_clk_clk),                                        //       clk.clk
		.reset               (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                              //          .valid
		.src_data            (cmd_mux_004_src_data),                               //          .data
		.src_channel         (cmd_mux_004_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                             //          .channel
		.sink0_data          (cmd_demux_src4_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (clk_clk_clk),                                        //       clk.clk
		.reset               (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                              //          .valid
		.src_data            (cmd_mux_005_src_data),                               //          .data
		.src_channel         (cmd_mux_005_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                             //          .channel
		.sink0_data          (cmd_demux_src5_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (clk_clk_clk),                                        //       clk.clk
		.reset               (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                              //          .valid
		.src_data            (cmd_mux_006_src_data),                               //          .data
		.src_channel         (cmd_mux_006_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                               //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                               //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                             //          .channel
		.sink0_data          (cmd_demux_src6_data),                                //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                               //      sink.ready
		.sink_channel       (router_001_src_channel),                             //          .channel
		.sink_data          (router_001_src_data),                                //          .data
		.sink_startofpacket (router_001_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_001_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_src0_data),                                //          .data
		.src0_channel       (rsp_demux_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                          //          .endofpacket
	);

	jtag_system_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                               //      sink.ready
		.sink_channel       (router_002_src_channel),                             //          .channel
		.sink_data          (router_002_src_data),                                //          .data
		.sink_startofpacket (router_002_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_002_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_001_src0_data),                            //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                      //          .endofpacket
	);

	jtag_system_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                               //      sink.ready
		.sink_channel       (router_003_src_channel),                             //          .channel
		.sink_data          (router_003_src_data),                                //          .data
		.sink_startofpacket (router_003_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_003_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_002_src0_data),                            //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                      //          .endofpacket
	);

	jtag_system_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                               //      sink.ready
		.sink_channel       (router_004_src_channel),                             //          .channel
		.sink_data          (router_004_src_data),                                //          .data
		.sink_startofpacket (router_004_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_004_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_003_src0_data),                            //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                      //          .endofpacket
	);

	jtag_system_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                               //      sink.ready
		.sink_channel       (router_005_src_channel),                             //          .channel
		.sink_data          (router_005_src_data),                                //          .data
		.sink_startofpacket (router_005_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_005_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_004_src0_data),                            //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                      //          .endofpacket
	);

	jtag_system_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                               //      sink.ready
		.sink_channel       (router_006_src_channel),                             //          .channel
		.sink_data          (router_006_src_data),                                //          .data
		.sink_startofpacket (router_006_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_006_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_005_src0_data),                            //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                      //          .endofpacket
	);

	jtag_system_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                               //      sink.ready
		.sink_channel       (router_007_src_channel),                             //          .channel
		.sink_data          (router_007_src_data),                                //          .data
		.sink_startofpacket (router_007_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_007_src_valid),                               //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_006_src0_data),                            //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                      //          .endofpacket
	);

	jtag_system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                                        //       clk.clk
		.reset               (mm_bridge_master_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                  //       src.ready
		.src_valid           (rsp_mux_src_valid),                                  //          .valid
		.src_data            (rsp_mux_src_data),                                   //          .data
		.src_channel         (rsp_mux_src_channel),                                //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                               //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                               //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                             //          .channel
		.sink0_data          (rsp_demux_src0_data),                                //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                       //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                         //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                           //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                           //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                         //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                            //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                   //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                     //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                           //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                           //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                         //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                            //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                   //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                     //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                           //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                           //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                         //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                            //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                   //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                     //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                           //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                           //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                         //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                            //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                   //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket),                     //          .endofpacket
		.sink5_ready         (rsp_demux_005_src0_ready),                           //     sink5.ready
		.sink5_valid         (rsp_demux_005_src0_valid),                           //          .valid
		.sink5_channel       (rsp_demux_005_src0_channel),                         //          .channel
		.sink5_data          (rsp_demux_005_src0_data),                            //          .data
		.sink5_startofpacket (rsp_demux_005_src0_startofpacket),                   //          .startofpacket
		.sink5_endofpacket   (rsp_demux_005_src0_endofpacket),                     //          .endofpacket
		.sink6_ready         (rsp_demux_006_src0_ready),                           //     sink6.ready
		.sink6_valid         (rsp_demux_006_src0_valid),                           //          .valid
		.sink6_channel       (rsp_demux_006_src0_channel),                         //          .channel
		.sink6_data          (rsp_demux_006_src0_data),                            //          .data
		.sink6_startofpacket (rsp_demux_006_src0_startofpacket),                   //          .startofpacket
		.sink6_endofpacket   (rsp_demux_006_src0_endofpacket)                      //          .endofpacket
	);

endmodule
